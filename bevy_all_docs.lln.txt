Three horizontal lines stacked on top of eachother
Bevy Engine
Migration Guides
Bevy Engine
A saltire or x-cross
Main Menu
Migration Guides
Introduction
0.14 to 0.15
0.13 to 0.14
0.12 to 0.13
0.11 to 0.12
API updates to the AnimationPlayer
Fix run-once runners
Add support for KHR_materials_emissive_strength
Bevy Asset V2
Migrating a custom asset loader
Asset hot-reloading
Labeled assets
Using assets
Asset events
UntypedHandle
Copy on Write AssetPaths
Removed anyhow
Non-blocking load_untyped using a wrapper asset
reflect: TypePath part 2
More ergonomic spatial audio
Simplify parallel iteration methods
Fix safety invariants for WorldQuery::fetch and simplify cloning
Opt-out multi-threaded feature flag
Refactor build_schedule and related errors
Add system.map(...) for transforming the output of a system
Replaced EntityMap with HashMap
Rename ManualEventIterator
Replaced EntityCommand Implementation for FnOnce
Move schedule name into Schedule
Refactor EventReader::iter to read
Replace IntoSystemSetConfig with IntoSystemSetConfigs
Moved get_component(_unchecked_mut) from Query to QueryState
Fix naming on "tick" Column and ComponentSparseSet methods
Return a boolean from set_if_neq
Rename RemovedComponents::iter/iter_with_id to read/read_with_id
Remove States::variants and remove enum-only restriction its derive
Replace all labels with interned labels
Add configure_schedules to App and Schedules to apply ScheduleBuildSettings to all schedules
Only run event systems if they have tangible work to do
Allow disjoint mutable world access via EntityMut
Make builder types take and return Self
Change AxisSettings livezone default
Rename bevy_math::rects conversion methods
Rename Bezier to CubicBezier for clarity
Add Cubic prefix to all cubic curve generators
Remove the bevy_dylib feature
Refactor path module of bevy_reflect
Make it so ParsedPath can be passed to GetPath
Remove TypeRegistry re-export rename
Provide getters for fields of ReflectFromPtr
bevy_reflect: Fix ignored/skipped field order
Return URect instead of (UVec2, UVec2) in Camera::physical_viewport_rect
Update bevy_window::PresentMode to mirror wgpu::PresentMode
Use GpuArrayBuffer for MeshUniform
Reduce the size of MeshUniform to improve performance
Reorder render sets, refactor bevy_sprite to take advantage
Split ComputedVisibility into two components to allow for accurate change detection and speed up visibility propagation
Cleanup visibility module
Allow other plugins to create renderer resources
Use EntityHashMap<Entity, T> for render world entity storage for better performance
PCF For DirectionalLight/SpotLight Shadows
use Material for wireframes
Deferred Renderer
pbr shader cleanup
*_PREPASS Shader Def Cleanup
Allow extensions to StandardMaterial
Variable MeshPipeline View Bind Group Layout
Update shader imports
Bind group entries
Detect cubemap for dds textures
Add convenient methods for Image
Use “specular occlusion” term to consistently extinguish fresnel on Ambient and Environment Map lights
Fix fog color being inaccurate
Image Sampler Improvements
StandardMaterial Light Transmission
Increase default normal bias to avoid common artifacts
Make DirectionalLight Cascades computation generic over CameraProjection
Move skin code to a separate module
Move scene spawner systems to SpawnScene schedule
Remove Resource and add Debug to TaskPoolOptions
Global TaskPool API improvements
Unify FixedTime and Time while fixing several problems
Change the default for the measure_func field of ContentSize to None.
Change UiScale to a tuple struct
Cleanup some bevy_text pipeline.rs
Make GridPlacement's fields non-zero and add accessor functions.
Remove Val's try_* arithmetic methods
Rename Val evaluate to resolve and implement viewport variant support
TextLayoutInfo::size should hold the drawn size of the text, and not a scaled value.
Have a separate implicit viewport node per root node + make viewport node Display::Grid
Rename num_font_atlases to len.
Various accessibility API updates.
Add some more docs for bevy_text.
Update UI alignment docs
Add option to toggle window control buttons
Improve bevy_winit documentation
Work around naga/wgpu WGSL instance_index -> GLSL gl_InstanceID bug on WebGL2
Remove IntoIterator impl for &mut EventReader
Update default `ClearColor`` to better match Bevy's branding
View Transformations
0.10 to 0.11
0.9 to 0.10
0.8 to 0.9
0.7 to 0.8
0.6 to 0.7
0.5 to 0.6
0.4 to 0.5
Getting Started
Learn
News
Community
Foundation
Assets
Examples
Donate heart icon
GitHub repo
Migration Guide: 0.11 to 0.12
Bevy relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is "the latest stable release" of Rust.

API updates to the AnimationPlayer #
Animation
Some methods on AnimationPlayer have changed.

elapsed was removed. Use seek_time.
set_elapsed was removed. Use seek_to.
stop_repeating was removed. Use set_repeat(RepeatAnimation::Never).
If you were manually resetting animation state, you can use the new replay method instead.

Fix run-once runners #
App
app.ready() has been replaced by app.plugins_state() which will return more details on the current state of plugins in the app

Add support for KHR_materials_emissive_strength #
Assets
The GLTF asset loader will now factor in emissiveStrength when converting to Bevy’s StandardMaterial::emissive. Blender will export emissive materials using this field. Remove the field from your GLTF files or manually modify your materials post-asset-load to match how Bevy would load these files in previous versions.

Bevy Asset V2 #
Assets
Migrating a custom asset loader #

Existing asset loaders will need a few small changes to get them to work with Bevy Assets V2.

First, you’ll need to add the asset type as an associated type of the loader. This type is called Asset and represents the type of the “default asset” produced by the loader.

You’ll also need to add a Settings type which represents options that can be passed to the loader when you request an asset. If your asset has no settings, then you can just set it to the unit type.

pub struct MyAssetLoader;

impl AssetLoader for MyAssetLoader {
    type Asset = MyAsset;
    type Settings = ();
You’ll need to make a couple small changes to the load function as well. The load function now takes a settings parameter whose type is, you guessed it, Settings:

    fn load<'a>(
        &'a self,
        reader: &'a mut Reader,
        settings: &'a Self::Settings,
        load_context: &'a mut LoadContext,
    ) -> BoxedFuture<'a, Result<Self::Asset, anyhow::Error>> {
Again, if you are not using settings, then you can just ignore the parameter (prefix it with “_”).

Also, the second argument is now a reader rather than vector of bytes. If your existing code expects bytes, you can simply read the entire stream:

    fn load<'a>(
        &'a self,
        reader: &'a mut Reader,
        _settings: &'a Self::Settings,
        load_context: &'a mut LoadContext,
    ) -> BoxedFuture<'a, Result<Self::Asset, anyhow::Error>> {
        Box::pin(async move {
            let mut bytes = Vec::new();
            reader.read_to_end(&mut bytes).await?;
Finally, you’ll need to write the code which returns the default asset. This used to be done via a call to load_context.set_default_asset(), however in V2 you simply return the asset from the load function:

    fn load<'a>(
        &'a self,
        reader: &'a mut Reader,
        _settings: &'a Self::Settings,
        load_context: &'a mut LoadContext,
    ) -> BoxedFuture<'a, Result<Self::Asset, anyhow::Error>> {
        Box::pin(async move {
            let mut bytes = Vec::new();
            reader.read_to_end(&mut bytes).await?;
        let mut asset: MyAsset =
            serde_json::from_slice(&bytes).expect("unable to decode asset");
        Ok(asset)
    }
To use the new loader, make sure you register both the loader and the asset type:

app.register_asset_loader(MyAssetLoader)
    .init_asset::<MyAsset>()
Asset hot-reloading #

The feature filesystem_watcher has been renamed to file_watcher. In addition, you no longer need to manually configure the ChangeWatcher in the AssetPlugin as it is now configured automatically when the feature is enabled.

Labeled assets #

If your loader allows labeled assets, there are a couple of different ways to handle them. The simplest is to call load_context.labeled_asset_scope:

// Assume `asset.children` is a HashMap or something.
// Using `drain` here so that we take ownership and don't end up with
// multiple references to the same asset.
asset.children.drain().for_each(|(label, mut item)| {
    load_context.labeled_asset_scope(label, |lc| {
        // Do any additional processing on the item
        // Use 'lc' to load dependencies
        item
    });
});
You can use the provided load context (lc) to load additional assets. These will automatically be registered as dependencies of the labeled asset.

Using assets #

The actual call to load hasn’t changed:

let handle = server.load("path/to/my/asset.json");

// ...

let data = assets.get(&handle).unwrap();
Asset events #

There are a few changes to asset events. The event no longer contains a handle field, instead the event contains a field called id:

for ev in ev_template.read() {
    match ev {
        AssetEvent::Added { id } => {
            println!("Asset added");
        }
        AssetEvent::LoadedWithDependencies { id } => {
            println!("Asset loaded");
        }
        AssetEvent::Modified { id } => {
            println!("Asset modified");
        }
        AssetEvent::Removed { id } => {
            println!("Asset removed");
        }
    }
}
The id can be used to get access to the asset data, the asset’s path or load status. Asset handles also contain an id field which can be used to compare for equality:

AssetEvent::Modified { id } => {
    for cmp in query.iter() {
       if cmp.handle.id() == id {
           println!("Found it!");
       }
    }
}
Also, as you may have noticed, the set of events has changed. The most important of these is LoadedWithDependencies which tells you that the asset and all its dependencies have finished loading into memory.

UntypedHandle #

HandleUntyped has been renamed to UntypedHandle. HandleId has been replaced with UntypedAssetId and its typed equivalent AssetId<T>.

The new way to construct an untyped handle looks like this:

// 0.11
const MESH_HANDLE: HandleUntyped =
    HandleUntyped::weak_from_u64(Mesh::TYPE_UUID, 0x1f40128bac02a9b);
// 0.12
const MESH_HANDLE: UntypedHandle =
    UntypedHandle::Weak(UntypedAssetId::Uuid { type_id: TypeId::of::<Mesh>(), uuid: Uuid::from_u128(0x1f40128bac02a9b) });
Copy on Write AssetPaths #
Assets
// 0.11
AssetPath::new("logo.png", None);

// 0.12
AssetPath::from("logo.png");

// 0.11
AssetPath::new("scene.gltf", Some("Mesh0"));

// 0.12
AssetPath::from("scene.gltf").with_label("Mesh0");
AssetPath now serializes as AssetPath("some_path.extension#Label") instead of as AssetPath { path: "some_path.extension", label: Some("Label) }

Removed anyhow #
Assets
anyhow is no longer exported by bevy_asset; Add it to your own project (if required).
AssetLoader and AssetSaver have an associated type Error; Define an appropriate error type (e.g., using thiserror), or use a pre-made error type (e.g., anyhow::Error). Note that using anyhow::Error is a drop-in replacement.
AssetLoaderError has been removed; Define a new error type, or use an alternative (e.g., anyhow::Error)
All the first-party AssetLoaders and AssetSavers now return relevant (and narrow) error types instead of a single ambiguous type; Match over the specific error type, or encapsulate (Box<dyn>, thiserror, anyhow, etc.)
Non-blocking load_untyped using a wrapper asset #
Assets
Whenever possible use the typed API in order to directly get a handle to your asset. If you do not know the type or need to use load_untyped for a different reason, Bevy 0.12 introduces an additional layer of indirection. The asset server will return a handle to a LoadedUntypedAsset, which will load in the background. Once it is loaded, the untyped handle to the asset file can be retrieved from the LoadedUntypedAssets field handle.

reflect: TypePath part 2 #
Assets
Reflection
Rely on TypePath instead of std::any::type_name for all stability guarantees and for use in all reflection contexts, this is used through with one of the following APIs:
TypePath::type_path if you have a concrete type and not a value.
DynamicTypePath::reflect_type_path if you have an dyn Reflect value without a concrete type.
TypeInfo::type_path for use through the registry or if you want to work with the represented type of a DynamicFoo.
Remove type_name from manual Reflect implementations.
Use type_path and type_path_table in place of type_name on TypeInfo-like structs.
Use get_with_type_path(_mut) over get_with_type_name(_mut).
More ergonomic spatial audio #
Audio
Spatial audio now automatically uses the transform of the AudioBundle and of an entity with a SpatialListener component.

If you were manually scaling emitter/listener positions, you can use the spatial_scale field of AudioPlugin instead.

// 0.11
commands.spawn(
    SpatialAudioBundle {
        source: asset_server.load("sounds/Windless Slopes.ogg"),
        settings: PlaybackSettings::LOOP,
        spatial: SpatialSettings::new(listener_position, gap, emitter_position),
    },
);

fn update(
    emitter_query: Query<(&Transform, &SpatialAudioSink)>,
    listener_query: Query<&Transform, With<Listener>>,
) {
    let listener = listener_query.single();

    for (transform, sink) in &emitter_query {
        sink.set_emitter_position(transform.translation);
        sink.set_listener_position(*listener, gap);
    }
}

// 0.12
commands.spawn((
    SpatialBundle::from_transform(Transform::from_translation(emitter_position)),
    AudioBundle {
        source: asset_server.load("sounds/Windless Slopes.ogg"),
        settings: PlaybackSettings::LOOP.with_spatial(true),
    },
));

commands.spawn((
    SpatialBundle::from_transform(Transform::from_translation(listener_position)),
    SpatialListener::new(gap),
));
Simplify parallel iteration methods #
ECS
The method QueryParIter::for_each_mut has been deprecated and is no longer functional. Use for_each instead, which now supports mutable queries.

// 0.11
query.par_iter_mut().for_each_mut(|x| ...);

// 0.12
query.par_iter_mut().for_each(|x| ...);
The method QueryParIter::for_each now takes ownership of the QueryParIter, rather than taking a shared reference.

// 0.11
let par_iter = my_query.par_iter().batching_strategy(my_batching_strategy);
par_iter.for_each(|x| {
    // ...Do stuff with x...
    par_iter.for_each(|y| {
        // ...Do nested stuff with y...
    });
});

// 0.12
my_query.par_iter().batching_strategy(my_batching_strategy).for_each(|x| {
    // ...Do stuff with x...
    my_query.par_iter().batching_strategy(my_batching_strategy).for_each(|y| {
        // ...Do nested stuff with y...
    });
});
Fix safety invariants for WorldQuery::fetch and simplify cloning #
ECS
fetch invariants

The function WorldQuery::fetch has had the following safety invariant added:

If update_component_access includes any mutable accesses, then the caller must ensure that fetch is called no more than once for each entity/table_row in each archetype. If Self implements ReadOnlyWorldQuery, then this can safely be called multiple times.
This invariant was always required for soundness, but was previously undocumented. If you called this function manually anywhere, you should check to make sure that this invariant is not violated.

Removed clone_fetch

The function WorldQuery::clone_fetch has been removed. The associated type WorldQuery::Fetch now has the bound Clone.

// 0.11
struct MyFetch<'w> { ... }

unsafe impl WorldQuery for MyQuery {
    ...
    type Fetch<'w> = MyFetch<'w>
    unsafe fn clone_fetch<'w>(fetch: &Self::Fetch<'w>) -> Self::Fetch<'w> {
        MyFetch {
            field1: fetch.field1,
            field2: fetch.field2.clone(),
            ...
        }
    }
}

// 0.12
#[derive(Clone)]
struct MyFetch<'w> { ... }

unsafe impl WorldQuery for MyQuery {
    ...
    type Fetch<'w> = MyFetch<'w>;
}
Opt-out multi-threaded feature flag #
ECS
The multi-threaded feature in bevy_ecs and bevy_tasks is no longer enabled by default. However, this remains a default feature for the umbrella bevy crate.

if you are using bevy without default-features, or if you depend on bevy_ecs or bevy_tasks directly, you most likely want to enable this to allow systems to run in parallel.

Refactor build_schedule and related errors #
ECS
ScheduleBuildError now has strings in more of its variants. You may need to adjust code that is handling these variants.

Add system.map(...) for transforming the output of a system #
ECS
The system_adapter functions have been deprecated: use .map instead, which is a lightweight alternative to .pipe.

// 0.11
my_system.pipe(system_adapter::ignore)
my_system.pipe(system_adapter::unwrap)
my_system.pipe(system_adapter::new(T::from))

// 0.12
my_system.map(std::mem::drop)
my_system.map(Result::unwrap)
my_system.map(T::from)

// 0.11
my_system.pipe(system_adapter::info)
my_system.pipe(system_adapter::dbg)
my_system.pipe(system_adapter::warn)
my_system.pipe(system_adapter::error)

// 0.12
my_system.map(bevy_utils::info)
my_system.map(bevy_utils::dbg)
my_system.map(bevy_utils::warn)
my_system.map(bevy_utils::error)
Replaced EntityMap with HashMap #
ECS
Calls to EntityMap::world_scope can be directly replaced with the following: map.world_scope(&mut world) -> world.world_scope(&mut map)
Calls to legacy EntityMap methods such as EntityMap::get must explicitly include de/reference symbols: let entity = map.get(parent); -> let &entity = map.get(&parent);
Rename ManualEventIterator #
ECS
The type ManualEventIterator has been renamed to EventIterator. Additionally, ManualEventIteratorWithId has been renamed to EventIteratorWithId.

Replaced EntityCommand Implementation for FnOnce #
ECS
1. New-Type FnOnce

Create an EntityCommand type which implements the method you previously wrote:

pub struct ClassicEntityCommand<F>(pub F);

impl<F> EntityCommand for ClassicEntityCommand<F>
where
    F: FnOnce(Entity, &mut World) + Send + 'static,
{
    fn apply(self, id: Entity, world: &mut World) {
        (self.0)(id, world);
    }
}

commands.add(ClassicEntityCommand(|id: Entity, world: &mut World| {
    /* ... */
}));
2. Extract (Entity, &mut World) from EntityMut

The method into_world_mut can be used to gain access to the World from an EntityMut.

let old = |id: Entity, world: &mut World| {
    /* ... */
};

let new = |mut entity: EntityWorldMut| {
    let id = entity.id();
    let world = entity.into_world_mut();
    /* ... */
};
Move schedule name into Schedule #
ECS
Schedule::new and App::add_schedule

// 0.11
let schedule = Schedule::new();
app.add_schedule(MyLabel, schedule);

// 0.12
let schedule = Schedule::new(MyLabel);
app.add_schedule(schedule);
if you aren’t inserting the schedule into the world and are using the schedule directly you can use the default constructor which reuses a default label.

// 0.11
let schedule = Schedule::new();
schedule.run(world);

// 0.12
let schedule = Schedule::default();
schedule.run(world);
Schedules::insert

// 0.11
let schedule = Schedule::new();
schedules.insert(MyLabel, schedule);

// 0.12
let schedule = Schedule::new(MyLabel);
schedules.insert(schedule);
World::add_schedule

// 0.11
let schedule = Schedule::new();
world.add_schedule(MyLabel, schedule);

// 0.12
let schedule = Schedule::new(MyLabel);
world.add_schedule(schedule);
Refactor EventReader::iter to read #
ECS
Existing usages of EventReader::iter and EventReader::iter_with_id will have to be changed to EventReader::read and EventReader::read_with_id respectively.
Existing usages of ManualEventReader::iter and ManualEventReader::iter_with_id will have to be changed to ManualEventReader::read and ManualEventReader::read_with_id respectively.
Replace IntoSystemSetConfig with IntoSystemSetConfigs #
ECS
Use App::configure_sets instead of App::configure_set
Use Schedule::configure_sets instead of Schedule::configure_set
Moved get_component(_unchecked_mut) from Query to QueryState #
ECS
use bevy_ecs::system::QueryComponentError; -> use bevy_ecs::query::QueryComponentError;

Fix naming on "tick" Column and ComponentSparseSet methods #
ECS
The following method names were renamed, from foo_ticks_bar to foo_tick_bar (ticks is now singular, tick):

ComponentSparseSet::get_added_ticks → get_added_tick
ComponentSparseSet::get_changed_ticks → get_changed_tick
Column::get_added_ticks → get_added_tick
Column::get_changed_ticks → get_changed_tick
Column::get_added_ticks_unchecked → get_added_tick_unchecked
Column::get_changed_ticks_unchecked → get_changed_tick_unchecked
Return a boolean from set_if_neq #
ECS
The trait method DetectChangesMut::set_if_neq now returns a boolean value indicating whether or not the value was changed. If you were implementing this function manually, you must now return true if the value was overwritten and false if the value was not.

Rename RemovedComponents::iter/iter_with_id to read/read_with_id #
ECS
fn react_on_removal(mut removed: RemovedComponents<MyComponent>) {
    // 0.11
    for entity in removed.iter() { /* ... */ }
    for (entity, id) in removed.iter_with_id() { /* ... */ }
    for entity in &mut removed { /* ... */ }

    // 0.12
    for entity in removed.read() { /* ... */ }
    for (entity, id) in removed.read_with_id() { /* ... */ }
    for entity in removed.read() { /* ... */ }
}
Remove States::variants and remove enum-only restriction its derive #
ECS
States::variants no longer exists. If you relied on this function, consider using a library that provides enum iterators.

Replace all labels with interned labels #
ECS
Replace BoxedScheduleLabel and Box<dyn ScheduleLabel> with InternedScheduleLabel or Interned<dyn ScheduleLabel>.

Replace BoxedSystemSet and Box<dyn SystemSet> with InternedSystemSet or Interned<dyn SystemSet>.

Replace AppLabelId with InternedAppLabel or Interned<dyn AppLabel>.

Types manually implementing ScheduleLabel, AppLabel or SystemSet need to implement:

dyn_hash directly instead of implementing DynHash
as_dyn_eq
Pass labels to World::try_schedule_scope, World::schedule_scope, World::try_run_schedule. World::run_schedule, Schedules::remove, Schedules::remove_entry, Schedules::contains, Schedules::get and Schedules::get_mut by value instead of by reference.

Add configure_schedules to App and Schedules to apply ScheduleBuildSettings to all schedules #
ECS
App
No breaking changes.
Adds Schedule::get_build_settings() getter for the schedule’s ScheduleBuildSettings.
Can replaced manual configuration of all schedules:
// 0.11
for (_, schedule) in app.world.resource_mut::<Schedules>().iter_mut() {
    schedule.set_build_settings(build_settings);
}

// 0.l2
app.configure_schedules(build_settings);
Only run event systems if they have tangible work to do #
ECS
App
Events<T>::update_system has been split off from the type and can be found at bevy_ecs::event::event_update_system.

Allow disjoint mutable world access via EntityMut #
ECS
Reflection
Removed the method EntityRef::world, to fix a soundness issue with queries. If you need access to &World while using an EntityRef, consider passing the world as a separate parameter.

EntityMut can no longer perform ‘structural’ world mutations, such as adding or removing components, or despawning the entity. Additionally, EntityMut::world, EntityMut::world_mut, EntityMut::into_world_mut, and EntityMut::world_scope have been removed. Instead, use the newly-added type EntityWorldMut, which is a helper type for working with &mut World.

Make builder types take and return Self #
ECS
Scenes
When using bevy_ecs::DynamicSceneBuilder and bevy_ecs::SceneBuilder, instead of binding the builder to a variable, directly use it. Methods on those types now consume Self, so you will need to re-bind the builder if you don’t build it immediately.

// 0.11
let mut scene_builder = DynamicSceneBuilder::from_world(&world);
let scene = scene_builder.extract_entity(a).extract_entity(b).build();

// 0.12
let scene = DynamicSceneBuilder::from_world(&world)
   .extract_entity(a)
   .extract_entity(b)
   .build();
Change AxisSettings livezone default #
Input
The default live zone bounds have been changed from -0.95..=0.95 to -1.0..=1.0 to align with more common usage. If you were relying on the old default, you can change this by modifying GamepadSettings::default_axis_settings.

Rename bevy_math::rects conversion methods #
Math
Replace Rect::as_urect with Rect::as_irect, Rect::as_rect with Rect::as_urect, and URect::as_urect with URect::as_irect.

Rename Bezier to CubicBezier for clarity #
Math
Change all Bezier references to CubicBezier

Add Cubic prefix to all cubic curve generators #
Math
Rename: BSpline -> CubicBSpline
Rename: CardinalSpline -> CubicCardinalSpline
Rename: Hermite -> CubicHermite
Remove the bevy_dylib feature #
Meta
If you were using Bevy’s bevy_dylib feature, use Bevy’s dynamic_linking feature instead.

# 0.11
cargo run --features bevy/bevy_dylib

# 0.12
cargo run --features bevy/dynamic_linking
[dependencies]
# 0.11
bevy = { version = "0.11", features = ["bevy_dylib"] }

# 0.12
bevy = { version = "0.12", features = ["dynamic_linking"] }
Refactor path module of bevy_reflect #
Reflection
If you were matching on the Err(ReflectPathError) value returned by GetPath and ParsedPath methods, now only the parse-related errors and the offset are publicly accessible. You can always use the fmt::Display to get a clear error message, but if you need programmatic access to the error types, please open an issue.

Make it so ParsedPath can be passed to GetPath #
Reflection
GetPath now requires Reflect. This reduces a lot of boilerplate on bevy’s side. If you were implementing manually GetPath on your own type, please get in touch!

ParsedPath::element[_mut] isn’t an inherent method of ParsedPath, you must now import ReflectPath. This is only relevant if you weren’t importing the bevy prelude.

-use bevy::reflect::ParsedPath;
+use bevy::reflect::{ParsedPath, ReflectPath};

parsed_path.element(reflect_type).unwrap()
Remove TypeRegistry re-export rename #
Reflection
TypeRegistry as re-exported by the wrapper bevy crate is now TypeRegistryArc
TypeRegistryInternal as re-exported by the wrapper bevy crate is now TypeRegistry
Provide getters for fields of ReflectFromPtr #
Reflection
ReflectFromPtr::as_reflect_ptr is now ReflectFromPtr::as_reflect
ReflectFromPtr::as_reflect_ptr_mut is now ReflectFromPtr::as_reflect_mut
bevy_reflect: Fix ignored/skipped field order #
Reflection
Fields marked #[reflect(skip_serializing)] now must implement Default or specify a custom default function with #[reflect(default = "path::to::some_func")]
#[derive(Reflect)]
struct MyStruct {
  #[reflect(skip_serializing)]
  #[reflect(default = "get_foo_default")]
  foo: Foo, // <- `Foo` does not impl `Default` so requires a custom function
  #[reflect(skip_serializing)]
  bar: Bar, // <- `Bar` impls `Default`
}

#[derive(Reflect)]
struct Foo(i32);

#[derive(Reflect, Default)]
struct Bar(i32);

fn get_foo_default() -> Foo {
  Foo(123)
}
SerializationData::new has been changed to expect an iterator of (usize, SkippedField) rather than one of just usize
// 0.11
SerializationData::new([0, 3].into_iter());

// 0.12
SerializationData::new([
  (0, SkippedField::new(field_0_default_fn)),
  (3, SkippedField::new(field_3_default_fn)),
].into_iter());
Serialization::is_ignored_field has been renamed to Serialization::is_field_skipped
Fields marked #[reflect(skip_serializing)] are now included in deserialization output. This may affect logic that expected those fields to be absent.
Return URect instead of (UVec2, UVec2) in Camera::physical_viewport_rect #
Rendering
// 0.11
fn view_physical_camera_rect(camera_query: Query<&Camera>) {
    let camera = camera_query.single();
    let Some((min, max)) = camera.physical_viewport_rect() else { return };
    dbg!(min, max);
}

// 0.12
fn view_physical_camera_rect(camera_query: Query<&Camera>) {
    let camera = camera_query.single();
    let Some(URect { min, max }) = camera.physical_viewport_rect() else { return };
    dbg!(min, max);
}
Update bevy_window::PresentMode to mirror wgpu::PresentMode #
Rendering
Handle bevy_window::PresentMode::FifoRelaxed when tweaking window present mode manually.

Use GpuArrayBuffer for MeshUniform #
Rendering
Accessing the model member of an individual mesh object’s shader Mesh struct the old way where each MeshUniform was stored at its own dynamic offset:

struct Vertex {
    @location(0) position: vec3<f32>,
};

fn vertex(vertex: Vertex) -> VertexOutput {
    var out: VertexOutput;
    out.clip_position = mesh_position_local_to_clip(
        mesh.model,
        vec4<f32>(vertex.position, 1.0)
    );
    return out;
}
The new way where one needs to index into the array of Meshes for the batch:

struct Vertex {
    @builtin(instance_index) instance_index: u32,
    @location(0) position: vec3<f32>,
};

fn vertex(vertex: Vertex) -> VertexOutput {
    var out: VertexOutput;
    out.clip_position = mesh_position_local_to_clip(
        mesh[vertex.instance_index].model,
        vec4<f32>(vertex.position, 1.0)
    );
    return out;
}
Note that using the instance_index is the default way to pass the per-object index into the shader, but if you wish to do custom rendering approaches you can pass it in however you like.

Reduce the size of MeshUniform to improve performance #
Rendering
Sphere::intersects_obb and Frustum::intersects_obb now take an Affine3A instead of a Mat4. You can use Affine3A::from_mat4 or Transform::compute_affine to get an Affine3A.

MeshUniform now stores its current and previous model transforms as 4x3 matrices. Helper functions were added to bevy_pbr::mesh_functions to unpack the data.

// 0.11
var model = mesh[instance_index].model;

// 0.12
#import bevy_pbr::mesh_functions::affine_to_square

var model = affine_to_square(mesh[instance_index].model);
Reorder render sets, refactor bevy_sprite to take advantage #
Rendering
Assets such as materials and meshes should now be created in PrepareAssets e.g. prepare_assets<Mesh>
Queueing entities to RenderPhases continues to be done in Queue e.g. queue_sprites
Preparing resources (textures, buffers, etc.) should now be done in PrepareResources, e.g. prepare_prepass_textures, prepare_mesh_uniforms
Prepare bind groups should now be done in PrepareBindGroups e.g. prepare_mesh_bind_group
Any batching or instancing can now be done in Prepare where the order of the phase items is known e.g. prepare_sprites
Split ComputedVisibility into two components to allow for accurate change detection and speed up visibility propagation #
Rendering
The ComputedVisibility component has been split into InheritedVisibility and ViewVisibility. Replace any usages of ComputedVisibility::is_visible_in_hierarchy with InheritedVisibility::get, and replace ComputedVisibility::is_visible_in_view with ViewVisibility::get.

// 0.11:
commands.spawn(VisibilityBundle {
    visibility: Visibility::Inherited,
    computed_visibility: ComputedVisibility::default(),
});

// 0.12:
commands.spawn(VisibilityBundle {
    visibility: Visibility::Inherited,
    inherited_visibility: InheritedVisibility::default(),
    view_visibility: ViewVisibility::default(),
});
// 0.11:
fn my_system(q: Query<&ComputedVisibility>) {
    for vis in &q {
        if vis.is_visible_in_hierarchy() {

// 0.12:
fn my_system(q: Query<&InheritedVisibility>) {
    for inherited_visibility in &q {
        if inherited_visibility.get() {
// 0.11:
fn my_system(q: Query<&ComputedVisibility>) {
    for vis in &q {
        if vis.is_visible_in_view() {

// 0.12:
fn my_system(q: Query<&ViewVisibility>) {
    for view_visibility in &q {
        if view_visibility.get() {
// 0.11:
fn my_system(mut q: Query<&mut ComputedVisibility>) {
    for vis in &mut q {
        vis.set_visible_in_view();

// 0.12:
fn my_system(mut q: Query<&mut ViewVisibility>) {
    for view_visibility in &mut q {
        view_visibility.set();
Cleanup visibility module #
Rendering
The check_visibility system’s Option<&NoFrustumCulling> parameter has been replaced by Has<NoFrustumCulling>, if you were calling it manually, you should change the type to match it

Allow other plugins to create renderer resources #
Rendering
The RenderPlugin now takes a RenderCreation enum instead of WgpuSettings. RenderSettings::default() returns RenderSettings::Automatic(WgpuSettings::default()). RenderSettings also implements From<WgpuSettings>.

// 0.11
RenderPlugin {
    wgpu_settings: WgpuSettings {
    ...
    },
}

// 0.12
RenderPlugin {
    render_creation: RenderCreation::Automatic(WgpuSettings {
    ...
    }),
}
// or
RenderPlugin {
    render_creation: WgpuSettings {
    ...
    }.into(),
}
Use EntityHashMap<Entity, T> for render world entity storage for better performance #
Rendering
Previously the render app extracted mesh entities and their component data from the main world and stored them as entities and components in the render world. Now they are extracted into essentially EntityHashMap<Entity, T> where T are structs containing an appropriate group of data. This means that while extract set systems will continue to run extract queries against the main world they will store their data in hash maps. Also, systems in later sets will either need to look up entities in the available resources such as RenderMeshInstances, or maintain their own EntityHashMap<Entity, T> for their own data.

// 0.11
fn queue_custom(
    material_meshes: Query<(Entity, &MeshTransforms, &Handle<Mesh>), With<InstanceMaterialData>>,
) {
    ...
    for (entity, mesh_transforms, mesh_handle) in &material_meshes {
        ...
    }
}

// 0.12
fn queue_custom(
    render_mesh_instances: Res<RenderMeshInstances>,
    instance_entities: Query<Entity, With<InstanceMaterialData>>,
) {
    ...
    for entity in &instance_entities {
        let Some(mesh_instance) = render_mesh_instances.get(&entity) else { continue; };
        // The mesh handle in `AssetId<Mesh>` form, and the `MeshTransforms` can now
        // be found in `mesh_instance` which is a `RenderMeshInstance`
        ...
    }
}
PCF For DirectionalLight/SpotLight Shadows #
Rendering
Shadows cast by directional lights or spotlights now have smoother edges. To revert to the old behavior, add ShadowFilteringMethod::Hardware2x2 to your cameras.

use Material for wireframes #
Rendering
WireframePipeline was removed. If you were using it directly, please create an issue explaining your use case.

Deferred Renderer #
Rendering
pbr shader cleanup #
Rendering
in custom material shaders:

pbr_functions::pbr no longer calls to pbr_functions::alpha_discard. if you were using the pbr function in a custom shader with alpha mask mode you now also need to call alpha_discard manually
rename imports of bevy_pbr::mesh_vertex_output to bevy_pbr::forward_io
rename instances of MeshVertexOutput to VertexOutput
in custom material prepass shaders:

rename instances of VertexOutput::clip_position to VertexOutput::position
*_PREPASS Shader Def Cleanup #
Rendering
When using functions from bevy_pbr::prepass_utils (prepass_depth(), prepass_normal(), prepass_motion_vector()) in contexts where these prepasses might be disabled, you should now wrap your calls with the appropriate #ifdef guards, (#ifdef DEPTH_PREPASS, #ifdef NORMAL_PREPASS, #ifdef MOTION_VECTOR_PREPASS) providing fallback logic where applicable.

Allow extensions to StandardMaterial #
Rendering
Manual implementations of AsBindGroup will need to be adjusted, the changes are pretty straightforward and can be seen in the diff for e.g. the texture_binding_array example.

Variable MeshPipeline View Bind Group Layout #
Rendering
MeshPipeline::view_layout and MeshPipeline::view_layout_multisampled have been replaced with a private array to accommodate for variable view bind group layouts. To obtain a view bind group layout for the current pipeline state, use the new MeshPipeline::get_view_layout() or MeshPipeline::get_view_layout_from_key() methods.

Update shader imports #
Rendering
naga_oil 0.10 reworks the import mechanism to support more syntax to make it more rusty, and test for item use before importing to determine which imports are modules and which are items, which allows:

use rust-style imports
#import bevy_pbr::{
    pbr_functions::{alpha_discard as discard, apply_pbr_lighting},
    mesh_bindings,
}
import partial paths:
#import part::of::path
// ...
path::remainder::function();
which will call to part::of::path::remainder::function

use fully qualified paths without importing:
// #import bevy_pbr::pbr_functions
bevy_pbr::pbr_functions::pbr()
use imported items without qualifying
#import bevy_pbr::pbr_functions::pbr
// for backwards compatibility the old style is still supported:
// #import bevy_pbr::pbr_functions pbr
// ...
pbr()
allows most imported items to end with _ and numbers (naga_oil#30). still doesn’t allow struct members to end with _ or numbers but it’s progress.
the vast majority of existing shader code will work without changes, but will emit “deprecated” warnings for old-style imports. these can be suppressed with the allow-deprecated feature.
partly breaks overrides (as far as i’m aware nobody uses these yet) - now overrides will only be applied if the overriding module is added as an additional import in the arguments to Composer::make_naga_module or Composer::add_composable_module. this is necessary to support determining whether imports are modules or items.
Bind group entries #
Rendering
Calls to RenderDevice::create_bind_group({BindGroupDescriptor { label, layout, entries }) must be amended to RenderDevice::create_bind_group(label, layout, entries).
If labels have been specified as "bind_group_name".into(), they need to change to just "bind_group_name". Some("bind_group_name") and None will still work, but Some("bind_group_name") can optionally be simplified to just "bind_group_name".
Detect cubemap for dds textures #
Rendering
If you are matching on a TextureError, you will need to add a new branch to handle TextureError::IncompleteCubemap.

Add convenient methods for Image #
Rendering
Replace calls to the Image::size() method with size_f32(). Replace calls to the Image::aspect_2d() method with aspect_ratio().

Use “specular occlusion” term to consistently extinguish fresnel on Ambient and Environment Map lights #
Rendering
If Fresnel highlights from Ambient and Environment Map lights are no longer visible in your materials, make sure you’re using a higher, physically plausible value of reflectance (⪆ 0.35).
Fix fog color being inaccurate #
Rendering
Colors in FogSettings struct (color and directional_light_color) are now sent to the GPU in linear space. If you were using Color::rgb()/Color::rgba() and would like to retain the previous colors, you can quickly fix it by switching to Color::rgb_linear()/Color::rgba_linear().

Image Sampler Improvements #
Rendering
When using the Image API, use ImageSamplerDescriptor instead of wgpu::SamplerDescriptor
If writing custom wgpu renderer features that work with Image, call &image_sampler.as_wgpu() to convert to a wgpu descriptor.
StandardMaterial Light Transmission #
Rendering
SsaoPipelineKey::temporal_noise has been renamed to SsaoPipelineKey::temporal_jitter
The TAA shader def (controlled by the presence of the TemporalAntiAliasSettings component in the camera) has been replaced with the TEMPORAL_JITTER shader def (controlled by the presence of the TemporalJitter component in the camera)
MeshPipelineKey::TAA has been replaced by MeshPipelineKey::TEMPORAL_JITTER
The TEMPORAL_NOISE shader def has been consolidated with TEMPORAL_JITTER
Increase default normal bias to avoid common artifacts #
Rendering
The default shadow_normal_bias value for DirectionalLight and SpotLight has changed to accommodate artifacts introduced with the new shadow PCF changes. It is unlikely (especially given the new PCF shadow behaviors with these values), but you might need to manually tweak this value if your scene requires a lower bias and it relied on the previous default value.

Make DirectionalLight Cascades computation generic over CameraProjection #
Rendering
If you have a component MyCustomProjection that implements CameraProjection:

You need to implement a new required associated method, get_frustum_corners, returning an array of the corners of a subset of the frustum with given z_near and z_far, in local camera space.
You can now add the build_directional_light_cascades::<MyCustomProjection> system in SimulationLightSystems::UpdateDirectionalLightCascades after clear_directional_light_cascades for your projection to work with directional lights.
Move skin code to a separate module #
Rendering
Animation
Renamed skinning systems, resources and components:

extract_skinned_meshes -> extract_skins
prepare_skinned_meshes -> prepare_skins
SkinnedMeshUniform -> SkinUniform
SkinnedMeshJoints -> SkinIndex
Move scene spawner systems to SpawnScene schedule #
Scenes
scene_spawner_system was moved to a new SpawnScene schedule which is run between Update and PostUpdate.

If you were ordering your own systems to run before scene_spawner_system in Update, that might no longer be necessary. If your system needs to run after scene_spawner_system, it should be moved to the SpawnScene or PostUpdate schedule.

Remove Resource and add Debug to TaskPoolOptions #
Tasks
If for some reason anyone is still using TaskPoolOptions as a Resource, they would now have to use a wrapper type:

#[derive(Resource)]
pub struct MyTaskPoolOptions(pub TaskPoolOptions);
Global TaskPool API improvements #
Tasks
Uses of ComputeTaskPool::init, AsyncComputeTaskPool::init and IoTaskPool::init should be changed to ::get_or_init.

Unify FixedTime and Time while fixing several problems #
Time
Change all Res<Time> instances that access raw_delta(), raw_elapsed() and related methods to Res<Time<Real>> and delta(), elapsed(), etc.
Change access to period from Res<FixedTime> to Res<Time<Fixed>> and use delta().
The default timestep has been changed from 60 Hz to 64 Hz. If you wish to restore the old behaviour, use app.insert_resource(Time::<Fixed>::from_hz(60.0)).
Change app.insert_resource(FixedTime::new(duration)) to app.insert_resource(Time::<Fixed>::from_duration(duration))
Change app.insert_resource(FixedTime::new_from_secs(secs)) to app.insert_resource(Time::<Fixed>::from_seconds(secs))
Change system.on_fixed_timer(duration) to system.on_timer(duration). Timers in systems placed in FixedUpdate schedule automatically use the fixed time clock.
Change ResMut<Time> calls to pause(), is_paused(), set_relative_speed() and related methods to ResMut<Time<Virtual>> calls. The API is the same, with the exception that relative_speed() will return the actual last ste relative speed, while effective_relative_speed() returns 0.0 if the time is paused and corresponds to the speed that was set when the update for the current frame started.
Change the default for the measure_func field of ContentSize to None. #
UI
The default for ContentSize now sets its measure_func to None, instead of a fixed size measure that returns Vec2::ZERO. The helper function fixed_size can be called with ContentSize::fixed_size(Vec2::ZERO) to get the previous behaviour.

Change UiScale to a tuple struct #
UI
Replace initialization of UiScale like UiScale { scale: 1.0 } with UiScale(1.0)

Cleanup some bevy_text pipeline.rs #
UI
The ResMut<TextPipeline> argument to measure_text_system doesn’t exist anymore. If you were calling this system manually, you should remove the argument.
The {min,max}_width_content_size fields of TextMeasureInfo are renamed to min and max respectively
Other changes to TextMeasureInfo may also break your code if you were manually building it. Please consider using the new TextMeasureInfo::from_text to build one instead.
TextPipeline::create_text_measure has been removed in favor of TextMeasureInfo::from_text
Make GridPlacement's fields non-zero and add accessor functions. #
UI
GridPlacement’s constructor functions no longer accept values of 0. Given any argument of 0 they will panic with a GridPlacementError.

Remove Val's try_* arithmetic methods #
UI
Val’s try_* arithmetic methods have been removed. To perform arithmetic on Vals deconstruct them using pattern matching.

Rename Val evaluate to resolve and implement viewport variant support #
UI
Renamed the following Val methods and added a viewport_size parameter:
evaluate to resolve
try_add_with_size to try_add_with_context
try_add_assign_with_size to try_add_assign_with_context
try_sub_with_size to try_sub_with_context
try_sub_assign_with_size to try_sub_assign_with_context
TextLayoutInfo::size should hold the drawn size of the text, and not a scaled value. #
UI
The size value of TextLayoutInfo is stored in logical pixels and has been renamed to logical_size. There is no longer any need to divide by the window’s scale factor to get the logical size.

Have a separate implicit viewport node per root node + make viewport node Display::Grid #
UI
Bevy UI now lays out root nodes independently of each other in separate layout contexts. If you were relying on your root nodes being able to affect each other’s layouts, then you may need to wrap them in a single root node.
The implicit viewport node (which contains each user-specified root node) is now Display::Grid with align_items and justify_items both set to Start. You may need to add height: Val::Percent(100.) to your root nodes if you were previously relying on being implicitly set.
Rename num_font_atlases to len. #
UI
The num_font_atlases method of FontAtlasSet has been renamed to len.

Various accessibility API updates. #
UI
Change direct accesses of AccessibilityRequested to use AccessibilityRequested.::get()/AccessibilityRequested::set()

// 0.11
use std::sync::atomic::Ordering;

// To access
accessibility_requested.load(Ordering::SeqCst)
// To update
accessibility_requested.store(true, Ordering::SeqCst);

// 0.12
// To access
accessibility_requested.get()
// To update
accessibility_requested.set(true);
Add some more docs for bevy_text. #
UI
Usages of TextSettings.max_font_atlases from bevy_text must be changed to TextSettings.soft_max_font_atlases.

Update UI alignment docs #
UI
The JustifyContents enum has been expanded to include JustifyContents::Stretch.

Add option to toggle window control buttons #
Windowing
Added an enabled_buttons member to the Window struct through which users can enable or disable specific window control buttons.

Improve bevy_winit documentation #
Windowing
UpdateMode::Reactive { max_wait: .. } -> UpdateMode::Reactive { wait: .. }
UpdateMode::ReactiveLowPower { max_wait: .. } -> UpdateMode::ReactiveLowPower { wait: .. }
Work around naga/wgpu WGSL instance_index -> GLSL gl_InstanceID bug on WebGL2 #
Rendering
Shader code before:

struct Vertex {
    @builtin(instance_index) instance_index: u32,
...
}

@vertex
fn vertex(vertex_no_morph: Vertex) -> VertexOutput {
    // ...
    var model = mesh[vertex_no_morph.instance_index].model;
}
After:

#import bevy_render::instance_index

struct Vertex {
    @builtin(instance_index) instance_index: u32,
    // ...
}

@vertex
fn vertex(vertex_no_morph: Vertex) -> VertexOutput {
    // ...
    let instance_index = bevy_render::instance_index::get_instance_index(vertex_no_morph.instance_index);
    var model = mesh[instance_index].model;
}
Remove IntoIterator impl for &mut EventReader #
No area label
&mut EventReader does not implement IntoIterator anymore. replace for foo in &mut events by for foo in events.iter()

Update default `ClearColor`` to better match Bevy's branding #
Rendering
The default app background color has changed. To use the old default, add a ClearColor resource.

App::new()
    .insert_resource(ClearColor(Color::rgb(0.4, 0.4, 0.4)))
    .add_plugins(DefaultPlugins)
View Transformations #

mesh_functions::mesh_position_world_to_clip was moved and renamed to view_transformations::position_world_to_clip. It now also takes a vec3 instead of a vec4 so you will need to use vec4.xyz to get a vec3.

// 0.11
#import bevy_pbr::mesh_functions::mesh_position_world_to_clip
fn mesh_position_local_to_clip(model: mat4x4<f32>, vertex_position: vec4<f32>) -> vec4<f32> {
    let world_position = mesh_position_local_to_world(model, vertex_position);
    return mesh_position_world_to_clip(world_position);
}

// 0.12
#import bevy_pbr::view_transformations::position_world_to_clip;
fn mesh_position_local_to_clip(model: mat4x4<f32>, vertex_position: vec4<f32>) -> vec4<f32> {
    let world_position = mesh_position_local_to_world(model, vertex_position);
    return position_world_to_clip(world_position.xyz);
}
NEXT
0.10 to 0.11
PREVIOUS
0.12 to 0.13
Improve this page
Bevy engine's GitHub repo
Bevy Discord server
Bevy Mastodon account
Bevy Twitter account
Bevy subreddit
Bevy news feed

Three horizontal lines stacked on top of eachother
Bevy Engine
Migration Guides
Bevy Engine
A saltire or x-cross
Main Menu
Migration Guides
Introduction
0.14 to 0.15
0.13 to 0.14
0.12 to 0.13
Support all types of animation interpolation from gltf
ReadAssetBytesError::Io exposes failing path
Ensure consistency between Un/Typed AssetId and Handle
Use impl Into<A> for Assets::add
GLTF extension support
Allow TextureAtlasBuilder in AssetLoader
Remove the ability to ignore global volume
Optional override for global spatial scale
Add support for updating the tracing subscriber in LogPlugin
Replace DiagnosticId by DiagnosticPath
Use EntityHashMap for EntityMapper
Update Event send methods to return EventId
Optimise Entity with repr align & manual PartialOrd/Ord
Split WorldQuery into QueryData and QueryFilter
Reduced TableRow as Casting
Allow the editing of startup schedules
Auto insert sync points
Add insert_state to App.
Rename ArchetypeEntity::entity into ArchetypeEntity::id
Restore support for running fn EntityCommands on entities that might be despawned
Simplify conditions
refactor: Simplify lifetimes for Commands and related types
Deprecated Various Component Methods from Query and QueryState
System::type_id Consistency
System Stepping implemented as Resource
Make the MapEntities trait generic over Mappers, and add a simpler EntityMapper
Async channel v2
Add First/Pre/Post/Last schedules to the Fixed timestep
Move EntityHash related types into bevy_ecs
Move Circle Gizmos to Their Own File
move gizmo arcs to their own file
Multiple Configurations for Gizmos
Use Direction3d for gizmos.circle normal
Rename "AddChild" to "PushChild"
Rename Input to ButtonInput
Add window entity to TouchInput events
Add delta to CursorMoved event
Remove Default impl for CubicCurve
Direction: Rename from_normalized to new_unchecked
Add Capsule2d primitive
Rename RayTest to RayCast
Use IntersectsVolume for breakout example collisions
Add ReflectFromWorld and replace the FromWorld requirement on ReflectComponent and ReflectBundle with FromReflect
Remove TypeUuid
Explicit color conversion methods
Add a depth_bias to Material2d
Bind group layout entries
Swap material and mesh bind groups
light renderlayers
Update to wgpu 0.18
Keep track of when a texture is first cleared
Approximate indirect specular occlusion
Texture Atlas rework
Exposure settings (adopted)
Make DynamicUniformBuffer::push accept an &T instead of T
Customizable camera main texture usage
optimize batch_and_prepare_render_phase
Update to wgpu 0.19 and raw-window-handle 0.6
RenderGraph Labelization
SubGraphs
Nodes
Gate diffuse and specular transmission behind shader defs
Async pipeline compilation
Mesh insert indices
wait for render app when main world is dropped
Deprecate shapes in bevy_render::mesh::shape
Multithreaded render command encoding
Stop extracting mesh entities to the render world.
New Exposure and Lighting Defaults (and calibrate examples)
Unload render assets from RAM
Split Ray into Ray2d and Ray3d and simplify plane construction
Ray creation
Plane intersections
Introduce AspectRatio struct
Include UI node size in the vertex inputs for UiMaterial.
Optional ImageScaleMode
Re-export futures_lite in bevy_tasks
Rename TextAlignment to JustifyText.
Rename Time::<Fixed>::overstep_percentage() and Time::<Fixed>::overstep_percentage_f64()
Rename Timer::{percent,percent_left} to Timer::{fraction,fraction_remaining}
return Direction3d from Transform::up and friends
Make clipped areas of UI nodes non-interactive
Create serialize feature for bevy_ui
Camera-driven UI
Change Window scale factor to f32 (adopted)
Update winit dependency to 0.29
KeyCode changes
ReceivedCharacter changes
Remove CanvasParentResizePlugin
Cleanup bevy winit
Add name to bevy::window::Window
delete methods deprecated in 0.12
Renamed Accessibility plugin to AccessKitPlugin in bevy_winit
Use TypeIdMap whenever possible
bevy_render: use the non-send marker from bevy_core
0.11 to 0.12
0.10 to 0.11
0.9 to 0.10
0.8 to 0.9
0.7 to 0.8
0.6 to 0.7
0.5 to 0.6
0.4 to 0.5
Getting Started
Learn
News
Community
Foundation
Assets
Examples
Donate heart icon
GitHub repo
Migration Guide: 0.12 to 0.13
Bevy relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is "the latest stable release" of Rust.

Support all types of animation interpolation from gltf #
Animation
When manually specifying an animation VariableCurve, the interpolation type must be specified:

// 0.12
VariableCurve {
    keyframe_timestamps: vec![0.0, 1.0, 2.0, 3.0, 4.0],
    keyframes: Keyframes::Rotation(vec![
        Quat::IDENTITY,
        Quat::from_axis_angle(Vec3::Y, PI / 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 3.),
        Quat::IDENTITY,
    ]),
},

// 0.13
VariableCurve {
    keyframe_timestamps: vec![0.0, 1.0, 2.0, 3.0, 4.0],
    keyframes: Keyframes::Rotation(vec![
        Quat::IDENTITY,
        Quat::from_axis_angle(Vec3::Y, PI / 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 3.),
        Quat::IDENTITY,
    ]),
    interpolation: Interpolation::Linear,
},
ReadAssetBytesError::Io exposes failing path #
Assets
The ReadAssetBytesError::Io variant now contains two named fields instead of converting from std::io::Error.

path: The requested (failing) path (PathBuf)
source: The source std::io::Error
Ensure consistency between Un/Typed AssetId and Handle #
Assets
If you relied on any of the panicking From<Untyped...> implementations, simply call the existing typed methods instead. Alternatively, use the new TryFrom implementation instead to directly expose possible mistakes.

Use impl Into<A> for Assets::add #
Assets
Some into calls that worked previously might now be broken because of the new trait bounds. You need to either remove into or perform the conversion explicitly with from:

// 0.12
let mesh_handle = meshes.add(shape::Cube { size: 1.0 }.into()),

// 0.13
let mesh_handle = meshes.add(shape::Cube { size: 1.0 }),
let mesh_handle = meshes.add(Mesh::from(shape::Cube { size: 1.0 })),
GLTF extension support #
Assets
This will have issues with “asset migrations”, as there is currently no way for .meta files to be migrated. Attempting to migrate .meta files without the new flag will yield the following error:

bevy_asset::server: Failed to deserialize meta for asset test_platform.gltf: Failed to deserialize asset meta: SpannedError { code: MissingStructField { field: "include_source", outer: Some("GltfLoaderSettings") }, position: Position { line: 9, col: 9 } }
This means users who want to migrate their .meta files will have to add the include_source: true, setting to their meta files by hand.

Allow TextureAtlasBuilder in AssetLoader #
Assets
For add_texture you need to wrap your AssetId in Some
finish now returns the atlas texture image directly instead of a handle. Provide the atlas texture to add on Assets to get a Handle
Remove the ability to ignore global volume #
Audio
The option to ignore the global volume using Volume::Absolute has been removed and Volume now stores the volume level directly, removing the need for the VolumeLevel struct.

Volume::new_absolute and Volume::new_relative were removed. Use Volume::new(0.5).

Optional override for global spatial scale #
Audio
AudioPlugin::spatial_scale has been renamed to default_spatial_scale and the default spatial scale can now be overridden on individual audio sources with PlaybackSettings::spatial_scale.

If you were modifying or reading SpatialScale at run time, use DefaultSpatialScale instead.

// 0.12
app.add_plugins(DefaultPlugins.set(AudioPlugin {
    spatial_scale: SpatialScale::new(AUDIO_SCALE),
    ..default()
}));

// 0.13
app.add_plugins(DefaultPlugins.set(AudioPlugin {
    default_spatial_scale: SpatialScale::new(AUDIO_SCALE),
    ..default()
}));
Add support for updating the tracing subscriber in LogPlugin #
Diagnostics
LogPlugin has a new optional update_subscriber field. Use None or ..default() to match previous behavior.

Replace DiagnosticId by DiagnosticPath #
Diagnostics
- const UNIQUE_DIAG_ID: DiagnosticId = DiagnosticId::from_u128(42);
+ const UNIQUE_DIAG_PATH: DiagnosticPath = DiagnosticPath::const_new("foo/bar");

- Diagnostic::new(UNIQUE_DIAG_ID, "example", 10)
+ Diagnostic::new(UNIQUE_DIAG_PATH).with_max_history_length(10)

- diagnostics.add_measurement(UNIQUE_DIAG_ID, || 42);
+ diagnostics.add_measurement(&UNIQUE_DIAG_ID, || 42);
Use EntityHashMap for EntityMapper #
ECS
If you are using the following types, update their listed methods to use the new EntityHashMap. EntityHashMap has the same methods as the normal HashMap, so you just need to replace the name.

EntityMapper

get_map
get_mut_map
new
world_scope
ReflectMapEntities

map_all_entities
map_entities
write_to_world
InstanceInfo

entity_map
This is a property, not a method.
Update Event send methods to return EventId #
ECS
send / send_default / send_batch

For the following methods:

Events::send
Events::send_default
Events::send_batch
EventWriter::send
EventWriter::send_default
EventWriter::send_batch
World::send_event
World::send_event_default
World::send_event_batch
Ensure calls to these methods either handle the returned value, or suppress the result with ;.

// 0.12
fn send_my_event(mut events: EventWriter<MyEvent>) {
    events.send_default()
}

// 0.13
fn send_my_event(mut events: EventWriter<MyEvent>) {
    events.send_default();
}
This will most likely be noticed within match statements:

// 0.12
match is_pressed {
    true => events.send(PlayerAction::Fire),
//                 ^--^ No longer returns ()
    false => {}
}

// 0.13
match is_pressed {
    true => {
        events.send(PlayerAction::Fire);
    },
    false => {}
}
Optimise Entity with repr align & manual PartialOrd/Ord #
ECS
Any unsafe code relying on field ordering of Entity or sufficiently cursed shenanigans should change to reflect the different internal representation and alignment requirements of Entity.

Split WorldQuery into QueryData and QueryFilter #
ECS
Check #9918 and #10799 for more information.

Rename the following trait type usages:
Trait’s ExtractComponent type Query to Data.
Trait’s GetBatchData type Query to Data.
Trait’s ExtractInstance type Query to Data.
Rename ReadOnlyWorldQuery to QueryFilter and WorldQuery to QueryData
You'll need to update your related derives
// 0.12
#[derive(WorldQuery)]
#[world_query(mutable, derive(Debug))]
struct CustomQuery {
    entity: Entity,
    a: &'static mut ComponentA
}

#[derive(WorldQuery)]
struct QueryFilter {
    _c: With<ComponentC>
}

// 0.13
#[derive(QueryData)]
#[query_data(mutable, derive(Debug))]
struct CustomQuery {
    entity: Entity,
    a: &'static mut ComponentA,
}

#[derive(QueryFilter)]
struct QueryFilter {
    _c: With<ComponentC>
}
Replace Option<With<T>> with Has<T>
// 0.12
fn my_system(query: Query<(Entity, Option<With<ComponentA>>)>) {
  for (entity, has_a_option) in query.iter(){
    let has_a:bool = has_a_option.is_some();
    //todo!()
  }
}

// 0.13
fn my_system(query: Query<(Entity, Has<ComponentA>)>) {
  for (entity, has_a) in query.iter(){
    //todo!()
  }
}
Fix queries which had filters in the data position or vice versa.
// 0.12
fn my_system(query: Query<(Entity, With<ComponentA>)>) {
  for (entity, _) in query.iter(){
  //todo!()
  }
}

// 0.13
fn my_system(query: Query<Entity, With<ComponentA>>) {
  for entity in query.iter(){
  //todo!()
  }
}

// 0.12
fn my_system(query: Query<AnyOf<(&ComponentA, With<ComponentB>)>>) {
  for (entity, _) in query.iter(){
  //todo!()
  }
}

// 0.13
fn my_system(query: Query<Option<&ComponentA>, Or<(With<ComponentA>, With<ComponentB>)>>) {
  for entity in query.iter(){
  //todo!()
  }
}

Reduced TableRow as Casting #
ECS
TableRow::new -> TableRow::from_usize
TableRow::index -> TableRow::as_usize
TableId::new -> TableId::from_usize
TableId::index -> TableId::as_usize
Allow the editing of startup schedules #
ECS
Added a new field to MainScheduleOrder, startup_labels, for editing the startup schedule order.
Auto insert sync points #
ECS
apply_deferred points are added automatically when there is ordering relationship with a system that has deferred parameters like Commands. If you want to opt out of this you can switch from after, before, and chain to the corresponding ignore_deferred API, after_ignore_deferred, before_ignore_deferred or chain_ignore_deferred for your system/set ordering.
You can also set ScheduleBuildSettings::auto_insert_sync_points to false if you want to do it for the whole schedule. Note that in this mode you can still add apply_deferred points manually.
For most manual insertions of apply_deferred you should remove them as they cannot be merged with the automatically inserted points and might reduce parallelizability of the system graph.
If you were manually deriving SystemParam, you will need to add system_meta.set_has_deferred if you use SystemParam::apply and want sync points auto inserted after use of your SystemParam.
Add insert_state to App. #
ECS
Renamed App::add_state to init_state.

Rename ArchetypeEntity::entity into ArchetypeEntity::id #
ECS
The method ArchetypeEntity::entity has been renamed to ArchetypeEntity::id

Restore support for running fn EntityCommands on entities that might be despawned #
ECS
All Command types in bevy_ecs, such as Spawn, SpawnBatch, Insert, etc., have been made private. Use the equivalent methods on Commands or EntityCommands instead.

If you were working with ChildBuilder, recreate these commands using a closure. For example, you might migrate a Command to insert components like:

// 0.12
parent.add_command(Insert {
    entity: ent_text,
    bundle: Capitalizable,
});

// 0.13
parent.add_command(move |world: &mut World| {
    world.entity_mut(ent_text).insert(Capitalizable);
});
Simplify conditions #
ECS
Some common run conditions that were previously closures and needed to be called are now just systems. Remove the parentheses.

resource_exists<T>() -> resource_exists<T>
resource_added<T>() -> resource_added<T>
resource_changed<T>() -> resource_changed<T>
resource_exists_and_changed<T>() -> resource_exists_and_changed<T>
state_exists<S: States>() -> state_exists<S: States>
state_changed<S: States>() -> state_changed<S: States>
any_with_component<T: Component>() -> any_with_component<T: Component>
refactor: Simplify lifetimes for Commands and related types #
ECS
The lifetimes for EntityCommands have been simplified.

// 0.12 (Bevy 0.12)
struct MyStruct<'w, 's, 'a> {
     commands: EntityCommands<'w, 's, 'a>,
}

// 0.13 (Bevy 0.13)
struct MyStruct<'a> {
    commands: EntityCommands<'a>,
}
The method EntityCommands::commands now returns Commands rather than &mut Commands.

// 0.12 (Bevy 0.12)
let commands = entity_commands.commands();
commands.spawn(...);

// 0.13 (Bevy 0.13)
let mut commands = entity_commands.commands();
commands.spawn(...);
Deprecated Various Component Methods from Query and QueryState #
ECS
QueryState::get_component_unchecked_mut

Use QueryState::get_unchecked_manual and select for the exact component based on the structure of the exact query as required.

Query::(get_)component(_unchecked)(_mut)

Use Query::get and select for the exact component based on the structure of the exact query as required.

For mutable access (_mut), use Query::get_mut
For unchecked access (_unchecked), use Query::get_unchecked
For panic variants (non-get_), add .unwrap()
For example:

fn system(query: Query<(&A, &B, &C)>) {
    // 0.12
    let b = query.get_component::<B>(entity).unwrap();

    // Alternative 1 (using tuple destructuring)
    let (_, b, _) = query.get(entity).unwrap();

    // Alternative 2 (using tuple item indexing)
    let b = query.get(entity).unwrap().1;
}
System::type_id Consistency #
ECS
If you use System::type_id() on function systems (exclusive or not), ensure you are comparing its value to other System::type_id() calls, or IntoSystem::system_type_id().

This code wont require any changes, because IntoSystem’s are directly compared to each other.

fn test_system() {}

let type_id = test_system.type_id();

// ...

// No change required
assert_eq!(test_system.type_id(), type_id);
Likewise, this code wont, because System’s are directly compared.

fn test_system() {}

let type_id = IntoSystem::into_system(test_system).type_id();

// ...

// No change required
assert_eq!(IntoSystem::into_system(test_system).type_id(), type_id);
The below does require a change, since you’re comparing a System type to a IntoSystem type.

fn test_system() {}

// 0.12
assert_eq!(test_system.type_id(), IntoSystem::into_system(test_system).type_id());

// 0.13
assert_eq!(test_system.system_type_id(), IntoSystem::into_system(test_system).type_id());
System Stepping implemented as Resource #
ECS
Editor
App
Diagnostics
Add a call to Schedule::set_label() for any custom Schedule. This is only required if the Schedule will be stepped

Make the MapEntities trait generic over Mappers, and add a simpler EntityMapper #
ECS
Scenes
The existing EntityMapper (notably used to replicate Scenes across different Worlds) has been renamed to SceneEntityMapper
The MapEntities trait now works with a generic EntityMapper instead of the specific struct EntityMapper. Calls to fn map_entities(&mut self, entity_mapper: &mut EntityMapper) need to be updated to fn map_entities<M: EntityMapper>(&mut self, entity_mapper: &mut M)
The new trait EntityMapper has been added to the prelude
Async channel v2 #
ECS
Tasks
The PipelinedRendering plugin is no longer exported on wasm. If you are including it in your wasm builds you should remove it.

#[cfg(not(target_arch = "wasm32"))]
app.add_plugins(bevy_render::pipelined_rendering::PipelinedRenderingPlugin);
Add First/Pre/Post/Last schedules to the Fixed timestep #
ECS
Time
Usage of RunFixedUpdateLoop should be renamed to RunFixedMainLoop.

Move EntityHash related types into bevy_ecs #
ECS
Utils
Uses of bevy::utils::{EntityHash, EntityHasher, EntityHashMap, EntityHashSet} now have to be imported from bevy::ecs::entity::hash.
Uses of EntityHashMap no longer have to specify the first generic parameter. It is now hardcoded to always be Entity.
Move Circle Gizmos to Their Own File #
Gizmos
Change gizmos::CircleBuilder to gizmos::circles::Circle2dBuilder
Change gizmos::Circle2dBuilder to gizmos::circles::Circle2dBuilder
move gizmo arcs to their own file #
Gizmos
gizmos::Arc2dBuilder -> gizmos::arcs::Arc2dBuilder

Multiple Configurations for Gizmos #
Gizmos
GizmoConfig is no longer a resource and has to be accessed through GizmoConfigStore resource. The default config group is DefaultGizmoConfigGroup, but consider using your own custom config group if applicable.

Use Direction3d for gizmos.circle normal #
Gizmos
Pass a Direction3d for gizmos.circle normal, eg. Direction3d::new(vec).unwrap_or(default) or potentially Direction3d::new_unchecked(vec) if you know your vec is definitely normalized.

Rename "AddChild" to "PushChild" #
Hierarchy
The struct AddChild has been renamed to PushChild, and the struct AddChildInPlace has been renamed to PushChildInPlace.

Rename Input to ButtonInput #
Input
Users need to rename Input to ButtonInput in their projects.

Add window entity to TouchInput events #
Input
Add a window field when constructing or destructuring a TouchInput struct.

Add delta to CursorMoved event #
Input
You need to add delta to any manually created CursorMoved struct.

Remove Default impl for CubicCurve #
Math
Remove CubicCurve from any structs that implement Default.
Wrap CubicCurve in a new type and provide your own default.
#[derive(Deref)]
struct MyCubicCurve<P: Point>(pub CubicCurve<P>);

impl Default for MyCubicCurve<Vec2> {
    fn default() -> Self {
        let points = [[
            vec2(-1.0, -20.0),
            vec2(3.0, 2.0),
            vec2(5.0, 3.0),
            vec2(9.0, 8.0),
        ]];

        Self(CubicBezier::new(points).to_curve())
    }
}
Direction: Rename from_normalized to new_unchecked #
Math
Renamed Direction2d::from_normalized and Direction3d::from_normalized to new_unchecked.

Add Capsule2d primitive #
Math
Capsule is now Capsule3d. If you were using it for 2d you need to use Capsule2d

Rename RayTest to RayCast #
Math
RayTest2d and RayTest3d have been renamed to RayCast2d and RayCast3d

Use IntersectsVolume for breakout example collisions #
Physics
sprite::collide_aabb::collide and sprite::collide_aabb::Collision were removed.

// 0.12
let collision = bevy::sprite::collide_aabb::collide(a_pos, a_size, b_pos, b_size);
if collision.is_some() {
    // ...
}

// 0.13
let collision = Aabb2d::new(a_pos.truncate(), a_size / 2.)
    .intersects(&Aabb2d::new(b_pos.truncate(), b_size / 2.));
if collision {
    // ...
}
If you were making use collide_aabb::Collision, see the new collide_with_side function in the breakout example.

Add ReflectFromWorld and replace the FromWorld requirement on ReflectComponent and ReflectBundle with FromReflect #
Reflection
Existing uses of ReflectComponent::from_world and ReflectBundle::from_world will have to be changed to ReflectFromWorld::from_world.
Users of #[reflect(Component)] and #[reflect(Bundle)] will need to also implement/derive FromReflect.
Users of #[reflect(Component)] and #[reflect(Bundle)] may now want to also add FromWorld to the list of reflected traits in case their FromReflect implementation may fail.
Users of ReflectComponent will now need to pass a &TypeRegistry to its insert, apply_or_insert and copy methods.
Remove TypeUuid #
Reflection
Convert any uses of #[derive(TypeUuid)] with #[derive(TypePath] for more complex uses see the relevant documentation for more information.

Explicit color conversion methods #
Rendering
Color::from(Vec4) is now Color::rgba_from_array(impl Into<[f32; 4]>) Vec4::from(Color) is now Color::rgba_to_vec4(&self)

// 0.12
let color_vec4 = Vec4::new(0.5, 0.5, 0.5);
let color_from_vec4 = Color::from(color_vec4);

let color_array = [0.5, 0.5, 0.5];
let color_from_array = Color::from(color_array);

// 0.13
let color_vec4 = Vec4::new(0.5, 0.5, 0.5);
let color_from_vec4 = Color::rgba_from_array(color_vec4);

let color_array = [0.5, 0.5, 0.5];
let color_from_array = Color::rgba_from_array(color_array);
Add a depth_bias to Material2d #
Rendering
PreparedMaterial2d has a new depth_bias field. A value of 0.0 can be used to get the previous behavior.

Bind group layout entries #
Rendering
RenderDevice::create_bind_group_layout() doesn’t take a BindGroupLayoutDescriptor anymore. You need to provide the parameters separately

// 0.12
let layout = render_device.create_bind_group_layout(&BindGroupLayoutDescriptor {
    label: Some("post_process_bind_group_layout"),
    entries: &[
        BindGroupLayoutEntry {
            // ...
        },
    ],
});

// 0.13
let layout = render_device.create_bind_group_layout(
 "post_process_bind_group_layout",
    &[
        BindGroupLayoutEntry {
            // ...
        },
    ],
);
Swap material and mesh bind groups #
Rendering
Custom 2d and 3d mesh/material shaders should now use bind group 2 @group(2) @binding(x) for their bound resources, instead of bind group 1.
Many internal pieces of rendering code have changed so that mesh data is now in bind group 1, and material data is now in bind group 2. Semi-custom rendering setups (that don’t use the Material or Material2d APIs) should adapt to these changes.
light renderlayers #
Rendering
Lights no longer affect all RenderLayers by default, now like cameras and meshes they default to RenderLayers::layer(0). To recover the previous behaviour and have all lights affect all views, add a RenderLayers::all() component to the light entity.

Update to wgpu 0.18 #
Rendering
RenderPassDescriptor color_attachments (as well as RenderPassColorAttachment, and RenderPassDepthStencilAttachment) now use StoreOp::Store or StoreOp::Discard instead of a boolean to declare whether or not they should be stored.
RenderPassDescriptor now have timestamp_writes and occlusion_query_set fields. These can safely be set to None.
ComputePassDescriptor now have a timestamp_writes field. This can be set to None for now.
See the wgpu changelog for additional details
Keep track of when a texture is first cleared #
Rendering
Remove arguments to ViewTarget::get_color_attachment() and ViewTarget::get_unsampled_color_attachment().
Configure clear color on Camera instead of on Camera3d and Camera2d.
Moved ClearColor and ClearColorConfig from bevy::core_pipeline::clear_color to bevy::render::camera.
ViewDepthTexture must now be created via the new() method
Approximate indirect specular occlusion #
Rendering
Renamed PbrInput::occlusion to diffuse_occlusion, and added specular_occlusion.

Texture Atlas rework #
Rendering
The TextureAtlas asset that previously contained both the atlas layout and image handle was renamed to TextureAtlasLayout with the image handle portion moved to a separate Handle<Image> available from SpriteSheetBundle::texture or AtlasImageBundle::image.

TextureAtlasSprite was removed and replaced by a new component, TextureAtlas, which now holds the atlas index. The Sprite component can be used for flip_x, flip_y, custom_size, anchor, and color.

SpriteSheetBundle now uses a Sprite instead of a TextureAtlasSprite component and a TextureAtlas component instead of a Handle<TextureAtlaslayout>.

DynamicTextureAtlasBuilder::add_texture takes an additional &Handle<Image> parameter.

TextureAtlasLayout::from_grid no longer takes a Handle<Image> parameter.

TextureAtlasBuilder::finish now returns a Result<(TextureAtlasLayout, Image), TextureAtlasBuilderError>.

UiTextureAtlasImage was removed. The AtlasImageBundle is now identical to ImageBundle with an additional TextureAtlas.

Sprites
fn my_system(
  mut commands: Commands,
-  mut atlases: ResMut<Assets<TextureAtlas>>,
+  mut atlases: ResMut<Assets<TextureAtlasLayout>>,
  asset_server: Res<AssetServer>
) {
    let texture_handle = asset_server.load("my_texture.png");
-   let layout = TextureAtlas::from_grid(texture_handle, Vec2::new(25.0, 25.0), 5, 5, None, None);
+   let layout = TextureAtlasLayout::from_grid(Vec2::new(25.0, 25.0), 5, 5, None, None);
    let layout_handle = atlases.add(layout);
    commands.spawn(SpriteSheetBundle {
-      sprite: TextureAtlasSprite::new(0),
-      texture_atlas: atlas_handle,
       // the new sprite initialization is covered by the `..default()` expression; however, it is added to showcase migration
+      sprite: Sprite::default(),
+      atlas: TextureAtlas {
+         layout: layout_handle,
+         index: 0
+      },
+      texture: texture_handle,
       ..default()
     });
}
UI
fn my_system(
  mut images: ResMut<Assets<Image>>,
-  mut atlases: ResMut<Assets<TextureAtlas>>,
+  mut atlases: ResMut<Assets<TextureAtlasLayout>>,
  asset_server: Res<AssetServer>
) {
    let texture_handle = asset_server.load("my_texture.png");
-   let layout = TextureAtlas::from_grid(texture_handle, Vec2::new(25.0, 25.0), 5, 5, None, None);
+   let layout = TextureAtlasLayout::from_grid(Vec2::new(25.0, 25.0), 5, 5, None, None);
    let layout_handle = atlases.add(layout);
    commands.spawn(AtlasImageBundle {
-      texture_atlas_image: UiTextureAtlasImage {
-           index: 0,
-           flip_x: false,
-           flip_y: false,
-       },
-      texture_atlas: atlas_handle,
+      texture_atlas: TextureAtlas {
+         layout: layout_handle,
+         index: 0
+      },
+      image: UiImage {
+           texture: texture_handle,
+           flip_x: false,
+           flip_y: false,
+       },
       ..default()
     });
}
Queries (taken from the sprite sheet example)
fn animate_sprite(
    time: Res<Time>,
    mut query: Query<(
        &AnimationIndices,
        &mut AnimationTimer,
-       &mut TextureAtlasSprite)>,
+       &mut TextureAtlas)>,
) {
-   for (indices, mut timer, mut sprite) in &mut query {
+   for (indices, mut timer, mut atlas) in &mut query {
        timer.tick(time.delta());
        if timer.just_finished() {
-           sprite.index = if sprite.index == indices.last {
+           atlas.index = if atlas.index == indices.last {
                indices.first
            } else {
-               sprite.index + 1
+               atlas.index + 1
            };
        }
    }
}
Exposure settings (adopted) #
Rendering
If using a Skybox or EnvironmentMapLight, use the new brightness and intensity controls to adjust their strength.
All 3D scenes will now have different apparent brightnesses due to Bevy implementing proper exposure controls. You will have to adjust the intensity of your lights and/or your camera exposure via the new Exposure component to compensate.
Make DynamicUniformBuffer::push accept an &T instead of T #
Rendering
Users of DynamicUniformBuffer::push now need to pass references to DynamicUniformBuffer::push (e.g. existing uniforms.push(value) will now become uniforms.push(&value))

Customizable camera main texture usage #
Rendering
Add main_texture_usages: Default::default() to your camera bundle.

optimize batch_and_prepare_render_phase #
Rendering
The trait GetBatchData no longer hold associated type Data and Filter get_batch_data query_item type from Self::Data to Entity and return Option<(Self::BufferData, Option<Self::CompareData>)> batch_and_prepare_render_phase should not have a query

Update to wgpu 0.19 and raw-window-handle 0.6 #
Rendering
bevy_render::instance_index::get_instance_index() has been removed as the webgl2 workaround is no longer required as it was fixed upstream in wgpu. The BASE_INSTANCE_WORKAROUND shaderdef has also been removed.

WebGPU now requires the new webgpu feature to be enabled. The webgpu feature currently overrides the webgl2 feature so you no longer need to disable all default features and re-add them all when targeting webgpu, but binaries built with both the webgpu and webgl2 features will only target the webgpu backend, and will only work on browsers that support WebGPU.

Places where you conditionally compiled things for webgl2 need to be updated because of this change, eg:
#[cfg(any(not(feature = "webgl"), not(target_arch = "wasm32")))] becomes #[cfg(any(not(feature = "webgl") ,not(target_arch = "wasm32"), feature = "webgpu"))]
#[cfg(all(feature = "webgl", target_arch = "wasm32"))] becomes #[cfg(all(feature = "webgl", target_arch = "wasm32", not(feature = "webgpu")))]
if cfg!(all(feature = "webgl", target_arch = "wasm32")) becomes if cfg!(all(feature = "webgl", target_arch = "wasm32", not(feature = "webgpu")))
create_texture_with_data now also takes a TextureDataOrder. You can probably just set this to TextureDataOrder::default()

TextureFormat’s block_size has been renamed to block_copy_size

See the wgpu changelog for anything I might’ve missed: https://github.com/gfx-rs/wgpu/blob/trunk/CHANGELOG.md

wgpu now surfaces errors at instance creation time, which may have you run into this error (we’ve also seen it with nsight instead of EOSOverlay):

2024-01-27T02:11:58.491767Z ERROR wgpu_hal::vulkan::instance: GENERAL [Loader Message (0x0)]
        loader_get_json: Failed to open JSON file C:\Program Files (x86)\Epic Games\Launcher\Portal\Extras\Overlay\EOSOverlayVkLayer-Win32.json
2024-01-27T02:11:58.492046Z ERROR wgpu_hal::vulkan::instance:   objects: (type: INSTANCE, hndl: 0x1fbe55dc070, name: ?)
2024-01-27T02:11:58.492282Z ERROR wgpu_hal::vulkan::instance: GENERAL [Loader Message (0x0)]
        loader_get_json: Failed to open JSON file C:\Program Files (x86)\Epic Games\Launcher\Portal\Extras\Overlay\EOSOverlayVkLayer-Win64.json
2024-01-27T02:11:58.492525Z ERROR wgpu_hal::vulkan::instance:   objects: (type: INSTANCE, hndl: 0x1fbe55dc070, name: ?)
It just means that the program didn’t properly cleanup their registry keys on an update/uninstall, and vulkan uses those keys to load validation layers. The fix is to backup your registry, then remove the offending keys in "Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Khronos\Vulkan\ImplicitLayers".

RenderGraph Labelization #
Rendering
For Nodes and SubGraphs, instead of using hardcoded strings, you now pass labels, which can be derived with structs and enums.

// 0.12
#[derive(Default)]
struct MyRenderNode;
impl MyRenderNode {
    pub const NAME: &'static str = "my_render_node"
}

render_app
    .add_render_graph_node::<ViewNodeRunner<MyRenderNode>>(
        core_3d::graph::NAME,
        MyRenderNode::NAME,
    )
    .add_render_graph_edges(
        core_3d::graph::NAME,
        &[
            core_3d::graph::node::TONEMAPPING,
            MyRenderNode::NAME,
            core_3d::graph::node::END_MAIN_PASS_POST_PROCESSING,
        ],
    );

// 0.13
use bevy::core_pipeline::core_3d::graph::{Node3d, Core3d};

#[derive(Debug, Hash, PartialEq, Eq, Clone, RenderLabel)]
pub struct MyRenderLabel;

#[derive(Default)]
struct MyRenderNode;

render_app
    .add_render_graph_node::<ViewNodeRunner<MyRenderNode>>(
        Core3d,
        MyRenderLabel,
    )
    .add_render_graph_edges(
        Core3d,
        (
            Node3d::Tonemapping,
            MyRenderLabel,
            Node3d::EndMainPassPostProcessing,
        ),
    );
If you still want to use dynamic labels, you can easily create those with tuple structs:

#[derive(Debug, Hash, PartialEq, Eq, Clone, RenderLabel)]
pub struct MyDynamicLabel(&'static str);
SubGraphs #

bevy_core_pipeline::core_2d::graph: NAME -> Core2d
bevy_core_pipeline::core_3d::graph:NAME -> Core3d
bevy_ui::render: draw_ui_graph::NAME -> graph::SubGraphUi
Nodes #

bevy_core_pipeline::core_2d::graph:
node::MSAA_WRITEBACK -> Node2d::MsaaWriteback node::MAIN_PASS ->Node2d::MainPass node::BLOOM -> Node2d::Bloom node::TONEMAPPING -> Node2d::Tonemapping node::FXAA -> Node2d::Fxaa node::UPSCALING -> Node2d::Upscaling node::CONTRAST_ADAPTIVE_SHARPENING -> Node2d::ContrastAdaptiveSharpening node::END_MAIN_PASS_POST_PROCESSING -> Node2d::EndMainPassPostProcessing
bevy_core_pipeline::core_3d::graph:
node::MSAA_WRITEBACK -> Node3d::MsaaWriteback node::PREPASS -> Node3d::Prepass node::DEFERRED_PREPASS -> Node3d::DeferredPrepass node::COPY_DEFERRED_LIGHTING_ID -> Node3d::CopyDeferredLightingId node::END_PREPASSES -> Node3d::EndPrepasses node::START_MAIN_PASS -> Node3d::StartMainPass node::MAIN_OPAQUE_PASS -> Node3d::MainOpaquePass node::MAIN_TRANSMISSIVE_PASS -> Node3d::MainTransmissivePass node::MAIN_TRANSPARENT_PASS -> Node3d::MainTransparentPass node::END_MAIN_PASS -> Node3d::EndMainPass node::BLOOM -> Node3d::Bloom node::TONEMAPPING -> Node3d::Tonemapping node::FXAA -> Node3d::Fxaa node::UPSCALING -> Node3d::Upscaling node::CONTRAST_ADAPTIVE_SHARPENING -> Node3d::ContrastAdaptiveSharpening node::END_MAIN_PASS_POST_PROCESSING -> Node3d::EndMainPassPostProcessing
bevy_core_pipeline: taa::draw_3d_graph::node::TAA -> Node3d::Taa
bevy_pbr: draw_3d_graph::node::SHADOW_PASS -> NodePbr::ShadowPass ssao::draw_3d_graph::node::SCREEN_SPACE_AMBIENT_OCCLUSION -> NodePbr::ScreenSpaceAmbientOcclusion deferred::DEFERRED_LIGHTING_PASS -> NodePbr::DeferredLightingPass
bevy_render: main_graph::node::CAMERA_DRIVER -> graph::CameraDriverLabel
bevy_ui::render: draw_ui_graph::node::UI_PASS -> graph::Nodeui::UiPass
Gate diffuse and specular transmission behind shader defs #
Rendering
If you were using #ifdef STANDARDMATERIAL_NORMAL_MAP on your shader code, make sure to update the name to STANDARD_MATERIAL_NORMAL_MAP; (with an underscore between STANDARD and MATERIAL)

Async pipeline compilation #
Rendering
Match on the new Creating variant for exhaustive matches of CachedPipelineState

Mesh insert indices #
Rendering
Use Mesh::insert_indices or Mesh::with_inserted_indices instead of Mesh::set_indices / Mesh::with_indices.
If you have passed None to Mesh::set_indices or Mesh::with_indices you should use Mesh::remove_indices or Mesh::with_removed_indices instead.
wait for render app when main world is dropped #
Rendering
If you were using the pipelined rendering channels, MainToRenderAppSender and RenderToMainAppReceiver, they have been combined into the single resource RenderAppChannels.

Deprecate shapes in bevy_render::mesh::shape #
Rendering
Bevy has previously used rendering-specific types like UVSphere and Quad for primitive mesh shapes. These have now been deprecated to use the geometric primitives newly introduced in version 0.13.

bevy_render::mesh::Capsule is deprecated use bevy_math::primitives::dim3::Capsule3d instead;
bevy_render::mesh::Cylinder is deprecated use bevy_math::primitives::dim3::Cylinder instead;
bevy_render::mesh::Icosphere is deprecated use bevy_math::primitives::dim3::Sphere instead;
bevy_render::mesh::Cube is deprecated use bevy_math::primitives::dim3::Cuboid instead;
bevy_render::mesh::Box is deprecated use bevy_math::primitives::dim3::Cuboid instead;
bevy_render::mesh::Quad is deprecated use bevy_math::primitives::dim2::Rectangle instead;
bevy_render::mesh::Plane is deprecated use bevy_math::primitives::dim2::Plane2d or bevy_math::primitives::dim3::Plane3d instead;
bevy_render::mesh::RegularPolygon is deprecated use bevy_math::primitives::dim2::RegularPolygon instead;
bevy_render::mesh::Circle is deprecated use bevy_math::primitives::dim2::Circle instead;
bevy_render::mesh::Torus is deprecated use bevy_math::primitives::dim3::Torus instead;
bevy_render::mesh::UVSphere is deprecated use bevy_math::primitives::dim3::Sphere instead;
Some examples:

let before = meshes.add(shape::Box::new(5.0, 0.15, 5.0));
let after = meshes.add(Cuboid::new(5.0, 0.15, 5.0));

let before = meshes.add(shape::Quad::default());
let after = meshes.add(Rectangle::default());

let before = meshes.add(shape::Plane::from_size(5.0));
// The surface normal can now also be specified when using `new`
let after = meshes.add(Plane3d::default().mesh().size(5.0, 5.0));

let before = meshes.add(
    Mesh::try_from(shape::Icosphere {
        radius: 0.5,
        subdivisions: 5,
    })
    .unwrap(),
);
let after = meshes.add(Sphere::new(0.5).mesh().ico(5).unwrap());
Multithreaded render command encoding #
Rendering
RenderContext::new() now takes adapter info

Some render graph and Node related types and methods now have additional lifetime constraints.

Stop extracting mesh entities to the render world. #
Rendering
For efficiency reasons, some meshes in the render world may not have corresponding Entity IDs anymore. As a result, the entity parameter to RenderCommand::render() is now wrapped in an Option. Custom rendering code may need to be updated to handle the case in which no Entity exists for an object that is to be rendered.

New Exposure and Lighting Defaults (and calibrate examples) #
Rendering
The increased Exposure::ev100 means that all existing 3D lighting will need to be adjusted to match (DirectionalLights, PointLights, SpotLights, EnvironmentMapLights, etc). Or alternatively, you can adjust the Exposure::ev100 on your cameras to work nicely with your current lighting values. If you are currently relying on default intensity values, you might need to change the intensity to achieve the same effect. Note that in Bevy 0.12, point/spot lights had a different hard coded ev100 value than directional lights. In Bevy 0.13, they use the same ev100, so if you have both in your scene, the scale between these light types has changed and you will likely need to adjust one or both of them.

Many default lighting values were changed:

PointLight's default intensity is now 1_000_000.0
SpotLight's default intensity is now 1_000_000.0
DirectionalLight's default illuminance is now light_consts::lux::AMBIENT_DAYLIGHT (10_000.)
AmbientLight's default brightness is now 80.0
Unload render assets from RAM #
Rendering
Assets
Render assets can now be automatically unloaded from the main world after being prepared for rendering in the render world. This is controlled using RenderAssetUsages bitflags. To mimic old behavior and keep assets around in the main world, use RenderAssetUsages::default().

Mesh now requires a new asset_usage field. Set it to RenderAssetUsages::default() to mimic the previous behavior.

Image now requires a new asset_usage field. Set it to RenderAssetUsages::default() to mimic the previous behavior.

MorphTargetImage::new() now requires a new asset_usage parameter. Set it to RenderAssetUsages::default() to mimic the previous behavior.

DynamicTextureAtlasBuilder::add_texture() now requires that the TextureAtlas you pass has an Image with asset_usage: RenderAssetUsages::default(). Ensure you construct the image properly for the texture atlas.

The RenderAsset trait has significantly changed, and requires adapting your existing implementations.

The trait now requires Clone.
The ExtractedAsset associated type has been removed (the type itself is now extracted).
The signature of prepare_asset() is slightly different
A new asset_usage() method is now required (return RenderAssetUsages::default() to match the previous behavior).
Match on the new NoLongerUsed variant for exhaustive matches of AssetEvent.

Split Ray into Ray2d and Ray3d and simplify plane construction #
Rendering
Math
Ray has been renamed to Ray3d.

Ray creation #

// 0.12
Ray {
    origin: Vec3::ZERO,
    direction: Vec3::new(0.5, 0.6, 0.2).normalize(),
}

// 0.13
// Option 1:
Ray3d {
    origin: Vec3::ZERO,
    direction: Direction3d::new(Vec3::new(0.5, 0.6, 0.2)).unwrap(),
}

// Option 2:
Ray3d::new(Vec3::ZERO, Vec3::new(0.5, 0.6, 0.2))
Plane intersections #

// 0.12
let result = ray.intersect_plane(Vec2::X, Vec2::Y);

// 0.13
let result = ray.intersect_plane(Vec2::X, Plane2d::new(Vec2::Y));
Introduce AspectRatio struct #
Rendering
Math
Anywhere where you are currently expecting a f32 when getting aspect ratios, you will now receive a AspectRatio struct. this still holds the same value.

Include UI node size in the vertex inputs for UiMaterial. #
Rendering
UI
This change should be backwards compatible, using the new field is optional.

Optional ImageScaleMode #
Rendering
UI
Re-export futures_lite in bevy_tasks #
Tasks
Remove futures_lite from Cargo.toml.
[dependencies]
bevy = "0.12.0"
- futures-lite = "1.4.0"
Replace futures_lite imports with bevy::tasks::futures_lite.
- use futures_lite::future::poll_once;
+ use bevy::tasks::futures_lite::future::poll_once;
Rename TextAlignment to JustifyText. #
Text
TextAlignment has been renamed to JustifyText
TextBundle::with_text_alignment has been renamed to TextBundle::with_text_justify
Text::with_alignment has been renamed to Text::with_justify
The text_alignment field of TextMeasureInfo has been renamed to justification
Rename Time::<Fixed>::overstep_percentage() and Time::<Fixed>::overstep_percentage_f64() #
Time
Time::<Fixed>::overstep_percentage() has been renamed to Time::<Fixed>::overstep_fraction()
Time::<Fixed>::overstep_percentage_f64() has been renamed to Time::<Fixed>::overstep_fraction_f64()
Rename Timer::{percent,percent_left} to Timer::{fraction,fraction_remaining} #
Time
Timer::percent() has been renamed to Timer::fraction()
Timer::percent_left() has been renamed to Timer::fraction_remaining()
return Direction3d from Transform::up and friends #
Transform
Math
Callers of Transform::up() and similar functions may have to dereference the returned Direction3d to get to the inner Vec3.

Make clipped areas of UI nodes non-interactive #
UI
The clipped areas of UI nodes are no longer interactive.

RelativeCursorPosition is now calculated relative to the whole node’s position and size, not only the visible part. Its mouse_over method only returns true when the cursor is over an unclipped part of the node.

RelativeCursorPosition no longer implements Deref and DerefMut.

Create serialize feature for bevy_ui #
UI
If you want to use serialize and deserialize with types from bevy_ui, you need to use the feature serialize in your TOML

[dependencies.bevy]
features = ["serialize"]
Camera-driven UI #
UI
If the world contains more than one camera, insert TargetCamera(Entity) component to each UI root node, where Entity is the ID of the camera you want this specific UI tree to be rendered to. Test for any required adjustments of UI positioning and scaling.

// 0.12
commands.spawn(Camera3dBundle { ... });
commands.spawn(NodeBundle { ... });

// 0.13
let camera = commands.spawn(Camera3dBundle { ... }).id();
commands.spawn((TargetCamera(camera), NodeBundle { ... }));
Remove UiCameraConfig component from all cameras. If it was used to control UI visibility, insert Visibility component on UI root nodes instead.

Change Window scale factor to f32 (adopted) #
Windowing
If manipulating scale_factor, some conversion from f64 to f32 may be necessary.

Update winit dependency to 0.29 #
Windowing
Input
KeyCode changes #

Several KeyCode variants have been renamed and now represent physical keys on the keyboard, replacing ScanCode.

Common examples of the updated variants are as follows:

KeyCode::W -> KeyCode::KeyW
KeyCode::Up -> KeyCode::ArrowUp
KeyCode::Key1 -> KeyCode::Digit1
See the relevant documentation for more information.

ReceivedCharacter changes #

The char field of ReceivedCharacter is now a SmolStr, and could contain multiple characters. See these winit docs for details.

A simple workaround if you need a char is to call .chars().last().

It's now possible to use KeyEvent::logical_key's Character variant instead if you need consistent cross-platform behavior and/or a unified event stream with non-character events.

Remove CanvasParentResizePlugin #
Windowing
Remove uses of Window::fit_canvas_to_parent in favor of CSS properties, for example:

canvas {
  width: 100% !important;
  height: 100% !important;
}
Cleanup bevy winit #
Windowing
bevy::window::WindowMoved’s entity field has been renamed to window. This is to be more consistent with other windowing events.

Consider changing usage:

-window_moved.entity
+window_moved.window
Add name to bevy::window::Window #
Windowing
Window has a new name field for specifying the "window class name." If you don't need this, set it to None.

delete methods deprecated in 0.12 #
No area label
Many methods that were tagged as deprecated in 0.12 have now been removed. You should consider fixing the deprecation warnings before migrating to 0.13.

Renamed Accessibility plugin to AccessKitPlugin in bevy_winit #
No area label
bevy_winit::AccessibilityPlugin has been renamed to AccessKitPlugin.

Use TypeIdMap whenever possible #
No area label
TypeIdMap now lives in bevy_utils
DrawFunctionsInternal::indices now uses a TypeIdMap.
bevy_render: use the non-send marker from bevy_core #
No area label
If you were using bevy::render::view::NonSendMarker or bevy::render::view::window::NonSendMarker, use bevy::core::NonSendMarker instead

NEXT
0.11 to 0.12
PREVIOUS
0.13 to 0.14
Improve this page
Bevy engine's GitHub repo
Bevy Discord server
Bevy Mastodon account
Bevy Twitter account
Bevy subreddit
Bevy news feed

Three horizontal lines stacked on top of eachother
Bevy Engine
Migration Guides
Bevy Engine
A saltire or x-cross
Main Menu
Migration Guides
Introduction
0.14 to 0.15
0.13 to 0.14
Animation
AnimationClip now uses UUIDs and NoOpTypeIdHash is now NoOpHash
Implement the AnimationGraph to blend animations together
Multiplying colors by f32 no longer ignores alpha channel
App
OnEnter state schedules now run before Startup schedules
Separate SubApp from App
Make AppExit more specific about exit reason
Deprecate dynamic plugins
Move state initialization methods to bevy::state
Assets
Remove the UpdateAssets and AssetEvents schedules
Use async fn in traits rather than BoxedFuture
Add Ignore variant to ProcessResult
Removed Into<AssetId<T>> for Handle<T>
Add AsyncSeek trait to Reader to be able to seek inside asset loaders
Add error info to LoadState::Failed
Make AssetMetaCheck a field of AssetPlugin
Make LoadContext use the builder pattern
Use RenderAssetUsages to configure gLTF meshes & materials during load
Consolidate RenderMaterials and similar into RenderAssets, implement RenderAsset for destination type
Audio
Fix leftover references to children when despawning audio entities
Color
Overhaul Color
Move WGSL math constants and color operations from bevy_pbr to bevy_render
Remove old color space utilities
Use LinearRgba in ColorAttachment
Dev-Tools
Remove close_on_esc
Diagnostics
Make sysinfo diagnostic plugin optional
Improve tracing layer customization
ECS
Generalised ECS reactivity with Observers
Immediately apply deferred system params in System::run
Move Command and CommandQueue into bevy::ecs::world
Make Component::Storage a constant
Don't store Access<ArchetypeComponentId> within QueryState
Remove WorldCell
Return iterator instead of slice for QueryState::matched_tables and QueryState::matches_archtypes
Remove system stepping from default features
Optimize event updates and virtual time
Make SystemParam::new_archetype and QueryState::new_archetype unsafe
Better SystemId and Entity conversion
Make NextState an enum
Separate states from core ECS
Constrain WorldQuery::get_state() to only accept Components
Unify state transition names to exited and entered
Make apply_state_transition private
Replace FromWorld requirement with FromReflect on ReflectResource
Make ReflectComponentFns and ReflectBundleFns methods work with EntityMut
Require TypeRegistry in ReflectBundle::insert()
Rename multi-threaded feature to multi_threaded
Moves intern and label modules from bevy::utils to bevy::ecs
Gizmos
Gizmo line joints
Gizmo line styles
Rename segments() methods to resolution()
Make gizmos take primitives as a reference
More gizmos builders
Contextually clearing gizmos
Input
Rename touchpad input to gesture
Deprecate ReceivedCharacter
Add WinitEvent::KeyboardFocusLost
Math
Separating Finite and Infinite 3d Planes
Move direction types out of bevy::math::primitives
Rename Direction2d/3d to Dir2/3
Make cardinal splines include endpoints
Replace Point with VectorSpace
UV-mapping change for Triangle2d
Use Vec3A for 3D bounding volumes and raycasts
Update glam to 0.27
Common MeshBuilder trait
Add angle range to TorusMeshBuilder
Add subdivisions to PlaneMeshBuilder
Make Transform::rotate_axis and Transform::rotate_local_axis use Dir3
Use Dir3 for local axis methods in GlobalTransform
Fix Ord and PartialOrd differing for FloatOrd
Move FloatOrd into bevy::math
Reflection
Register missing types manually
Change ReflectSerialize trait bounds
Recursive registration of types
Rename UntypedReflectDeserializer to ReflectDeserializer
Implement Reflect for Result as an enum
Serialize scene with &TypeRegistry and rename serialize_ron() to serialize()
Rendering
Make default behavior for BackgroundColor and BorderColor more intuitive
Rename Camera3dBundle::dither to deband_dither
Rename affine_to_square() to affine3_to_square()
Move AlphaMode into bevy::render
Use UVec2 when working with texture dimensions
Fix CameraProjectionPlugin not implementing Plugin in some cases
Replace random1D() with rand_f() shader function
Intern mesh vertex buffer layouts
Make GpuArrayBufferIndex::index a u32
Allow disabling shadows through MaterialPlugin
Remove SpritePipeline::COLORED
Sorted and binned render phase items, resources, and non-meshes
GPU frustum culling
Remove DeterministicRenderingConfig
Optimize queue_material_meshes and remove some bit manipulation
Disable RAY_QUERY and RAY_TRACING_ACCELERATION_STRUCTURE by default
Upload previous frame's inverse_view to GPU
Generate MeshUniforms on the GPU when available.
Add texture coord flipping to StandardMaterial
Rename ShadowFilteringMethod's Castano13 and Jimenez14 variants
Store lists of VisibleEntities separately
Make Text require SpriteSource
Expose desired_maximum_frame_latency
Merge VisibilitySystems frusta variants
Expand color grading
Rename BufferVec to RawBufferVec
Implement clearcoat
Split Node2d::MainPass
Remove limit on RenderLayers
Fix astronomic emissive colors required for bloom
More idiomatic TextureAtlasBuilder
Normalise matrix naming
Rename "point light" to "clusterable object" in cluster contexts
Make Mesh::merge() take a reference of Mesh
Store ClearColorConfig instead of LoadOp<Color> in CameraOutputMode
wgpu 0.20
Deprecate SpriteSheetBundle and AtlasImageBundle
Decouple BackgroundColor from UiImage
Remove generic camera from extract_default_ui_camera_view() system
Rename need_new_surfaces() system to need_surface_configuration()
Require windowing backends to store windows in WindowWrapper
Tasks
Add an index argument to parallel iteration helpers
UI
Fix spawning NodeBundle destroying previous ones
Rename Rect::inset() to inflate()
Updates default font size to 24px
Utils
Disentangle bevy::utils / bevy::core's re-exported crates
Windowing
Re-add Window::fit_canvas_to_parent
Remove window from WinitWindows when it is closed
Make window close the frame after it is requested
Upgrade to winit 0.30
Without area
Fix Node2d typo
Update to fixedbitset 0.5
Move WASM panic handler from LogPlugin to PanicHandlerPlugin
0.12 to 0.13
0.11 to 0.12
0.10 to 0.11
0.9 to 0.10
0.8 to 0.9
0.7 to 0.8
0.6 to 0.7
0.5 to 0.6
0.4 to 0.5
Getting Started
Learn
News
Community
Foundation
Assets
Examples
Donate heart icon
GitHub repo
Migration Guide: 0.13 to 0.14
Bevy relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is "the latest stable release" of Rust.
Animation #
AnimationClip now uses UUIDs and NoOpTypeIdHash is now NoOpHash #
PR #11707
Animation
AnimationClip now uses UUIDs instead of hierarchical paths based on the Name component to refer to bones. This has several consequences:

A new component, AnimationTarget, should be placed on each bone that you wish to animate, in order to specify its UUID and the associated AnimationPlayer. The glTF loader automatically creates these components as necessary, so most uses of glTF rigs shouldn’t need to change.
Moving a bone around the tree, or renaming it, no longer prevents an AnimationPlayer from affecting it.
Dynamically changing the AnimationPlayer component will likely require manual updating of the AnimationTarget components.
Entities with AnimationPlayer components may now possess descendants that also have AnimationPlayer components. They may not, however, animate the same bones.

Furthermore, NoOpTypeIdHash and NoOpTypeIdHasher have been renamed to NoOpHash and NoOpHasher.

Implement the AnimationGraph to blend animations together #
PR #11989
Animation
AnimationPlayers can no longer play animations by themselves: they need to be paired with a Handle<AnimationGraph>. Code that used AnimationPlayer to play animations will need to create an AnimationGraph asset first, add a node for the clip (or clips) you want to play, and then supply the index of that node to the AnimationPlayer’s play method.

// 0.13
fn setup(mut commands: Commands, mut animations: ResMut<Assets<AnimationClip>>) {
    let mut animation = AnimationClip::default();

    // ...

    let mut player = AnimationPlayer::default();
    player.play(animations.add(animation));

    commands.spawn((
        player,
        // ...
    ));
}

// 0.14
fn setup(
    mut commands: Commands,
    mut animations: ResMut<Assets<AnimationClip>>,
    // You now need access to the `AnimationGraph` asset.
    mut graphs: ResMut<Assets<AnimationGraph>>,
) {
    let mut animation = AnimationClip::default();

    // ...

    // Create a new `AnimationGraph` and add the animation handle to it.
    let (graph, animation_index) = AnimationGraph::from_clip(animations.add(animation));

    let mut player = AnimationPlayer::default();
    // Play the animation index, not the handle.
    player.play(animation_index);

    commands.spawn((
        player,
        // Add the new `AnimationGraph` to the assets, and spawn the entity with its handle.
        graphs.add(graph),
        // ...
    ));
}
Furthermore, the AnimationPlayer::play_with_transition() method has been removed and replaced with the AnimationTransitions component. If you were previously using AnimationPlayer::play_with_transition(), add all animations that you were playing to the AnimationGraph and create an AnimationTransitions component to manage the blending between them.

For more information behind this change, you may be interested in RFC 51.

Multiplying colors by f32 no longer ignores alpha channel #
PR #12575
Animation
Color
Math
Rendering
It was previously possible to multiply and divide a Color by an f32, which is now removed. You must now operate on a specific color space, such as LinearRgba. Furthermore, these operations used to skip the alpha channel, but that is no longer the case.

// 0.13
let color = Color::RgbaLinear {
    red: 1.0,
    green: 1.0,
    blue: 1.0,
    alpha: 1.0,
} * 0.5;

// Alpha is preserved, ignoring the multiplier.
assert_eq!(color.a(), 1.0);

// 0.14
let color = LinearRgba {
    red: 1.0,
    green: 1.0,
    blue: 1.0,
    alpha: 1.0,
} * 0.5;

// Alpha is included in multiplication.
assert_eq!(color.alpha, 0.5);
If you need the alpha channel to remain untouched, consider creating your own helper method:

fn legacy_div_f32(color: &mut LinearRgba, scale: f32) {
    color.red /= scale;
    color.green /= scale;
    color.blue /= scale;
}

let mut color = LinearRgba {
    red: 1.0,
    green: 1.0,
    blue: 1.0,
    alpha: 1.0,
};

legacy_div_f32(&mut color, 2.0);
If you are fine with the alpha changing, but need it to remain within the range of 0.0 to 1.0, consider clamping it:

let mut color = LinearRgba {
    red: 1.0,
    green: 1.0,
    blue: 1.0,
    alpha: 1.0,
} * 10.0;

// Force alpha to be within [0.0, 1.0].
color.alpha = color.alpha.clamp(0.0, 1.0);
Note that in some cases, such as rendering sprites, the alpha is automatically clamped so you do not need to do it manually.

App #
OnEnter state schedules now run before Startup schedules #
PR #11426
App
ECS
In Bevy 0.13, the [OnEnter] schedules for states initialized via [app.init_state] would run after any systems in the Startup schedules. This is because [apply_state_transitions] was only run during the [StateTransition] schedule.

This was a subtle bug: it was possible for the game to be in a particular state without having first entered it. Now, [OnEnter] state transition logic is handled immediately. See bevy#13968 for more context on this decision.

To migrate, choose one of the following options:

Moving your startup systems to a state, as a variant of the state you're waiting for (e.g. AppState::Setup), and then transition out of it once the setup is complete.
Moving your startup systems to a state, and making the other state a sub state that depends on the startup state's completion (e.g. SetupState::SetupComplete).
// 0.13
#[derive(States, Default)]
enum AppState {
    #[default]
    InMenu,
    InGame,
}

app
   .init_state::<AppState>()
   .add_systems(Startup, initial_setup)
   .add_systems(OnEnter(AppState::InMenu), relies_on_initial_setup);

// 0.14 (Solution 1)
#[derive(States, Default)]
enum AppState {
    // Make this the default instead of `InMenu`.
    #[default]
    Setup
    InMenu,
    InGame,
}

fn transition_to_in_menu(mut app_state: ResMut<NextState<AppState>>) {
    app_state.set(AppState::InMenu);
}

app
    .init_state::<AppState>()
    .add_systems(OnEnter(AppState::Setup), initial_setup)
    .add_system(Update, transition_to_in_menu.run_if(in_state(AppState::Setup)))
    .add_systems(OnEnter(AppState::InMenu), relies_on_initial_setup);

// 0.14 (Solution 2)
#[derive(States, Default)]
enum SetupState {
    #[default]
    SettingUp,
    SetupComplete,
}

#[derive(SubStates, Default)]
#[source(SetupState = SetupState::SetupComplete)]
enum AppState {
    #[default]
    InMenu,
    InGame,
}

fn finish_setup(mut app_state: ResMut<NextState<SetupState>>) {
    app_state.set(SetupState::SetupComplete);
}

app
    .init_state::<SetupState>()
    // Note that we don't call `init_state()` for substates!
    .add_sub_state::<AppState>()
    .add_systems(OnEnter(AppState::InitialSetup), initial_setup)
    .add_system(Update, finish_setup.run_if(in_state(AppState::Setup)))
    .add_systems(OnEnter(AppState::InMenu), relies_on_initial_setup);
Separate SubApp from App #
PR #9202
App
SubApp has been separated from App, so there are a few larger changes involved when interacting with these types.

Constructing a SubApp #

SubApp no longer contains an App, so you no longer are able to convert an App into a SubApp. Furthermore, the extraction function must now be set outside of the constructor.

// 0.13
#[derive(AppLabel, Clone, Copy, Hash, PartialEq, Eq, Debug)]
struct MySubApp;

let mut app = App::new();
let mut sub_app = App::empty();

sub_app.add_systems(Main, ...);
sub_app.insert_resource(...);

app.insert_sub_app(MySubApp, SubApp::new(sub_app, |main_world, sub_app| {
    // Extraction function.
}));

// 0.14
#[derive(AppLabel, Clone, Copy, Hash, PartialEq, Eq, Debug)]
struct MySubApp;

let mut app = App::new();
// Use `SubApp::new()` instead of `App::new()`.
let mut sub_app = SubApp::new();

// Instead of setting the extraction function when you create the `SubApp`, you must set it
// afterwards. If you do not set an extraction function, it will do nothing.
sub_app.set_extract(|main_world, sub_world| {
    // Extraction function.
});

// You can still add systems and resources like normal.
sub_app.add_systems(Main, ...);
sub_app.insert_resource(...);

app.insert_sub_app(MySubApp, sub_app);
App changes #

App is not Send anymore, but SubApp still is.

Due to the separation of App and SubApp, a few other methods have been changed.

First, App::world as a property is no longer directly accessible. Instead use the getters App::world and App::world_mut.

#[derive(Component)]
struct MyComponent;

// 0.13
let mut app = App::new();
println!("{:?}", app.world.id());
app.world.spawn(MyComponent);

// 0.14
let mut app = App::new();
println!("{:?}", app.world().id()); // Notice the added paranthesese.
app.world_mut().spawn(MyComponent);
Secondly, all getters for the sub app now return a SubApp instead of an App. This includes App::sub_app, App::sub_app_mut, App::get_sub_app, and App::get_sub_app_mut.

#[derive(AppLabel, Clone, Copy, Hash, PartialEq, Eq, Debug)]
struct MySubApp;

let mut app = App::new();
app.insert_sub_app(MySubApp, SubApp::new());

assert_eq!(app.sub_app(MySubApp).type_id(), TypeId::of::<SubApp>());
Finally, App::runner and App::main_schedule_label are now private. It is no longer possible to get the runner closure, but you can get the main schedule label using SubApp::update_schedule.

let app = App::new();
let label = app.main().update_schedule;
3rd-party traits on App #

If you implemented an extension trait on App, consider also implementing it on SubApp:

trait SpawnBundle {
    /// Spawns a new `Bundle` into the `World`.
    fn spawn_bundle<T: Bundle>(&mut self, bundle: T) -> &mut Self;
}

impl SpawnBundle for App {
    fn spawn_bundle<T: Bundle>(&mut self, bundle: T) -> &mut Self {
        self.world_mut().spawn(bundle);
        self
    }
}

/// `SubApp` has a very similar API to `App`, so the code will usually look the same.
impl SpawnBundle for SubApp {
    fn spawn_bundle<T: Bundle>(&mut self, bundle: T) -> &mut Self {
        self.world_mut().spawn(bundle);
        self
    }
}
Make AppExit more specific about exit reason #
PR #13022
App
The AppExit event is now an enum that represents whether the code exited successfully or not. If you construct it, you must now specify Success or Error:

// 0.13
fn send_exit(mut writer: EventWriter<AppExit>) {
    writer.send(AppExit);
}

// 0.14
fn send_exit(mut writer: EventWriter<AppExit>) {
    writer.send(AppExit::Success);
    // Or...
    writer.send(AppExit::Error(NonZeroU8::new(1).unwrap()));
}
If you subscribed to this event in a system, consider matching whether it was a success or an error:

// 0.13
fn handle_exit(mut reader: EventReader<AppExit>) {
    for app_exit in reader.read() {
        // Something interesting here...
    }
}

// 0.14
fn handle_exit(mut reader: EventReader<AppExit>) {
    for app_exit in reader.read() {
        match *app_exit {
            AppExit::Success => {
                // Something interesting here...
            },
            AppExit::Error(exit_code) => panic!("App exiting with an error! (Code: {exit_code})"),
        }
    }
}
Furthermore, App::run() now returns AppExit instead of the unit type (). Since AppExit implements Termination, you can now return it from the main function.

// 0.13
fn main() {
    App::new().run()
}

// 0.14
fn main() -> AppExit {
    App::new().run()
}

// 0.14 (alternative)
fn main() {
    // If you want to ignore `AppExit`, you can add a semicolon instead. :)
    App::new().run();
}
Finally, if you configured a custom App runner function, it will now have to return an AppExit.

let mut app = App::new();

app.set_runner(|_app| {
    // ...

    // Return success by default, though you may also return an error code.
    AppExit::Success
});
Deprecate dynamic plugins #
PR #13080
App
Dynamic plugins are now deprecated. If possible, remove all usage them from your code:

// 0.13
// This would be compiled into a separate dynamic library.
#[derive(DynamicPlugin)]
pub struct MyPlugin;

impl Plugin for MyPlugin {
    // ...
}

// This would be compiled into the main binary.
App::new()
    .load_plugin("path/to/plugin")
    .run()

// 0.14
// This would now be compiled into the main binary as well.
pub struct MyPlugin;

impl Plugin for MyPlugin {
    // ...
}

App::new()
    .add_plugins(MyPlugin)
    .run()
If you are unable to do that, you may temporarily silence the deprecation warnings by annotating all usage with #[allow(deprecated)]. Please note that the current dynamic plugin system will be removed by the next major Bevy release, so you will have to migrate eventually. You may be interested in these safer, related links:

Bevy Assets - Scripting: Scripting and modding libraries for Bevy
Bevy Assets - Development tools: Hot reloading and other development functionality
stabby: Stable Rust ABI
If you truly cannot go without dynamic plugins, you may copy the code from Bevy and add it to your project locally.

Move state initialization methods to bevy::state #
PR #13637
App
ECS
State has been moved to bevy::state. With it, App::init_state has been moved from a normal method to an extension trait. You may now need to import AppExtStates in order to use this method, if you don't use the prelude. (This trait is behind the bevy_state feature flag, which you may need to enable.)

// 0.13
App::new()
    .init_state::<MyState>()
    .run()

// 0.14
use bevy::state::app::AppExtStates as _;

App::new()
    .init_state::<MyState>()
    .run()
Assets #
Remove the UpdateAssets and AssetEvents schedules #
PR #11986
Assets
The UpdateAssets schedule has been removed. If you add systems to this schedule, move them to run on PreUpdate. (You may need to configure the ordering with system.before(...) and system.after(...).)

// 0.13
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(UpdateAssets, my_system)
    .run()

// 0.14
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(PreUpdate, my_system)
    .run()
Furthermore, AssetEvents has been changed from a ScheduleLabel to a SystemSet within the First schedule.

// 0.13
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(AssetEvents, my_system)
    .run()

// 0.14
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(First, my_system.in_set(AssetEvents))
    .run()
Use async fn in traits rather than BoxedFuture #
PR #12550
Assets
In Rust 1.75, async fn was stabilized for traits. Some traits have been switched from returning BoxedFuture to be an async fn, specifically:

AssetReader
AssetWriter
AssetLoader
AssetSaver
Process
Please update your trait implementations:

// 0.13
impl AssetLoader for MyAssetLoader {
    // ...

    fn load<'a>(
        &'a self,
        reader: &'a mut Reader,
        _settings: &'a (),
        _load_context: &'a mut LoadContext,
    ) -> BoxedFuture<'a, Result<Self::Asset, Self::Error>> {
        // Note that you had to pin the future.
        Box::pin(async move {
            let mut bytes = Vec::new();
            reader.read_to_end(&mut bytes).await?;
            Ok(bytes)
        })
    }
}

// 0.14
impl AssetLoader for MyAssetLoader {
    // ...

    async fn load<'a>(
        &'a self,
        reader: &'a mut Reader<'_>,
        _settings: &'a (),
        _load_context: &'a mut LoadContext<'_>,
    ) -> Result<Self::Asset, Self::Error> {
        // No more need to pin the future, just write it!
        let mut bytes = Vec::new();
        reader.read_to_end(&mut bytes).await?;
        Ok(bytes)
    }
}
Because these traits now use async, they are no longer object safe. If you need to receive or store &dyn Trait, use the &dyn ErasedTrait variant instead. For instance:

// 0.13
struct MyReader(Box<dyn AssetReader>);

// 0.14
struct MyReader(Box<dyn ErasedAssetReader>);
Add Ignore variant to ProcessResult #
PR #12605
Assets
The ProcessResult enum, used in asset loading, has a new Ignore variant. You may need to update your match statements.

Removed Into<AssetId<T>> for Handle<T> #
PR #12655
Assets
Converting from a Handle to an AssetId using Into was removed because it was a footgun that could potentially drop the asset if the Handle was a strong reference. If you need the AssetId, please use Handle::id() instead.

// 0.13
let id: AssetId<T> = handle.into();

// 0.14
let id = handle.id();
Add AsyncSeek trait to Reader to be able to seek inside asset loaders #
PR #12547
Assets
The asset loader's Reader type alias now requires the new AsyncSeek trait. Please implement AsyncSeek for any structures that must be a Reader, or use an alternative if seeking is not supported.

If this is a problem for you, please chime in at bevy#12880 and help us improve the design for 0.15!

Add error info to LoadState::Failed #
PR #12709
Assets
Rust prides itself on its error handling, and Bevy has been steadily catching up. Previously, when checking if an asset was loaded using AssetServer::load_state (and variants), the only information returned on an error was the empty LoadState::Failed. Not very useful for debugging!

Now, a full AssetLoadError is included inside Failed to tell you exactly what went wrong. You may need to update your match and if let statements to handle this new value:

// 0.13
match asset_server.load_state(asset_id) {
    // ...
    LoadState::Failed => eprintln!("Could not load asset!"),
}

// 0.14
match asset_server.load_state(asset_id) {
    // ...
    LoadState::Failed(error) => eprintln!("Could not load asset! Error: {}", error),
}
Furthermore, the Copy, PartialOrd, and Ord implementations have been removed from LoadState. You can explicitly call .clone() instead of copying the enum, and you can manually re-implement Ord as a helper method if required.

Make AssetMetaCheck a field of AssetPlugin #
PR #13177
Assets
AssetMetaCheck is used to configure how the AssetPlugin reads .meta files. It was previously a resource, but now has been changed to a field in AssetPlugin. If you use DefaultPlugins, you can use .set to configure this field.

// 0.13
App::new()
    .add_plugins(DefaultPlugins)
    .insert_resource(AssetMetaCheck::Never)
    .run()

// 0.14
App::new()
    .add_plugins(DefaultPlugins.set(AssetPlugin {
        meta_check: AssetMetaCheck::Never,
        ..default()
    }))
    .run()
Make LoadContext use the builder pattern #
PR #13465
Assets
LoadContext, used by AssetLoader, has been updated so all of its load_* methods have been merged into a builder struct.

// 0.13
load_context.load_direct(path);
// 0.14
load_context.loader().direct().untyped().load(path);

// 0.13
load_context.load_direct_with_reader(reader, path);
// 0.14
load_context.loader().direct().with_reader(reader).untyped().load(path);

// 0.13
load_context.load_untyped(path);
// 0.14
load_context.loader().untyped().load(path);

// 0.13
load_context.load_with_settings(path, settings);
// 0.14
load_context.loader().with_settings(settings).load(path);
Use RenderAssetUsages to configure gLTF meshes & materials during load #
PR #12302
Assets
Rendering
It is now possible configure whether meshes and materials should be loaded in the main world, the render world, or both with GltfLoaderSettings. The load_meshes field has been changed from a bool to a RenderAssetUsages bitflag, and a new load_materials field as been added.

You may need to update any gLTF .meta files:

// 0.13
load_meshes: true

// 0.14
load_meshes: ("MAIN_WORLD | RENDER_WORLD")
If you use AssetServer::load_with_settings instead when loading gLTF files, you will also have to update:

// 0.13
asset_server.load_with_settings("model.gltf", |s: &mut GltfLoaderSettings| {
    s.load_meshes = true;
});

// 0.14
asset_server.load_with_settings("model.gltf", |s: &mut GltfLoaderSettings| {
    s.load_meshes = RenderAssetUsages::MAIN_WORLD | RenderAssetUsages::RENDER_WORLD;
});
Consolidate RenderMaterials and similar into RenderAssets, implement RenderAsset for destination type #
PR #12827
Assets
Rendering
RenderMaterials, RenderMaterials2d, and RenderUiMaterials have all been replaced with the RenderAssets resource. If you need access a PreparedMaterial<T> using an AssetId, use RenderAssets::get instead.

Furthermore, the RenderAsset trait should now be implemented for destination types rather than source types. If you need to access the source type, use the RenderAsset::SourceAsset associated type.

// 0.13
impl RenderAsset for Image {
    type PreparedAsset = GpuImage;

    // ...
}

// 0.14
impl RenderAsset for GpuImage {
    type SourceAsset = Image;

    // ...
}
Audio #
Fix leftover references to children when despawning audio entities #
PR #12407
Audio
You can configure the behavior of spawned audio with the PlaybackMode enum. One of its variants, PlaybackMode::Despawn, would despawn the entity when the audio finished playing.

There was previously a bug where this would only despawn the entity and not its children. This has been fixed, so now despawn_recursive() is called when the audio finishes.

If you relied on this behavior, consider using PlaybackMode::Remove to just remove the audio components from the entity or AudioSink::empty() to check whether any audio is finished and manually despawn() it.

Color #
Overhaul Color #
PR #12163
Color
Gizmos
Rendering
Text
UI
Bevy's color support has received a major overhaul, and with it the new bevy::color module. Buckle up, many things have been changed!

Color space representation #

Bevy's main Color enum is used to represent color in many different color spaces (such as RGB, HSL, and more). Before, these color spaces were all represented inline as variants:

enum Color {
    Rgba {
        red: f32,
        green: f32,
        blue: f32,
        alpha: f32,
    },
    Hsla {
        hue: f32,
        saturation: f32,
        lightness: f32,
        alpha: f32,
    },
    // ...
}
This has been changed so now each color space has its own dedicated struct:

struct Srgba {
    red: f32,
    green: f32,
    blue: f32,
    alpha: f32,
}

struct Hsla {
    hue: f32,
    saturation: f32,
    lightness: f32,
    alpha: f32,
}

enum Color {
    Srgba(Srgba),
    Hsla(Hsla),
    // ...
}
This makes it easier to organize and manage different color spaces, and many more color spaces have been added too! To handle this change, you may need to update your match statements:

// 0.13
match color {
    Color::Rgba { red, green, blue, alpha } => {
        // Something cool here!
    },
    _ => {},
}

// 0.14
match color {
    Color::Srgba(Srgba { red, green, blue, alpha }) => {
        // Something cool here!
    },
    // If you explicitly match every possible color space, you may need to handle more variants.
    // Color::Xyza(Xyza { x, y, z, alpha }) => {
    //     // Something else even cooler here!
    // },
    _ => {}
}
Additionally, you must now use the From and Into implementations when converting between color spaces, as compared to the old helper methods such as as_rgba and as_hsla.

// 0.13
let color = Color::rgb(1.0, 0.0, 1.0).as_hsla();

// 0.14
let color: Hsla = Srgba::rgb(1.0, 0.0, 1.0).into();
Color methods #

Any mention of RGB has been renamed to sRGB. This includes the variant Color::Rgba turning into Color::Srgba as well as methods such as Color::rgb and Color::rgb_u8 turning into Color::srgb and Color::srgb_u8.

Methods to access specific channels of Color have been removed due to causing silent, relatively expensive conversions. This includes Color::r, Color::set_r, Color::with_r, and all of the equivalents for g, b h, s and l. Convert your Color into the desired color space, perform your operation there, and then convert it back.

// 0.13
let mut color = Color::rgb(0.0, 0.0, 0.0);
color.set_b(1.0);

// 0.14
let color = Color::srgb(0.0, 0.0, 0.0);
let srgba = Srgba {
    blue: 1.0,
    ..Srgba::from(color),
};
let color = Color::from(srgba);
Color::hex has been moved to Srgba::hex. Call .into() or construct a Color::Srgba variant manually to convert it.

Color::rgb_linear and Color::rgba_linear have been renamed Color::linear_rgb and Color::linear_rgba to fit the naming scheme of the LinearRgba struct.

Color::as_linear_rgba_f32 and Color::as_linear_rgba_u32 have been removed. Call LinearRgba::to_f32_array and LinearRgba::to_u32 instead, converting if necessary.

Several other color conversion methods to transform LCH or HSL colors into float arrays or Vec types have been removed. Please reimplement these externally or open a PR to re-add them if you found them particularly useful.

Vector field arithmetic operations on Color (add, subtract, multiply and divide by a f32) have been removed. Instead, convert your colors into LinearRgba space and perform your operations explicitly there. This is particularly relevant when working with emissive or HDR colors, whose color channel values are routinely outside of the ordinary 0 to 1 range.

Alpha #

Alpha, also known as transparency, used to be referred to by the letter a. It is now called by its full name within structs and methods.

Color::set_a, Color::with_a, and Color::a are now Color::set_alpha, Color::with_alpha, and Color::alpha. These are part of the new Alpha trait.
Additionally, Color::is_fully_transparent is now part of the Alpha.
CSS Constants #

The various CSS color constants are no longer stored directly on Color. Instead, they’re defined in the Srgba color space, and accessed via bevy::color::palettes. Call .into() on them to convert them into a Color for quick debugging use.

// 0.13
let color = Color::BLUE;

// 0.14
use bevy::color::palettes::css::BLUE;

let color = BLUE;
Please note that palettes::css is not necessarily 1:1 with the constants defined previously as some names and colors have been changed to conform with the CSS spec. If you need the same color as before, consult the table below or use the color values from the old constants.

0.13	0.14
CYAN	AQUA
DARK_GRAY	Srgba::gray(0.25)
DARK_GREEN	Srgba::rgb(0.0, 0.5, 0.0)
GREEN	LIME
LIME_GREEN	LIMEGREEN
PINK	DEEP_PINK
Switch to LinearRgba #

WireframeMaterial, ExtractedUiNode, ExtractedDirectionalLight, ExtractedPointLight, ExtractedSpotLight, and ExtractedSprite now store a LinearRgba rather than a polymorphic Color. Furthermore, Color no longer implements AsBindGroup. You should store a LinearRgba instead to avoid conversion costs.

Move WGSL math constants and color operations from bevy_pbr to bevy_render #
PR #13209
Color
Mathematical constants and color conversion functions for shaders have been moved from bevy_pbr::utils to bevy_render::maths and bevy_render::color_operations. If you depended on these in your own shaders, please update your import statements:

// 0.13
#import bevy_pbr::utils::{PI, rgb_to_hsv}

// 0.14
#import bevy_render::{maths::PI, color_operations::rgb_to_hsv}
Remove old color space utilities #
PR #12105
Color
Rendering
The SrgbColorSpace trait, HslRepresentation struct, and LchRepresentation struct have been removed in favor of the specific color space structs.

For SrgbColorSpace, use Srgba::gamma_function() and Srgba::gamma_function_inverse(). If you used the SrgbColorSpace implementation for u8, convert it to an f32 first:

// 14 is random, this could be any number.
let nonlinear: u8 = 14;

// Apply gamma function, converting `u8` to `f32`.
let linear: f32 = Srgba::gamma_function(nonlinear as f32 / 255.0);

// Convert back to a `u8`.
let linear: u8 = (linear * 255.0) as u8;
Note that this conversion can be costly, especially if called during the Update schedule. Consider just using f32 instead.

HslRepresentation and LchRepresentation can be replaced with the From implementations between Srgba, Hsla, and Lcha.

// 0.13
let srgb = HslRepresentation::hsl_to_nonlinear_srgb(330.0, 0.7, 0.8);
let lch = LchRepresentation::nonlinear_srgb_to_lch([0.94, 0.66, 0.8]);

// 0.14
let srgba: Srgba = Hsla::new(330.0, 0.7, 0.8, 1.0).into();
let lcha: Lcha = Srgba::new(0.94, 0.66, 0.8, 1.0).into();
Use LinearRgba in ColorAttachment #
PR #12116
Color
Rendering
ColorAttachment::new() now takes Option<LinearRgba> instead of Option<Color> for the clear_color. You can use the From<Color> implementation to convert your color.

let clear_color: Option<LinearRgba> = Some(color.into());
Dev-Tools #
Remove close_on_esc #
PR #12859
Dev-Tools
The close_on_esc system was removed because it was too opiniated and lacked customization. If you used this system, you may copy its contents below:

pub fn close_on_esc(
    mut commands: Commands,
    focused_windows: Query<(Entity, &Window)>,
    input: Res<ButtonInput<KeyCode>>,
) {
    for (window, focus) in focused_windows.iter() {
        if !focus.focused {
            continue;
        }

        if input.just_pressed(KeyCode::Escape) {
            commands.entity(window).despawn();
        }
    }
}
You may be interested in using the built-in keybinds provided by the operating system instead, such as Alt+F4 and Command+Q.

Diagnostics #
Make sysinfo diagnostic plugin optional #
PR #12164
Diagnostics
bevy::diagnostic depends on the sysinfo to track CPU and memory usage using SystemInformationDiagnosticsPlugin, but compiling and polling system information can be very slow. sysinfo is now behind the sysinfo_plugin feature flag, which is enabled by default for bevy for not for bevy_diagnostic.

If you depend on bevy_diagnostic directly, toggle the flag in Cargo.toml:

[dependencies]
bevy_diagnostic = { version = "0.14", features = ["sysinfo_plugin"] }
If you set default-features = false for bevy, do the same in Cargo.toml:

[dependencies]
bevy = { version = "0.14", default-features = false, features = ["sysinfo_plugin"] }
Improve tracing layer customization #
PR #13159
Diagnostics
Bevy uses tracing to handle logging and spans through LogPlugin. This could be customized with the update_subscriber field, but it was highly restrictive. This has since been amended, replacing the update_subscriber field with the more flexible custom_layer, which returns a Layer.

// 0.13
fn update_subscriber(_app: &mut App, subscriber: BoxedSubscriber) -> BoxedSubscriber {
    Box::new(subscriber.with(CustomLayer))
}

App::new()
    .add_plugins(LogPlugin {
        update_subscriber: Some(update_subscriber),
        ..default()
    })
    .run();

// 0.14
use bevy::log::tracing_subscriber;

fn custom_layer(_app: &mut App) -> Option<BoxedLayer> {
    // You can provide a single layer:
    return Some(CustomLayer.boxed());

    // Or you can provide multiple layers, since `Vec<Layer>` also implements `Layer`:
    Some(Box::new(vec![
        tracing_subscriber::fmt::layer()
            .with_file(true)
            .boxed(),
        CustomLayer.boxed(),
    ]))
}

App::new()
    .add_plugins(LogPlugin {
        custom_layer,
        ..default()
    })
    .run();
The BoxedSubscriber type alias has also been removed, it was replaced by the BoxedLayer type alias.

ECS #
Generalised ECS reactivity with Observers #
PR #10839
ECS
In 0.14, ECS observers were introduced: mechanisms for immediately responding to events in the world. As part of this change, the Event trait was extended to require Component. #[derive(Event)] now automatically implements Component for the annotated type, which can break types that also #[derive(Component)].

// 0.13
#[derive(Event, Component)]
struct MyEvent;

// 0.14
// `Component` is still implemented by the `Event` derive.
#[derive(Event)]
struct MyEvent;
For more information, see the release notes on hooks and observers.

Immediately apply deferred system params in System::run #
PR #11823
ECS
The default implementation of System::run will now always immediately run System::apply_deferred. If you were manually calling System::apply_deferred in this situation, you may remove it. Please note that System::run_unsafe still does not call apply_deferred because it cannot guarantee it will be safe.

// 0.13
system.run(world);

// Sometime later:
system.apply_deferred(world);

// 0.14
system.run(world);

// `apply_deferred` no longer needs to be called!
Move Command and CommandQueue into bevy::ecs::world #
PR #12234
ECS
Command and CommandQueue have been moved from bevy::ecs::system to bevy::ecs::world. If you import them directly, you will need to update your import statements.

// 0.13
use bevy::ecs::system::{Command, CommandQueue};

// 0.14
use bevy::ecs::world::{Command, CommandQueue};
Make Component::Storage a constant #
PR #12311
ECS
The Component::Storage associated type has been replaced with the associated constant STORAGE_TYPE, making the ComponentStorage trait unnecessary. If you were manually implementing Component instead of using the derive macro, update your definitions:

// 0.13
impl Component for MyComponent {
    type Storage = TableStorage;
}

// 0.14
impl Component for MyComponent {
    const STORAGE_TYPE: StorageType = StorageType::Table;

    // ...
}
Before	After
TableStorage	StorageType::Table
SparseStorage	StorageType::SparseSet
Component is also now no longer object safe. If you were using dyn Component, please consider filing an issue describing your use-case.

Don't store Access<ArchetypeComponentId> within QueryState #
PR #12474
ECS
QueryState no longer stores an Access<ArchetypeComponentId>, you must now pass it as an argument to each method that uses it. To account for this change:

QueryState::archetype_component_access has been removed. You can work around this by accessing the surrounding SystemStates instead.
QueryState::new_archetype and QueryState::update_archetype_component_access now require an &mut Access<ArchetypeComponentId> as a parameter.
Remove WorldCell #
PR #12551
ECS
WorldCell has been removed due to its incomplete nature, tendency to generate runtime panics, and the presence of multiple good alternatives. If you were using it to fetch multiple distinct resource values, consider using a SystemState instead with the SystemState::get() method.

If SystemState does not fit your use-case and unsafe is tolerable, you can use UnsafeWorldCell. It is more performant and featureful, but lacks the runtime checks.

Return iterator instead of slice for QueryState::matched_tables and QueryState::matches_archtypes #
PR #12476
ECS
QueryState::matched_tables and QueryState::matched_archetypes now return iterators instead of slices. If possible, use the combinators available from the Iterator trait. In a worst-case scenario you may call Iterator::collect() into a Vec, which can then be converted into a slice.

Remove system stepping from default features #
PR #12847
ECS
The system stepping feature is now disabled by default. It generally should not be included in shipped games, and adds a small but measurable performance overhead. To enable it, add the bevy_debug_stepping feature to your Cargo.toml:

[dependencies]
bevy = { version = "0.14", features = ["bevy_debug_stepping"] }
Code using Stepping will still compile with the feature disabled, but will print an error message at runtime if the application calls Stepping::enable().

Optimize event updates and virtual time #
PR #12936
ECS
Events::update() has been optimized to be O(1) for the amount of events registered. In doing so, a few systems and run conditions have been changed.

Events are registered to a World using EventRegistry instead of the Events resource:

// 0.13
world.insert_resource(Events::<MyEvent>::default());

// 0.14
EventRegistry::register_event::<MyEvent>(&mut world);
A few systems and run conditions have been changed as well:

event_update_system no longer uses generics and now has different arguments.
signal_event_update_system now has different arguments.
reset_event_update_signal_system has been removed.
event_update_condition now has different arguments.
While not related to events, the virtual_time_system has been changed as well. It has been converted from a system to a regular function, and now takes &T and &mut T instead of Res<T> and ResMut<T>.

Make SystemParam::new_archetype and QueryState::new_archetype unsafe #
PR #13044
ECS
QueryState::new_archetype and SystemParam::new_archetype are now unsafe functions because they do not ensure that the provided Archetype is from the same World that the state was initialized from. You will need to wrap any usage inside of an unsafe block, and you may need to write additional assertions to verify correct usage.

Better SystemId and Entity conversion #
PR #13090
ECS
If you need to access the underlying Entity for a one-shot system's SystemId, use the new SystemId::entity() method.

// 0.13
let system_id = world.register_system(my_system);
let entity = Entity::from(system_id);

// 0.14
let system_id = world.register_system(my_system);
let entity = system_id.entity();
Make NextState an enum #
PR #11426
ECS
NextState has been converted from a unit struct to an enum. If you accessed the internal Option directly, whether through NextState::0 or matching, you will have to update your code to handle this change.

// 0.13
let state = next_state.0.unwrap();

// 0.14
let NextState::Pending(state) = next_state else { panic!("No pending next state!") };
0.13	0.14
NextState(Some(S))	NextState::Pending(S)
NextState(None)	NextState::Unchanged
Separate states from core ECS #
PR #13216
ECS
States were moved to a separate crate which is gated behind the bevy_state feature. Projects that use state but don't use Bevy's default-features will need to add this feature to their Cargo.toml.

Projects that use bevy_ecs directly and use states will need to add the bevy_state crate as a dependency.

Projects that use bevy_app directly and use states will need to add the bevy_state feature.

If you do not use DefaultPlugins, you will need to add the StatesPlugin manually to your app.

Users should update imports that referenced the old location.

// 0.13
use bevy::ecs::schedule::{NextState, OnEnter, OnExit, OnTransition, State, States};
use bevy::ecs::schedule::common_conditions::in_state;

// 0.14
use bevy::state::state::{NextState, OnEnter, OnExit, OnTransition, State, States}
use bevy::state::condition::in_state;
Constrain WorldQuery::get_state() to only accept Components #
PR #13343
ECS
A few methods of WorldQuery and QueryState were unsound because they were passed an &World. They are now restricted to just take an &Components. The affected methods are:

WorldQuery::get_state()
QueryState::transmute()
QueryState::transmute_filtered()
QueryState::join()
QueryState::join_filtered()
To access Components from a World, call World::components().

If you manually implemented WorldQuery, you need to update get_state() to only use the information provided by Components.

Unify state transition names to exited and entered #
PR #13594
ECS
StateTransitionEvent's before and after fields have been renamed to exited and entered for consistency. You will have to update your usage if you access these fields or construct StateTransitionEvent.

Make apply_state_transition private #
PR #13626
ECS
The apply_state_transition system is no longer public. The easiest way to migrate your systems that depended on it for ordering is to create a custom schedule.

// 0.13
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(StateTransition, my_system.after(apply_state_transition))
    .run()

// 0.14
#[derive(ScheduleLabel, Debug, Hash, PartialEq, Eq, Clone)]
struct AfterStateTransition;

let mut app = App::new();

app.add_plugins(DefaultPlugins)
    .add_systems(AfterStateTransition, my_system);

// Create a new schedule and add it to the app.
let after_state_transition = Schedule::new(AfterStateTransition);
app.add_schedule(after_state_transition);

// Modify the schedule order to make this run after `StateTransition`.
app.world_mut()
    .resource_mut::<MainScheduleOrder>()
    .insert_after(StateTransition, AfterStateTransition);

app.run()
Replace FromWorld requirement with FromReflect on ReflectResource #
PR #12136
ECS
Reflection
#[reflect(Resource)] now requires the FromReflect trait to be implemented for your resource. This is done by default if you use #[derive(Reflect)], but you structs that opt-out of this behavior will have to write their own implementation. FromReflect was added to replace the FromWorld requirement, though FromReflect is fallible. You may wish to add #[reflect(FromWorld)] to your resources to maintain an infallible variant.

Finally, if you use the ReflectResource struct you will need to pass a &TypeRegistry to its insert, apply_or_insert, and copy methods.

Make ReflectComponentFns and ReflectBundleFns methods work with EntityMut #
PR #12895
ECS
Reflection
ReflectComponentFns and ReflectBundleFns have been updated to work with EntityMut, as compared to the more restricting EntityWorldMut. You will have to update your usage of ReflectComponentFns::apply, ReflectComponentFns::reflect_mut, and ReflectBundleFns::apply.

If you just use ReflectComponent and ReflectBundle, you will not have change your code because EntityWorldMut implements Into<EntityMut>.

Require TypeRegistry in ReflectBundle::insert() #
PR #12499
ECS
Reflection
ReflectBundle::insert now requires an additional &TypeRegistry parameter.

Rename multi-threaded feature to multi_threaded #
PR #12997
ECS
Tasks
The multi-threaded feature has been renamed to multi_threaded for bevy, bevy_asset, bevy_ecs, bevy_render, bevy_tasks, and bevy_internal. Please update your Cargo.toml if you manually specify Bevy features.

Moves intern and label modules from bevy::utils to bevy::ecs #
PR #12772
ECS
Utils
The bevy::utils::label and bevy::utils::intern modules have been moved to bevy::ecs, as well as the bevy::utils::define_label macro as part of an active effort to shrink bevy::utils. You will have to update your import statements to use the new paths.

Gizmos #
Gizmo line joints #
PR #12252
Gizmos
Line joins have been added for gizmos, allowing for smooth or sharp corners between lines. If you manually created your own GizmoConfig, you will have to specify the type of line joins with the line_joins field.

The Default implementation of GizmoLineJoint is None, but you may be interested in Miter for sharp joints or Round for smooth joints.

Gizmo line styles #
PR #12394
Gizmos
It is now possible to configure the line style (such as solid or dotted) of gizmos using GizmoConfig::line_style. If you manually create a GizmoConfig, you will have to specify this field.

Rename segments() methods to resolution() #
PR #13438
Gizmos
All gizmo methods named segments() have been rename to resolution() in order to be consistent with bevy::render.

Make gizmos take primitives as a reference #
PR #13534
Gizmos
Gizmos::primitive_2d() and Gizmos::primitive_3d() now take the primitive as a reference so that non-Copy primitives do not need to be cloned each time they are drawn.

// 0.13
fn draw(mut gizmos: Gizmos) {
    let polygon = Polygon {
        vertices: [
            // ...
        ],
    };

    // Since `Polygon` is not `Copy`, you would need to clone it if you use it more than once.
    gizmos.primitive_2d(polygon.clone(), Vec2::ZERO, 0.0, Color::WHITE);
    gizmos.primitive_2d(polygon, Vec2::ONE, 0.0, Color::BLACK);
}

// 0.14
fn draw(mut gizmos: Gizmos) {
    let polygon = Polygon {
        vertices: [
            // ...
        ],
    };

    // No need to clone the polygon anymore!
    gizmos.primitive_2d(&polygon, Vec2::ZERO, 0.0, Color::WHITE);
    gizmos.primitive_2d(&polygon, Vec2::ONE, 0.0, Color::BLACK);
}
More gizmos builders #
PR #13261
Gizmos
Gizmos::primitive_2d(CIRLCE), Gizmos::primitive_2d(ELLIPSE), Gizmos::primitive_2d(ANNULUS), and Gizmos::primitive_3d(SPHERE) now return their corresponding builders instead of the unit type (). Furthermore, SphereBuilder::circle_segments() has been renamed to resolution().

Contextually clearing gizmos #
PR #10973
Gizmos
App::insert_gizmo_group() function is now named App::insert_gizmo_config().

Input #
Rename touchpad input to gesture #
PR #13660
Input
In a recent winit update, touchpad events can now be triggered on mobile. To account for this, touchpad-related items have been renamed to gestures:

bevy::input::touchpad has been renamed to bevy::input::gestures.
TouchpadMagnify has been renamed to PinchGesture.
TouchpadRotate has been renamed to RotationGesture.
Deprecate ReceivedCharacter #
PR #12868
Input
Windowing
ReceivedCharacter is now deprecated due to winit reworking their keyboard system, switch to using KeyboardInput instead.

// 0.13
fn listen_characters(events: EventReader<ReceivedCharacter>) {
    for event in events.read() {
        info!("{}", event.char);
    }
}

// 0.14
fn listen_characters(events: EventReader<KeyboardInput>) {
    for event in events.read() {
        // Only check for characters when the key is pressed.
        if !event.state.is_pressed() {
            continue;
        }

        // Note that some keys such as `Space` and `Tab` won't be detected as a character.
        // Instead, check for them as separate enum variants.
        match &event.logical_key {
            Key::Character(character) => {
                info!("{} pressed.", character);
            },
            Key::Space => {
                info!("Space pressed.");
            },
            _ => {},
        }
    }
}
Add WinitEvent::KeyboardFocusLost #
PR #13678
Input
Windowing
WinitEvent has a new enum variant: WinitEvent::KeyboardFocusLost. This was added as part of a fix where key presses would stick when losing focus of the Bevy window, such as with Alt + Tab. Please update any match statements.

Math #
Separating Finite and Infinite 3d Planes #
PR #12426
Math
Rendering
The Plane3d primitive is now a finite plane with a half_size field. If you want an infinite plane, use the new InfinitePlane3d.

// 0.13
let plane = Plane3d::new(Vec3::Y);

// 0.14
let plane = Plane3d {
    normal: Dir3::Y,
    half_size: Vec2::new(10., 10.),
};
let plane = InfinitePlane3d::new(Vec3::Y);
Move direction types out of bevy::math::primitives #
PR #12018
Math
The Direction2d, Direction3d, and InvalidDirectionError types have been moved from bevy::math::primitives to bevy::math.

// 0.13
use bevy::math::primitives::{Direction2d, Direction3d, InvalidDirectionError};

// 0.14
use bevy::math::{Direction2d, Direction3d, InvalidDirectionError};
Rename Direction2d/3d to Dir2/3 #
PR #12189
Math
The Direction2d and Direction3d types have been renamed to Dir2 and Dir3. They have been shortened to make them easier to type, and to make them consistent with glam's shorter naming scheme (e.g. Vec2, Mat4).

Make cardinal splines include endpoints #
PR #12574
Math
There was a bug in CubicCardinalSpline where the curve would only pass through the interior control points, not the points at the beginning and end. (For an in-depth analysis, see this issue.) This has been fixed so that the curve passes through all control points, but it may break behavior you were depending on.

If you rely on the old behavior of CubicCardinalSpline, you will have to truncate any parametrizations you used in order to access a curve identical to the one you had previously. This can be done by chopping off a unit-distance segment from each end of the parametrizing interval. For instance, if your code looks as follows:

fn interpolate(t: f32) -> Vec2 {
    let points = [
        vec2(-1.0, -20.0),
        vec2(3.0, 2.0),
        vec2(5.0, 3.0),
        vec2(9.0, 8.0),
    ];
    let my_curve = CubicCardinalSpline::new(0.3, points).to_curve();
    my_curve.position(t)
}
Then in order to obtain similar behavior, t will need to be shifted up by 1 (since the output of CubicCardinalSpline::to_curve has introduced a new segment in the interval [0,1]), displacing the old segment from [0,1] to [1,2]:

fn interpolate(t: f32) -> Vec2 {
    let points = [
        vec2(-1.0, -20.0),
        vec2(3.0, 2.0),
        vec2(5.0, 3.0),
        vec2(9.0, 8.0),
    ];
    let my_curve = CubicCardinalSpline::new(0.3, points).to_curve();
    // Add 1 here to restore original behavior.
    my_curve.position(t + 1)
}
(Note that this does not provide identical output for values of t outside of the interval [0,1].)

On the other hand, any user who was specifying additional endpoint tangents simply to get the curve to pass through the right points (i.e. not requiring exactly the same output) can simply omit the endpoints that were being supplied only for control purposes.

Replace Point with VectorSpace #
PR #12747
Math
The Point trait has been replaced by VectorSpace. These traits are very similar, with a few minor changes:

VectorSpace implementations must now provide the ZERO constant.
VectorSpace now requires the Div<f32, Output = Self> and Neg trait bounds.
VectorSpace no longer requires the Add<f32, Output = Self>, Sum, and PartialEq trait bounds.
For most cases you can replace all Point usage with VectorSpace, but you may have to make further changes if you depend on anything in the list above.

UV-mapping change for Triangle2d #
PR #12686
Math
The UV-mapping of Triangle2d has changed with this PR: the main difference is that the UVs are no longer dependent on the triangle’s absolute coordinates but instead follow translations of the triangle itself in its definition. If you depended on the old UV-coordinates for Triangle2d, then you will have to update affected areas to use the new ones which can be briefly described as follows:

The first coordinate is parallel to the line between the first two vertices of the triangle.
The second coordinate is orthogonal to this, pointing in the direction of the third point.
Generally speaking, this means that the first two points will have coordinates [_, 0.], while the third coordinate will be [_, 1.], with the exact values depending on the position of the third point relative to the first two. For acute triangles, the first two vertices always have UV-coordinates [0., 0.] and [1., 0.] respectively. For obtuse triangles, the third point will have coordinate [0., 1.] or [1., 1.], with the coordinate of one of the two other points shifting to maintain proportionality.

For example:

The default Triangle2d has UV-coordinates [0., 0.], [0., 1.], [0.5, 1.].
The triangle with vertices vec2(0., 0.), vec2(1., 0.), vec2(2., 1.) has UV-coordinates [0., 0.], [0.5, 0.], [1., 1.].
The triangle with vertices vec2(0., 0.), vec2(1., 0.), vec2(-2., 1.) has UV-coordinates [2./3., 0.], [1., 0.], [0., 1.].
Use Vec3A for 3D bounding volumes and raycasts #
PR #13087
Math
Aabb3d, BoundingSphere, and RayCast3d now use Vec3A instead of Vec3 internally. Vec3A is the SIMD-accelerated form of Vec3, so it should provide performance improvements without visible changes in behavior.

If you manually construct any of the affected structs, you will have to convert into a Vec3A.

// 0.13
let x = Vec3::new(5.0, -2.0);

let aabb = Aabb3d {
    min: Vec3::ZERO,
    max: x,
};

// 0.14
let x = Vec3::new(5.0, -2.0);

let aabb = Aabb3d {
    // Both variants are very similar, so you can usually replace `Vec3` with `Vec3A`.
    min: Vec3A::ZERO,
    // In cases where you cannot, use the `From` and `Into` traits.
    max: x.into(),
};
Update glam to 0.27 #
PR #12757
Math
glam has been updated from 0.25 to 0.27. Please view the changelog for both 0.26 and 0.27 to update your code.

The largest breaking change is that the fract() method for vector types now evaluates as self - self.trunc() instead of self - self.floor(). If you require the old behavior, use the fract_gl() method instead.

Common MeshBuilder trait #
PR #13411
Math
Rendering
All shape mesh builders (ConeMeshBuilder, PlaneMeshBuilder, etc.) have a method build() for converting into a Mesh. This method has been made into a common trait MeshBuilder. You will need to import this trait if you use build() but do not use the prelude.

Add angle range to TorusMeshBuilder #
PR #13605
Math
Rendering
TorusMeshBuilder is no longer Copy because it contains a RangeInclusive (x..=y) for the angle range. You will need to call clone() manually in any scenario where it was implicitly copied before.

Add subdivisions to PlaneMeshBuilder #
PR #13580
Math
Rendering
In 0.13 the Plane type was deprecated in favor of Plane2d and Plane3d. The new plane types did not provide a method for subdivision, which is now amended.

If you used the Plane::subdivisions property, you now need to convert a Plane3d into a PlaneMeshBuilder.

// 0.13
let plane = Plane {
    subdivisions: 10,
    ..default()
};

// 0.14
let plane = Plane3d::default().mesh().subdivisions(10);
Make Transform::rotate_axis and Transform::rotate_local_axis use Dir3 #
PR #12986
Math
Transform
Transform::rotate_axis() and Transform::rotate_local_axis() now require a Dir3 instead of a Vec3 because the axis is expected to be normalized. In general you can call Dir3::new() with a Vec3, which will automatically normalize it, though you must handle the Result in case the vector is invalid.

Note that most constants like Vec3::X have a corresponding Dir3 variant, such as Dir3::X.

Use Dir3 for local axis methods in GlobalTransform #
PR #13264
Math
Transform
The GlobalTransform component's directional axis methods (right(), left(), up(), down(), back(), forward()) have been updated from returning a Vec3 to a Dir3. Dir3 implements Deref<Target = Vec>, but if you need mutable access you can call Vec3::from().

Fix Ord and PartialOrd differing for FloatOrd #
PR #12711
Math
Utils
FloatOrd's PartialOrd implementation used to differ in behavior from its Ord implementation, but it has since been fixed so they both now match. The current implementation of PartialOrd will never return None, as it now falls back to the Ord implementation. If you depended on this mismatched behavior, consider using the PartialOrd implementation on the inner f32.

Move FloatOrd into bevy::math #
PR #12732
Math
Utils
FloatOrd has been moved to into the bevy::math module. Please update your import statements:

// 0.13
use bevy::utils::FloatOrd;

// 0.14
use bevy::math::FloatOrd;
Reflection #
Register missing types manually #
PR #12314
Reflection
Many external types are no longer registered into the type registry by Bevy's default plugin. Generally, only types used by other Bevy types (due to the new recursive registration) will be registered by default. If you were using reflection features with types from std or glam you may need to manually register them.

App::new().register_type::<DMat3>();
Change ReflectSerialize trait bounds #
PR #12024
Reflection
ReflectSerialize now requires the TypePath and FromReflect trait bounds instead of Reflect. You will have to implement these traits if you previously opted-out of them. For instance, if you used #[reflect(type_path = false)] or #[reflect(from_reflect = false)], you will have to remove them.

Recursive registration of types #
PR #5781
Reflection
It is now possible to recursively register types, but in doing so all (unignored) reflected fields need to implement GetTypeRegistration. This is automatically done when Reflect is derived, but manual implementations will need to also implement GetTypeRegistration.

#[derive(Reflect)]
struct Foo<T: FromReflect> {
    data: MyCustomType<T>
}

// 0.13
impl<T: FromReflect> Reflect for MyCustomType<T> {
    // ...
}

// 0.14
impl<T: FromReflect + GetTypeRegistration> Reflect for MyCustomType<T> {
    // ...
}

impl<T: FromReflect + GetTypeRegistration> GetTypeRegistration for MyCustomType<T> {
    // ...
}
Rename UntypedReflectDeserializer to ReflectDeserializer #
PR #12721
Reflection
UntypedReflectDeserializer has been renamed to ReflectDeserializer. Any usage will need to be updated accordingly:

// 0.13
let reflect_deserializer = UntypedReflectDeserializer::new(&registry);

// 0.14
let reflect_deserializer = ReflectDeserializer::new(&registry);
Implement Reflect for Result as an enum #
PR #13182
Reflection
Result's Reflect implementation has been changed to make it a ReflectKind::Enum instead of a ReflectKind::Value. This increases its consistency with Option and allows for inspection of its contents.

Now, Result<T, E> no longer requires both T and E to be Clone, but instead requires them to implement FromReflect. Additionally, <Result<T, E> as Reflect>::reflect_* now returns the Enum variant instead of Value.

Serialize scene with &TypeRegistry and rename serialize_ron() to serialize() #
PR #12715
Reflection
Scenes
SceneSerializer and all related serialization helpers now take &TypeRegistry instead of &TypeRegistryArc. You can access the former from the latter with TypeRegistryArc::read().

Furthermore, DynamicScene::serialize_ron() has been renamed to serialize(). This has been done to highlight that this function is not about serializing into RON specifically, but rather the official Bevy scene format (.scn / .scn.ron). This leaves room to change the format in the future, if need be.

// 0.13
let world = World::new();
let scene = DynamicScene::from_world(&world);

let type_registry_arc: &TypeRegistryArc = &**world.resource::<AppTypeRegistry>();

let serialized_scene = scene.serialize_ron(type_registry_arc).unwrap();

// 0.14
let world = World::new();
let scene = DynamicScene::from_world(&world);

let type_registry_arc: &TypeRegistryArc = &**world.resource::<AppTypeRegistry>();

// We now need to retrieve the inner `TypeRegistry`.
let type_registry = type_registry_arc.read();

// `serialize_ron` has been renamed to `serialize`, and now takes a reference to `TypeRegistry`.
let serialized_scene = scene.serialize(&type_registry).unwrap();
Rendering #
Make default behavior for BackgroundColor and BorderColor more intuitive #
PR #14017
Rendering
UI
BackgroundColor no longer tints the color of images in ImageBundle or ButtonBundle. Set UiImage::color to tint images instead. Furthermore, the new default texture for UiImage is now a transparent white square. Use UiImage::solid_color to quickly draw debug images. Finally, the default value for BackgroundColor and BorderColor is now transparent. Set the color to white manually to return to previous behavior.

Rename Camera3dBundle::dither to deband_dither #
PR #11939
Rendering
Camera3dBundle::dither has been renamed to deband_dither to make it consistent with Camera2dBundle. If you construct or access this field, you will have to update your usage.

Rename affine_to_square() to affine3_to_square() #
PR #11904
Rendering
The affine_to_square() shader function has been renamed to affine3_to_square, in order to give room for affine2_to_square. Please update your import statements and usages accordingly. (Note that this is not Rust, but instead WGSL.)

// 0.13
#import bevy_render::maths::affine_to_square

// 0.14
#import bevy_render::maths::affine3_to_square
Move AlphaMode into bevy::render #
PR #12012
Rendering
AlphaMode has been moved from bevy::pbr to bevy::render. If you import them directly, you will need to update your import statements.

// 0.13
use bevy::pbr::AlphaMode;

// 0.14
use bevy::render::alpha::AlphaMode;
Use UVec2 when working with texture dimensions #
PR #11698
Rendering
GpuImage, TextureAtlasLayout, TextureAtlasBuilder, DynamicAtlasTextureBuilder, and FontAtlas have been changed to store their dimensions in integers rather than floating point numbers, in order to increase consistency with the underlying texture data. Instances of Vec2 and Rect have been replaced with UVec2 and URect.

Migrating this is tricky because the conversion from f32 to u32 is lossy. If you work with constants, you can simply rewrite the code. If you work with user input, you could choose to simply discard the decimal (1.4 as u32) or round it first (1.83.round() as u32).

Fix CameraProjectionPlugin not implementing Plugin in some cases #
PR #11766
Rendering
There was a bug with CameraProjectionPlugin<T> where it would sometimes not implement Plugin if T did not implement Component and GetTypeRegistration. This has now been fixed by requiring T: CameraProjection + Component + GetTypeRegistration.

Replace random1D() with rand_f() shader function #
PR #11956
Rendering
The bevy_pbr::utils::random1D() shader function has been replaced by the similar bevy_pbr::utils::rand_f(). Note that if you convert the returned f32 to a different data type, you may be interested in rand_u() which returns a u32 and rand_vec2f() which returns a vec2<f32>.

Intern mesh vertex buffer layouts #
PR #12216
Rendering
Duplicate MeshVertexBufferLayouts are now combined into a single object, MeshVertexBufferLayoutRef, which contains an atomically-reference-counted (Arc) pointer to the layout. By interning these layouts, the results of PartialEq can be cached, resulting in a speedup in rendering. Code that was using MeshVertexBufferLayout may need to be updated to use MeshVertexBufferLayoutRef instead.

Make GpuArrayBufferIndex::index a u32 #
PR #12250
Rendering
GpuArrayBufferIndex::index is now a u32 instead of a NonMaxU32, since restricting the number isn't necessary anymore. Please update any usage to use u32 instead.

Allow disabling shadows through MaterialPlugin #
PR #12538
Rendering
MaterialPlugin now has a shadows_enabled property. If you manually constructed this plugin, you may need to set it. By default it is true, but you can disable shadows entirely by setting it to false.

Remove SpritePipeline::COLORED #
PR #12559
Rendering
The COLORED flag of SpritePipelineKey has been removed, since it is no longer used. In doing so, the raw values of HDR, TONEMAP_IN_SHADER, and DEBAND_DITHER have changed. If you are manually converting a u32 into SpritePipelineKey, you may need to update it.

Sorted and binned render phase items, resources, and non-meshes #
PR #12453
Rendering
Usage of PhaseItem has been split into BinnedPhaseItem and SortedPhaseItem. If you have custom PhaseItems you will need to choose one of the new types. Notably some phases must be Sorted (such as Transparent and Transmissive), while others can be Binned. Effectively Sorted is "what Bevy did before" and Binned is new, and the point of this change is to avoid sorting when possible for improved performance.

If you're looking for a quick migration, consider picking SortedPhaseItem which requires the fewest code changes.

If you're looking for higher performance (and your phase doesn’t require sorting) you may want to pick BinnedPhaseItem. Notably bins are populated based on BinKey and everything in the same bin is potentially batchable.

If you are only consuming these types, then a Query for a type like &mut RenderPhase<Transparent2d> will become a Resource as such:

mut transparent_render_phases: ResMut<ViewSortedRenderPhases<Transparent2d>>
ViewSortedRenderPhases and ViewBinnedRenderPhases are used in accordance with which phase items you're trying to access (sorted or binned).

Examples of SortedPhaseItemss:

Transmissive3d
Transparent2d
Transparent3d
TransparentUi
Examples of BinnedPhaseItems include:

Opaque3d
Opaque3dPrepass
Opaque3dDeferred
AlphaMask3d
AlphaMask3dPrepass
AlphaMask3dDeferred
Shadow
If you do not have a mesh (such as for GPU-driven particles or procedural generation) and want to use the new binned behavior, the BinnedRenderPhase includes a non_mesh_items collection which correlates with the BinnedRenderPhaseType. This type is used when adding items to the BinnedRenderPhase.

It may be additionally useful to checkout the new custom_phase_item example which details some of the new APIs.

GPU frustum culling #
PR #12889
Rendering
For PhaseItems, the dynamic_offset: Option<NonMaxU32> field is now extra_index: PhaseItemExtraIndex, which wraps a u32. Instead of None, use PhaseItemExtraIndex::NONE.

This change affects AlphaMask3d, AlphaMask3dDeferred, AlphaMask3dPrepass, Opaque2d, Opaque3dDeferred, Opaque3dPrepass, Shadow, Transmissive3d, Transparent2d, Transparent3d, and TransparentUi.

Remove DeterministicRenderingConfig #
PR #12811
Rendering
DeterministicRenderingConfig has been removed because its only property, stable_sort_z_fighting, is no longer needed. Z-fighting has been generally removed now that opaque items are binned instead of sorted.

Optimize queue_material_meshes and remove some bit manipulation #
PR #12791
Rendering
The primitive_topology field on GpuMesh is now an getter method: GpuMesh::primitive_topology().

For performance reasons, MeshPipelineKey has been split into BaseMeshPipelineKey, which lives in bevy::render, and MeshPipelineKey, which lives in bevy::pbr. These two may be combined with bitwise-or to produce the final MeshPipelineKey.

let base_pipeline_key = BaseMeshPipelineKey::all();
let pbr_pipeline_key = MeshPipelineKey::all();

let pipeline_key: u64 = base_pipeline_key.bits() | pbr_pipeline_key.bits();
Disable RAY_QUERY and RAY_TRACING_ACCELERATION_STRUCTURE by default #
PR #12862
Rendering
The RAY_QUERY and RAY_TRACING_ACCELERATION_STRUCTURE wgpu features are now disabled by default, due to some users having their program crash while initializing. (The wgpu issue for this can be found here.)

If you use these features, you will need to re-enable them through WgpuSettings::features:

let mut settings = WgpuSettings::default();

// Enable `RAY_QUERY` and `RAY_TRACING_ACCELERATION_STRUCTURE`, along with the defaults.
settings.features |= WgpuFeatures::RAY_QUERY | WgpuFeatures::RAY_TRACING_ACCELERATION_STRUCTURE;

App::new()
    .add_plugins(DefaultPlugins.set(RenderPlugin {
        render_creation: settings.into(),
        ..default()
    }))
    .run()
Note that WgpuSettings::default() automatically configures good default flags for Bevy, while WgpuFeatures::default() is the equivalent of WgpuFeatures::empty().

Upload previous frame's inverse_view to GPU #
PR #12902
Rendering
PreviousViewProjection has been renamed to PreviousViewData and PreviousViewProjectionUniformOffset has been renamed to PreviousViewUniformOffset. Additionally, a few systems have been renamed:

update_previous_view_projections to update_previous_view_data
extract_camera_previous_view_projection to extract_camera_previous_view_data
prepare_previous_view_projection_uniforms to prepare_previous_view_uniforms
Generate MeshUniforms on the GPU when available. #
PR #12773
Rendering
Custom render phases now need multiple systems beyond just batch_and_prepare_render_phase. Code that was previously creating custom render phases should now add a BinnedRenderPhasePlugin or SortedRenderPhasePlugin as appropriate, instead of directly adding batch_and_prepare_render_phase.

Add texture coord flipping to StandardMaterial #
PR #12917
Rendering
Quad was deprecated in 0.13, though its replacement Rectangle did not provide a clear replacement for Quad::flip. This has been amended: now you can call flip() on any StandardMaterial.

Please note that Quad::flip was specifically horizontal flipping, though StandardMaterial::flip() supports both vertical and horizontal flipping.

Rename ShadowFilteringMethod's Castano13 and Jimenez14 variants #
PR #12910
Rendering
ShadowFilteringMethod::Castano13 and ShadowFilteringMethod::Jimenez14 have been renamed to Gaussian and Temporal respectively to leave room for expansion in the future, though the corresponding authors are still credited in the documentation.

Store lists of VisibleEntities separately #
PR #12582
Rendering
check_visibility() and VisibleEntities now store the four types of renderable entities–-2D meshes, 3D meshes, lights, and UI elements-–separately. If your custom rendering code examines VisibleEntities, it will now need to specify which type of entity it’s interested in using the WithMesh2d, WithMesh, WithLight, and WithNode types respectively. If your app introduces a new type of renderable entity, you’ll need to add an instance of the check_visibility system with the appropriate query filter to the main world schedule to accommodate your new component or components. For example:

struct MyCustomRenderable;

App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(
        PostUpdate,
        check_visibility::<With<MyCustomRenderable>>
            .in_set(VisibilitySystems::CheckVisibility)
    )
    .run();
Make Text require SpriteSource #
PR #12945
Rendering
Text now requires a SpriteSource marker component in order to render. This component has been added to Text2dBundle and may need to be specified if ..default() isn't used.

Expose desired_maximum_frame_latency #
PR #12954
Rendering
The desired_maximum_frame_latency field has been added to Window and ExtractedWindow. It is an Option<NonZero<u32>> that hints the maximum number of queued frames allowed on the GPU. Higher values may result in smoother frames and avoids freezes due to CPU-GPU data upload, but all at the cost of higher input latency. Setting desired_maximum_frame_latency to None will make it fall back to the default value, which is currently 2.

Merge VisibilitySystems frusta variants #
PR #11808
Rendering
VisibilitySystems's UpdateOrthographicFrusta, UpdatePerspectiveFrusta, and UpdateProjectionFrusta variants have been removed in favor of the new VisibilitySystems::UpdateFrusta variant.

Expand color grading #
PR #13121
Rendering
The ColorGrading component has been expanded to support individually configuring the shadow, midtone, and highlight sections. If you configured the gamma or pre_saturation fields previously, you will now have to set them for all sections:

// 0.13
let color_grading = ColorGrading {
    gamma: 2.0,
    pre_saturation: 0.8,
    ..default()
};

// 0.14
let mut color_grading = ColorGrading::default();

for section in color_grading.all_sections_mut() {
    section.gamma = 2.0;
    // `pre_saturation` has been renamed to `saturation`.
    section.saturation = 0.8;
}
Additionally, the post_saturation and exposure fields have been moved specifically to the new global field, which is a ColorGradingGlobal that supports more operations for the image as a whole.

// 0.13
let color_grading = ColorGrading {
    post_saturation: 1.2,
    exposure: 0.4,
};

// 0.14
let color_grading = ColorGrading {
    global: ColorGradingGlobal {
        post_saturation: 1.2,
        exposure: 0.4,
        ..default()
    },
    ..default()
};
Rename BufferVec to RawBufferVec #
PR #13199
Rendering
BufferVec has been renamed to RawBufferVec because a new implementation of BufferVec has taken its name. The new BufferVec<T> no longer requires T: Pod, but instead ShaderType from the encase library.

For most cases you can simply switch to using RawBufferVec, but if you have more complex data you may be interested in the new BufferVec implementation.

Implement clearcoat #
PR #13031
Rendering
The lighting functions in the pbr_lighting WGSL module now have clearcoat parameters if STANDARD_MATERIAL_CLEARCOAT is defined. Additionally, the R reflection vector parameter has been removed from some lighting functions, as it was unused.

Split Node2d::MainPass #
PR #12982
Rendering
Node2d::MainPass has been split into 3 separate phases: StartMainPass, MainTransparentPass, and EndMainPass. If you previously used MainPass to order your own custom nodes, you now need to order them relative to StartMainPass and EndMainPass.

Remove limit on RenderLayers #
PR #13317
Rendering
There is no longer a limit on the total amount of RenderLayers, and so the TOTAL_LAYERS associated constant and all() constructor have been removed. Entities expecting to be visible on all layers, such as lights, should either create a constant listing all known layers used by the application or compute the active layers that are in use at runtime.

The Copy trait is no longer implemented on RenderLayers. Instead you should use the .clone() function from the Clone trait which Renderlayers still implements.

Fix astronomic emissive colors required for bloom #
PR #13350
Rendering
Emissive color and camera exposure now play nicely with each other. Before, the emissive property of a StandardMaterial had to be massive (in the thousands) in order for effects such as bloom to be visible. This has been scaled down, so you may have to re-adjust your emissive colors.

// 0.13
StandardMaterial {
    emissive: Color::linear_rgb(23000.0, 9000.0, 3000.0),
    ..default()
}

// 0.14
StandardMaterial {
    // Much more reasonable! :)
    emissive: Color::linear_rgb(13.99, 5.32, 2.0),
    ..default()
}
You may also be interested in the StandardMaterial::emissive_exposure_weight property.

More idiomatic TextureAtlasBuilder #
PR #13238
Rendering
TextureAtlasBuilder has been modified to be more consistent with other builders. As part of this, most methods now return &mut Self instead of Self and finish() has been renamed to build().

// 0.13
let (texture_atlas_layout, texture) = TextureAtlasBuilder::default()
    .padding(UVec2::default())
    .format(TextureFormat::bevy_default())
    .finish()
    .unwrap();

// 0.14
let (texture_atlas_layout, texture) = TextureAtlasBuilder::default()
    .padding(UVec2::default())
    .format(TextureFormat::bevy_default());
    .build() // This is now `build()`.
    .unwrap();
Normalise matrix naming #
PR #13489
Rendering
All matrices have been renamed to follow the convention x_from_y in order to decrease confusion while increasing readability.

Frustum's from_view_projection, from_view_projection_custom_far and from_view_projection_no_far methods were renamed to from_clip_from_world, from_clip_from_world_custom_far and from_clip_from_world_no_far.
ComputedCameraValues::projection_matrix was renamed to clip_from_view.
CameraProjection::get_projection_matrix was renamed to get_clip_from_view (this affects implementations on Projection, PerspectiveProjection and OrthographicProjection).
ViewRangefinder3d::from_view_matrix was renamed to from_world_from_view.
PreviousViewData's members were renamed to view_from_world and clip_from_world.
ExtractedView's projection, transform and view_projection were renamed to clip_from_view, world_from_view and clip_from_world.
ViewUniform's view_proj, unjittered_view_proj, inverse_view_proj, view, inverse_view, projection and inverse_projection were renamed to clip_from_world, unjittered_clip_from_world, world_from_clip, world_from_view, view_from_world, clip_from_view and view_from_clip.
GpuDirectionalCascade::view_projection was renamed to clip_from_world.
MeshTransforms' transform and previous_transform were renamed to world_from_local and previous_world_from_local.
MeshUniform's transform, previous_transform, inverse_transpose_model_a and inverse_transpose_model_b were renamed to world_from_local, previous_world_from_local, local_from_world_transpose_a and local_from_world_transpose_b (the Mesh type in WGSL mirrors this, however transform and previous_transform were named model and previous_model).
Mesh2dTransforms::transform was renamed to world_from_local.
Mesh2dUniform's transform, inverse_transpose_model_a and inverse_transpose_model_b were renamed to world_from_local, local_from_world_transpose_a and local_from_world_transpose_b (the Mesh2d type in WGSL mirrors this).
In WGSL, bevy_pbr::mesh_functions, get_model_matrix and get_previous_model_matrix were renamed to get_world_from_local and get_previous_world_from_local.
In WGSL, bevy_sprite::mesh2d_functions::get_model_matrix was renamed to get_world_from_local.
Rename "point light" to "clusterable object" in cluster contexts #
PR #13654
Rendering
In the PBR shaders, point_lights is now known as clusterable_objects, PointLight is now known as ClusterableObject, and cluster_light_index_lists is now known as clusterable_object_index_lists. This rename generalizes over clusterable objects, which adds room for light probes and decals in the future.

Make Mesh::merge() take a reference of Mesh #
PR #13710
Rendering
Mesh::merge() now takes &Mesh instead of Mesh. Because of this, you can now share the same Mesh across multiple merge() calls without cloning it.

Store ClearColorConfig instead of LoadOp<Color> in CameraOutputMode #
PR #13419
Rendering
CameraOutputMode::Write now stores a ClearColorConfig instead of a LoadOp<Color>. Use the following table to convert between the two enums:

LoadOp<Color>	ClearColorConfig
Clear(color)	Custom(color)
Load	None
ClearColorConfig has an additional variant, Default, which inherits the clear color from the ClearColor resource.

wgpu 0.20 #
PR #13186
Rendering
Bevy now depends on wgpu 0.20, naga 0.20, and naga_oil 0.14. If you manually specify any of these crates in your Cargo.toml, make sure to update their versions to prevent them from being duplicated.

Furthermore, timestamps inside of encoders are now disallowed on WebGPU (though they still work on native). Use the TIMESTAMP_QUERY_INSIDE_ENCODERS feature to check for support.

Deprecate SpriteSheetBundle and AtlasImageBundle #
PR #12218
Rendering
UI
SpriteSheetBundle has been deprecated as part of a style and maintenance-motivated move towards optional components that add functionality, rather than a proliferation of bundles. Insert the TextureAtlas component alongside a SpriteBundle instead.

// 0.13
commands.spawn(SpriteSheetBundle {
    texture,
    atlas: TextureAtlas {
        layout,
        ..default()
    },
    ..default()
});
// 0.14
commands.spawn((
    SpriteBundle {
        texture,
        ..default()
    },
    TextureAtlas {
        layout,
        ..default()
    },
));
AtlasImageBundle has been deprecated. Insert the TextureAtlas component alongside an ImageBundle instead.

// 0.13
commands.spawn(AtlasImageBundle {
    image,
    atlas: TextureAtlas {
        layout,
        ..default()
    },
    ..default()
});
// 0.14
commands.spawn((
    ImageBundle {
        image,
        ..default()
    },
    TextureAtlas {
        layout,
        ..default()
    },
));
Decouple BackgroundColor from UiImage #
PR #11165
Rendering
UI
The BackgroundColor component now renders a solid-color background behind UiImage instead of tinting its color. Use the color field of UiImage for tinting.

// 0.13
ButtonBundle {
    image: UiImage::new(my_texture),
    background_color: my_color_tint.into(),
    ..default()
}

// 0.14
ButtonBundle {
    image: UiImage::new(my_texture).with_color(my_color_tint),
    ..default()
}
Some UI systems have been split or renamed.

bevy_ui::RenderUiSystem::ExtractNode has been split into ExtractBackgrounds, ExtractImages, ExtractBorders, and ExtractText.
bevy_ui::extract_uinodes has been split into extract_uinode_background_colors and extract_uinode_images.
bevy_ui::extract_text_uinodes has been renamed to extract_uinode_text.
Remove generic camera from extract_default_ui_camera_view() system #
PR #13462
Rendering
UI
The bevy::ui::render::extract_default_ui_camera_view() system is now hard-wired to both the Camera2d and Camera3d components, and is no longer added twice for each type.

This change was made to fix a bug introduced after moving render phases to resources. The first thing this system does is clear out all entities from the previous frame. By having two separate systems, one was always clearing out the other, causing some entities to not be rendered.

Rename need_new_surfaces() system to need_surface_configuration() #
PR #12055
Rendering
Windowing
The need_new_surfaces() system has been renamed need_surface_configuration() as part of a bug fix where Bevy apps would crash on iOS when the screen orientation was changed.

Require windowing backends to store windows in WindowWrapper #
PR #12978
Rendering
Windowing
Windowing backends now need to store their window in the new WindowWrapper, so that Bevy can control when it is dropped. This fixes a number of bugs and crashes related to the window being dropped before the pipelined renderer is finished drawing to it.

Tasks #
Add an index argument to parallel iteration helpers #
PR #12169
Tasks
Closures passed as arguments to par_chunk_map(), par_splat_map(), par_chunk_map_mut(), and par_splat_map_mut() now take an additional index argument specifying which part of the slice is being processed.

// 0.13
items.par_chunk_map(&task_pool, 100, |chunk| {
    // ...
});

// 0.14
items.par_chunk_map(&task_pool, 100, |_index, chunk| {
    // ...
});
UI #
Fix spawning NodeBundle destroying previous ones #
PR #12698
UI
There was a regression in 0.13.1 NodeBundles to destroy previous ones when spawned, and the original workaround was to add position_type: Absolute to all of the root nodes. This bug is now fixed, so you can remove the workaround.

Rename Rect::inset() to inflate() #
PR #13452
UI
Rect::inset(), IRect::inset(), and URect::inset() have been renamed to inflate() to fit the actual behavior.

Updates default font size to 24px #
PR #13603
UI
The default font size for TextStyle has been increased from 12px to 24px. If you preferred the original size, you can override it using the TextStyle::font_size property.

Utils #
Disentangle bevy::utils / bevy::core's re-exported crates #
PR #12313
Utils
bevy::utils no longer re-exports petgraph, uuid, nonmax, smallvec, or thiserror. Additionally, bevy::core no longer re-exports bytemuck's bytes_of, cast_slice, Pod, and Zeroable.

If you need any of these as dependencies, you can add them to your own Cargo.toml.

Windowing #
Re-add Window::fit_canvas_to_parent #
PR #11278
Windowing
Window::fit_canvas_to_parent is a property on WASM that automatically resizes the canvas element to the size of its parent, usually the screen. It was removed in 0.13, but that ended up being problematic because many users depended on its behavior when they could not customize the CSS. It has now been re-added to account for this need.

Remove window from WinitWindows when it is closed #
PR #12749
Windowing
WinitWindows::get_window_entity now returns None after a window is closed, instead of an entity that no longer exists.

Make window close the frame after it is requested #
PR #13236
Windowing
Windows now close a frame after their exit has been requested in order to fix several regressions. If you have custom exit logic, ensure that it does not rely on the app exiting the same frame the window is closed.

Upgrade to winit 0.30 #
PR #13366
Windowing
The custom UserEvent is now renamed as WakeUp, used to wake up the loop if anything happens outside the app (a new custom_user_event shows this behavior.

The internal UpdateState has been removed and replaced internally by the AppLifecycle. When changed, the AppLifecycle is sent as an event.

The UpdateMode now accepts only two values: Continuous and Reactive, but the latter exposes 3 new properties to enable reactive to device, user or window events. The previous UpdateMode::Reactive is now equivalent to UpdateMode::reactive(), while UpdateMode::ReactiveLowPower to UpdateMode::reactive_low_power().

The ApplicationLifecycle has been renamed as AppLifecycle, and now contains the possible values of the application state inside the event loop:

Idle: the loop has not started yet
Running (previously called Started): the loop is running
WillSuspend: the loop is going to be suspended
Suspended: the loop is suspended
WillResume: the loop is going to be resumed
Note: the Resumed state has been removed since the resumed app is just running.

Finally, now that winit enables this, it extends the WinitPlugin to support custom events.

Without area #
Fix Node2d typo #
PR #12038
Node2d::ConstrastAdaptiveSharpening from bevy::core_pipeline::core_2d::graph has been renamed to fix a typo. It was originally Constrast, but is now Contrast.

// 0.13
Node2D::ConstrastAdaptiveSharpening

// 0.14
Node2D::ContrastAdaptiveSharpening
Update to fixedbitset 0.5 #
PR #12512
Access::grow from bevy::ecs::query has been removed. Many operations now automatically grow the capacity.

// 0.13
let mut access = Access::new();
access.grow(1);
// Other operations...

// 0.14
let mut access = Access::new();
// Other operations...
Move WASM panic handler from LogPlugin to PanicHandlerPlugin #
PR #12557
LogPlugin used to silently override the panic handler on WASM targets. This functionality has now been split out into the new PanicHandlerPlugin, which was added to DefaultPlugins.

If you want nicer error messages on WASM but don't use DefaultPlugins, make sure to manually add PanicHandlerPlugin to the app.

App::new()
    .add_plugins((MinimalPlugins, PanicHandlerPlugin))
    .run()
NEXT
0.12 to 0.13
PREVIOUS
0.14 to 0.15
Improve this page
Bevy engine's GitHub repo
Bevy Discord server
Bevy Mastodon account
Bevy Twitter account
Bevy subreddit
Bevy news feed

Three horizontal lines stacked on top of eachother
Bevy Engine
Migration Guides
Bevy Engine
A saltire or x-cross
Main Menu
Migration Guides
Introduction
0.14 to 0.15
Accessibility
Bump accesskit to 0.16
Remove accesskit re-export from bevy_a11y
Animation
Deprecate is_playing_animation
Fix additive blending of quaternions
Implement additive blending for animation graphs.
Implement animation masks, allowing fine control of the targets that animations affect.
Impose a more sensible ordering for animation graph evaluation.
Make AnimationPlayer::start and ::play work accordingly to documentation
Replace Handle<AnimationGraph> component with a wrapper
Curve-based animation
Allow animation clips to animate arbitrary properties.
App
Add features to switch NativeActivity and GameActivity usage
Allow ordering variable timesteps around fixed timesteps
Remove deprecated bevy_dynamic_plugin
Remove need for EventLoopProxy to be NonSend
Remove second generic from .add_before, .add_after
Handle Ctrl+C in the terminal properly
Assets
AssetServer LoadState API consistency
Cleanup unneeded lifetimes in bevy_asset
Generalized Into<AssetSourceId> and Into<AssetPath> Implementations over Lifetime
Improve error handling for AssetServer::add_async
Remove incorrect equality comparisons for asset load error types
Replace AsyncSeek trait by AsyncSeekForward for Reader to address #12880
bevy_asset: Improve NestedLoader API
Deprecate LoadAndSave Asset Processor
AssetReader::read now returns an opaque type
Make gLTF node children Handle instead of objects
Split TextureAtlasSources out of TextureAtlasLayout and make TextureAtlasLayout serializable
Export glTF skins as a Gltf struct
Replace bevy_utils::CowArc with atomicow
Audio
Migrate audio to required components
Build-System
Use en-us locale for typos
Color
Adds back in way to convert color to u8 array, implemented for the two RGB color types, also renames Color::linear to Color::to_linear.
Update Grid Gizmo to use Color
Core
Rename bevy_core::name::DebugName to bevy_core::name::NameOrEntity
Cross-Cutting
Remove the Component trait implementation from Handle
Fix floating point math
Don't reëxport bevy_image from bevy_render
Add custom cursors
Diagnostics
Don't ignore draw errors
ECS
Make World::flush_commands private
Add FilteredAccess::empty and simplify the implementation of update_component_access for AnyOf/Or
Add mappings to EntityMapper
Add query reborrowing
Allow World::entity family of functions to take multiple entities and get multiple references back
Change World::inspect_entity to return an Iterator instead of Vec
Created an EventMutator for when you want to mutate an event before reading
Deprecate Events::oldest_id
Deprecate get_or_spawn
Enable EntityRef::get_by_id and friends to take multiple ids and get multiple pointers back
EntityRef/Mut get_components (immutable variants only)
Fix soudness issue with Conflicts involving read_all and write_all
Follow up to cached run_system
List components for QueryEntityError::QueryDoesNotMatch
Make QueryFilter an unsafe trait
Make QueryState::transmute&co validate the world of the &Components used
Re-name and Extend Run Conditions API
Remove redundant information and optimize dynamic allocations in Table
Removed Type Parameters from Observer
Rename Add to Queue for methods with deferred semantics
Rename App/World::observe to add_observer, EntityWorldMut::observe_entity to observe.
Rename Commands::register_one_shot_system -> register_system
Rename init_component & friends
Rename observe to observe_entity on EntityWorldMut
Rename push children to add children
Require &mut self for World::increment_change_tick
Simplify run conditions
Support more kinds of system params in buildable systems.
Support systems that take references as input
System param validation for observers, system registry and run once
Track source location in change detection
Update trigger_observers to operate over slices of data
IntoSystemConfigs::chain_ignore_deferred's return type fix
bevy_ecs: Special-case Entity::PLACEHOLDER formatting
change return type of World::resource_ref to Ref
Minimal Bubbling Observers
Make ComponentTicks field public
Change ReflectMapEntities to operate on components before insertion
Bubbling observers traversal should use query data
Migrate bevy picking
ReflectBundle::remove improvement
Use crate: disqualified
Migrate cameras to required components
Migrate fog volumes to required components
Migrate meshes and materials to required components
Migrate motion blur, TAA, SSAO, and SSR to required components
Migrate reflection probes to required components
Migrate visibility to required components
Synchronize removed components with the render world
Deprecate SpatialBundle
Migrate bevy_transform to required components
Gizmos
Consistency between Wireframe2d and Wireframe
Fix Gizmos warnings and doc errors when a subset of features are selected
Fix arc_2d Gizmos
Improve the gizmo for Plane3d, reusing grid
Making bevy_render an optional dependency for bevy_gizmos
Use Isometry in bevy_gizmos wherever we can
Use u32 for all resolution/subdivision fields in bevy_gizmos
Switch rotation & translation in grid gizmos
Make TrackedRenderPass::set_vertex_buffer aware of slice size
Hierarchy
Only propagate transforms entities with GlobalTransforms.
Input
Gamepad improvements
Implement gamepads as entities
Remove ReceivedCharacter
Use Name component for gamepad
Picking event ordering
Math
Added new method to Cone 3D primitive
Basic integration of cubic spline curves with the Curve API
Disallow empty cubic and rational curves
Refactor Bounded2d/Bounded3d to use isometries
Rename Rot2::angle_between to Rot2::angle_to
Use Dir2/Dir3 instead of Vec2/Vec3 for Ray2d::new/Ray3d::new
Use a well defined type for sides in RegularPolygon
bevy_reflect: Update EulerRot to match glam 0.29
Use u32 for resolution/subdivision in primitive meshing
Picking
Add flags to SpritePlugin and UiPlugin to allow disabling their picking backend (without needing to disable features).
rename Drop to bevy::picking::events::DragDrop to unclash std::ops:Drop
Reflection
Dedicated Reflect implementation for Set-like things
Implement FromIterator/IntoIterator for dynamic types
Make drain take a mutable borrow instead of Box<Self> for reflected Map, List, and Set.
Remove Return::Unit variant
Serialize and deserialize tuple struct with one field as newtype struct
bevy_reflect: Add DynamicTyped trait
bevy_reflect: Add ReflectDeserializerProcessor
bevy_reflect: Add Type type
bevy_reflect: Nested TypeInfo getters
bevy_reflect: Refactor serde module
bevy_reflect: Replace "value" terminology with "opaque"
reflect: implement the unique reflect rfc
Use FromReflect when extracting entities in dynamic scenes
move ShortName to bevy_reflect
Rendering
Retained Rendering
Add 2d opaque phase with depth buffer
Add RenderSet::FinalCleanup for World::clear_entities
Add feature requirement info to image loading docs
Add support for environment map transformation
Add support for skybox transformation
Added feature switch to default Standard Material's new anisotropy texture to off
Added visibility bitmask as an alternative SSAO method
Adding alpha_threshold to OrderIndependentTransparencySettings for user-level optimization
Adds ShaderStorageBuffer asset
Allow mix of hdr and non-hdr cameras to same render target
Allow volumetric fog to be localized to specific, optionally voxelized, regions.
Attempt to remove component from render world if not extracted.
Bind only the written parts of storage buffers.
Changed Mesh::attributes* functions to return MeshVertexAttribute
Expose Pipeline Compilation Zero Initialize Workgroup Memory Option
Feature-gate all image formats
Fix Mesh allocator bug and reduce Mesh data copies by two
Improve API for scaling orthographic cameras
Lighting Should Only hold Vec<Entity> instead of TypeId<Vec<Entity>>
Migrate bevy_sprite to required components
Migrate lights to required components
Move ImageLoader and CompressedImageSaver to bevy_image.
Move Msaa to component
Only use the AABB center for mesh visibility range testing if specified.
Pack multiple vertex and index arrays together into growable buffers.
Reduce the clusterable object UBO size below 16384 for WebGL 2.
Refactor AsBindGroup to use a associated SystemParam.
Remove AVIF feature
Remove OrthographicProjection.scale (adopted)
Rename rendering components for improved consistency and clarity
Replace the wgpu_trace feature with a field in bevy_render::settings::WgpuSettings
Replaced implicit emissive weight with default.
Return Results from Camera's world/viewport conversion methods
Rewrite screenshots.
Split OrthographicProjection::default into 2d & 3d (Adopted)
Split out bevy_mesh from bevy_render
Using Cas instead of CAS #14341
Virtual Geometry changes
Wgpu 0.20
check sampler type in as_bind_group derives
cleanup bevy_render/lib.rs
Fix UI texture atlas with offset
Make default behavior for BackgroundColor and BorderColor more intuitive
Optional UI rendering
use precomputed border values
Inverse bevy_render bevy_winit dependency and move cursor to bevy_winit
Scenes
Align Scene::write_to_world_with to match DynamicScene::write_to_world_with
Align Scene::write_to_world_with to match DynamicScene::write_to_world_with
Change SceneInstanceReady to trigger an observer.
Migrate scenes to required components
Send SceneInstanceReady when spawning any kind of scene
explicitly mention component in methods on DynamicSceneBuilder
Tasks
Support on_thread_spawn and on_thread_destroy for TaskPoolPlugin
Text
Text Rework cleanup
Text rework
Uncouple DynamicTextureAtlasBuilder from assets
split up TextStyle
Add the ability to control font smoothing
Cosmic text
Time
aligning public apis of Time,Timer and Stopwatch
UI
Add UI GhostNode
Clean up UiSystem system sets
Migrate UI bundles to required components
Move TextureAtlas into UiImage and remove impl Component for TextureAtlas
Only use physical coords internally in bevy_ui
Overflow clip margin
Remove custom rounding
Remove useless Direction field
Rename BreakLineOn to LineBreak
Replace Handle<M: UiMaterial> component with UiMaterialHandle wrapper
Simplified ui_stack_system
UiImage -> ImageNode, UiImageSize -> ImageNodeSize
Explicitly order CameraUpdateSystem before UiSystem::Prepare
Utils
Allow bevy_utils in no_std Contexts
Remove allocation in get_short_name
Remove remnant EntityHash and related types from bevy_utils
Remove unused type parameter in Parallel::drain()
Windowing
Add bevy_window::Window options for MacOS
Expose winit's MonitorHandle
Remove unused default feature from bevy_window
move ANDROID_APP to bevy_window
Without area
Add Display implementation to DebugName.
0.13 to 0.14
0.12 to 0.13
0.11 to 0.12
0.10 to 0.11
0.9 to 0.10
0.8 to 0.9
0.7 to 0.8
0.6 to 0.7
0.5 to 0.6
0.4 to 0.5
Getting Started
Learn
News
Community
Foundation
Assets
Examples
Donate heart icon
GitHub repo
Migration Guide: 0.14 to 0.15
Bevy relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is "the latest stable release" of Rust.
Accessibility #
Bump accesskit to 0.16 #
PR #14091
Accessibility
UI
accesskit’s Role::StaticText variant has been renamed to Role::Label.

Remove accesskit re-export from bevy_a11y #
PR #16257
Accessibility
# main.rs
--    use bevy_a11y::{
--        accesskit::{Node, Rect, Role},
--        AccessibilityNode,
--    };
++    use bevy_a11y::AccessibilityNode;
++    use accesskit::{Node, Rect, Role};

# Cargo.toml
++    accesskit = "0.17"
Users will need to add accesskit = "0.17" to the dependencies section of their Cargo.toml file and update their accesskit use statements to come directly from the external crate instead of bevy_a11y.
Make sure to keep the versions of accesskit aligned with the versions Bevy uses.
Animation #
Deprecate is_playing_animation #
PR #14387
Animation
The user will just need to replace functions named is_playing_animation with animation_is_playing.

Fix additive blending of quaternions #
PR #15662
Animation
This PR changes the implementation of Quat: Animatable, which was not used internally by Bevy prior to this release version. If you relied on the old behavior of additive quaternion blending in manual applications, that code will have to be updated, as the old behavior was incorrect.

Implement additive blending for animation graphs. #
PR #15631
Animation
The animgraph.ron format has changed to accommodate the new additive blending feature. You’ll need to change clip fields to instances of the new AnimationNodeType enum.
Implement animation masks, allowing fine control of the targets that animations affect. #
PR #15013
Animation
The serialized format of animation graphs has changed with the addition of animation masks. To upgrade animation graph RON files, add mask and mask_groups fields as appropriate. (They can be safely set to zero.)
Impose a more sensible ordering for animation graph evaluation. #
PR #15589
Animation
The order in which animation graphs are evaluated has been changed to be more intuitive. Please see the diagram in the linked PR for a detailed explanation.

Make AnimationPlayer::start and ::play work accordingly to documentation #
PR #14546
Animation
AnimationPlayer::start now correspondingly to its docs restarts a running animation. AnimationPlayer::play doesn’t reset the weight anymore.

Replace Handle<AnimationGraph> component with a wrapper #
PR #15742
Animation
Handle<AnimationGraph> is no longer a component. Instead, use the AnimationGraphHandle component which contains a Handle<AnimationGraph>.

Curve-based animation #
PR #15434
Animation
Math
Most user code that does not directly deal with AnimationClip and VariableCurve will not need to be changed. On the other hand, VariableCurve has been completely overhauled. If you were previously defining animation curves in code using keyframes, you will need to migrate that code to use curve constructors instead. For example, a rotation animation defined using keyframes and added to an animation clip like this:

animation_clip.add_curve_to_target(
    animation_target_id,
    VariableCurve {
        keyframe_timestamps: vec![0.0, 1.0, 2.0, 3.0, 4.0],
        keyframes: Keyframes::Rotation(vec![
            Quat::IDENTITY,
            Quat::from_axis_angle(Vec3::Y, PI / 2.),
            Quat::from_axis_angle(Vec3::Y, PI / 2. * 2.),
            Quat::from_axis_angle(Vec3::Y, PI / 2. * 3.),
            Quat::IDENTITY,
        ]),
        interpolation: Interpolation::Linear,
    },
);
would now be added like this:

animation_clip.add_curve_to_target(
    animation_target_id,
    AnimatableKeyframeCurve::new([0.0, 1.0, 2.0, 3.0, 4.0].into_iter().zip([
        Quat::IDENTITY,
        Quat::from_axis_angle(Vec3::Y, PI / 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 3.),
        Quat::IDENTITY,
    ]))
    .map(RotationCurve)
    .expect("Failed to build rotation curve"),
);
Note that the interface of AnimationClip::add_curve_to_target has also changed (as this example shows, if subtly), and now takes its curve input as an impl AnimationCurve. If you need to add a VariableCurve directly, a new method add_variable_curve_to_target accommodates that (and serves as a one-to-one migration in this regard).

For reviewers

The diff is pretty big, and the structure of some of the changes might not be super-obvious:

keyframes.rs became animation_curves.rs, and AnimationCurve is based heavily on Keyframes, with the adaptors also largely following suite.
The Curve API adaptor structs were moved from bevy_math::curve::mod into their own module adaptors. There are no functional changes to how these adaptors work; this is just to make room for the specialized reflection implementations since mod.rs was getting kind of cramped.
The new module gltf_curves holds the additional curve constructions that are needed by the glTF loader. Note that the loader uses a mix of these and off-the-shelf bevy_math curve stuff.
animatable.rs no longer holds logic related to keyframe interpolation, which is now delegated to the existing abstractions in bevy_math::curve::cores.
Allow animation clips to animate arbitrary properties. #
PR #15282
Animation
Reflection
Animation keyframes are now an extensible trait, not an enum. Replace Keyframes::Translation(...), Keyframes::Scale(...), Keyframes::Rotation(...), and Keyframes::Weights(...) with Box::new(TranslationKeyframes(...)), Box::new(ScaleKeyframes(...)), Box::new(RotationKeyframes(...)), and Box::new(MorphWeightsKeyframes(...)) respectively.
App #
Add features to switch NativeActivity and GameActivity usage #
PR #12095
App
GameActivity is now the default activity for Android projects, replacing NativeActivity. cargo-apk has been replaced with cargo-ndk since the former is not compatible with GameActivity.

Before:

rustup target add aarch64-linux-android armv7-linux-androideabi
cargo install cargo-apk
After:

rustup target add aarch64-linux-android
cargo install cargo-ndk
Shared object files must be now built for the target architecture before launching package builds with the Gradle wrapper.

Before:

cargo apk build --package bevy_mobile_example
After:

cargo ndk -t arm64-v8a -o android_example/app/src/main/jniLibs build --package bevy_mobile_example
./android_example/gradlew build
(replace target and project name as required). Note that build output paths have changed. APK builds can be found under app/build/outputs/apk).

Android Studio may also be used.

Bevy may require the libc++_shared.so library to run on Android. This can be manually obtained from NDK source, or NDK describes a build.rs approach. A suggested solution is also presented in the Bevy mobile example.

Applications that still require NativeActivity should:

disable default features in Cargo.toml
re-enable all default features except android-game-activity
enable the android-native-activity feature
Allow ordering variable timesteps around fixed timesteps #
PR #14881
App
run_fixed_main_schedule is no longer public. If you used to order against it, use the new dedicated RunFixedMainLoopSystem system set instead. You can replace your usage of run_fixed_main_schedule one for one by RunFixedMainLoopSystem::FixedMainLoop, but it is now more idiomatic to place your systems in either RunFixedMainLoopSystem::BeforeFixedMainLoop or RunFixedMainLoopSystem::AfterFixedMainLoop

Old:

app.add_systems(
    RunFixedMainLoop,
    some_system.before(run_fixed_main_schedule)
);
New:

app.add_systems(
    RunFixedMainLoop,
    some_system.in_set(RunFixedMainLoopSystem::BeforeFixedMainLoop)
);
Remove deprecated bevy_dynamic_plugin #
PR #14534
App
Dynamic plugins were deprecated in 0.14 for being unsound, and they have now been fully removed. Please consider using the alternatives listed in the bevy_dynamic_plugin crate documentation, or worst-case scenario you may copy the code from 0.14.

Remove need for EventLoopProxy to be NonSend #
PR #14198
App
EventLoopProxy has been renamed to EventLoopProxyWrapper and is now Send, making it an ordinary resource.

Before:

event_loop_system(event_loop: NonSend<EventLoopProxy<MyEvent>>) {
    event_loop.send_event(MyEvent);
}
After:

event_loop_system(event_loop: Res<EventLoopProxy<MyEvent>>) {
    event_loop.send_event(MyEvent);
}
Remove second generic from .add_before, .add_after #
PR #14285
App
Removed second generic from PluginGroupBuilder methods: add_before and add_after.

// Before:
DefaultPlugins
    .build()
    .add_before::<WindowPlugin, _>(FooPlugin)
    .add_after::<WindowPlugin, _>(BarPlugin)

// After:
DefaultPlugins
    .build()
    .add_before::<WindowPlugin>(FooPlugin)
    .add_after::<WindowPlugin>(BarPlugin)
Handle Ctrl+C in the terminal properly #
PR #14001
App
Windowing
If you are overriding the Ctrl+C handler then you should call TerminalCtrlCHandlerPlugin::gracefully_exit from your handler. It will tell the app to exit.

Assets #
AssetServer LoadState API consistency #
PR #15237
Assets
RecursiveDependencyLoadState::Failed now stores error information about the first encountered error, rather than being a unit struct.

Cleanup unneeded lifetimes in bevy_asset #
PR #15546
Assets
The traits AssetLoader, AssetSaver and Process traits from bevy_asset now use elided lifetimes. If you implement these then remove the named lifetime.

Generalized Into<AssetSourceId> and Into<AssetPath> Implementations over Lifetime #
PR #10823
Assets
In areas where these implementations where being used, you can now add from_static in order to get the original specialised implementation which avoids creating an Arc internally.

// Before
let asset_path = AssetPath::from("my/path/to/an/asset.ext");

// After
let asset_path = AssetPath::from_static("my/path/to/an/asset.ext");
To be clear, this is only required if you wish to maintain the performance benefit that came with the specialisation. Existing code is not broken by this change.

Improve error handling for AssetServer::add_async #
PR #13745
Assets
AssetServer::add_async can now return a custom error type in its future. To return to the previous behavior, pass in an E generic of AssetLoadError.

To support these changes, AssetLoadError now has an additional arm that will need to be exhaustively matched against.

Remove incorrect equality comparisons for asset load error types #
PR #15890
Assets
The types bevy_asset::AssetLoadError and bevy_asset::LoadState no longer support equality comparisons. If you need to check for an asset’s load state, consider checking for a specific variant using LoadState::is_loaded or the matches! macro. Similarly, consider using the matches! macro to check for specific variants of the AssetLoadError type if you need to inspect the value of an asset load error in your code.

DependencyLoadState and RecursiveDependencyLoadState are not released yet, so no migration needed,

Replace AsyncSeek trait by AsyncSeekForward for Reader to address #12880 #
PR #14194
Assets
Replace all instances of AsyncSeek with AsyncSeekForward in your asset reader implementations.

bevy_asset: Improve NestedLoader API #
PR #15509
Assets
Code which uses bevy_asset’s LoadContext::loader / NestedLoader will see some naming changes:

untyped is replaced by with_unknown_type
with_asset_type is replaced by with_static_type
with_asset_type_id is replaced by with_dynamic_type
direct is replaced by immediate (the opposite of “immediate” is “deferred”)
Deprecate LoadAndSave Asset Processor #
PR #15090
Assets
Replace LoadAndSave<L, S> with LoadTransformAndSave<L, IdentityAssetTransformer<<L as AssetLoader>::Asset>, S>
Replace LoadAndSaveSettings<L, S> with LoadTransformAndSaveSettings<L, (), S>
AssetReader::read now returns an opaque type #
PR #14082
Assets
The trait method bevy_asset::io::AssetReader::read (and read_meta) now return an opaque type instead of a boxed trait object. Implementors of these methods should change the type signatures appropriately:

impl AssetReader for MyReader {
    // Before
    async fn read<'a>(&'a self, path: &'a Path) -> Result<Box<Reader<'a>>, AssetReaderError> {
        let reader = // construct a reader
        Box::new(reader) as Box<Reader<'a>>
    }

    // After
    async fn read<'a>(&'a self, path: &'a Path) -> Result<impl Reader + 'a, AssetReaderError> {
        // create a reader
    }
}
bevy::asset::io::Reader is now a trait, rather than a type alias for a trait object. Implementors of AssetLoader::load will need to adjust the method signature accordingly:

impl AssetLoader for MyLoader {
    async fn load<'a>(
        &'a self,
        // Before:
        reader: &'a mut bevy::asset::io::Reader,
        // After:
        reader: &'a mut dyn bevy::asset::io::Reader,
        _: &'a Self::Settings,
        load_context: &'a mut LoadContext<'_>,
    ) -> Result<Self::Asset, Self::Error> {
}
Additionally, implementors of AssetReader that return a type implementing futures_io::AsyncRead and AsyncSeek might need to explicitly implement bevy::asset::io::Reader for that type.

impl bevy::asset::io::Reader for MyAsyncReadAndSeek {}
Make gLTF node children Handle instead of objects #
PR #13707
Assets
Rendering
If accessing children, use Assets<GltfNode> resource to get the actual child object.

Before

fn gltf_print_first_node_children_system(gltf_component_query: Query<Handle<Gltf>>, gltf_assets: Res<Assets<Gltf>>, gltf_nodes: Res<Assets<GltfNode>>) {
    for gltf_handle in gltf_component_query.iter() {
        let gltf_root = gltf_assets.get(gltf_handle).unwrap();
        let first_node_handle = gltf_root.nodes.get(0).unwrap();
        let first_node = gltf_nodes.get(first_node_handle).unwrap();
        let first_child = first_node.children.get(0).unwrap();
        println!("First nodes child node name is {:?)", first_child.name);
    }
}
After

fn gltf_print_first_node_children_system(gltf_component_query: Query<Handle<Gltf>>, gltf_assets: Res<Assets<Gltf>>, gltf_nodes: Res<Assets<GltfNode>>) {
    for gltf_handle in gltf_component_query.iter() {
        let gltf_root = gltf_assets.get(gltf_handle).unwrap();
        let first_node_handle = gltf_root.nodes.get(0).unwrap();
        let first_node = gltf_nodes.get(first_node_handle).unwrap();
        let first_child_handle = first_node.children.get(0).unwrap();
        let first_child = gltf_nodes.get(first_child_handle).unwrap();
        println!("First nodes child node name is {:?)", first_child.name);
    }
}
Split TextureAtlasSources out of TextureAtlasLayout and make TextureAtlasLayout serializable #
PR #15344
Assets
Rendering
TextureAtlasBuilder no longer stores a mapping back to the original images in TextureAtlasLayout; that functionality has been added to a new struct, TextureAtlasSources, instead. This also means that the signature for TextureAtlasBuilder::finish has changed, meaning that calls of the form:

let (atlas_layout, image) = builder.build()?;
Will now change to the form:

let (atlas_layout, atlas_sources, image) = builder.build()?;
And instead of performing a reverse-lookup from the layout, like so:

let atlas_layout_handle = texture_atlases.add(atlas_layout.clone());
let index = atlas_layout.get_texture_index(&my_handle);
let handle = TextureAtlas {
    layout: atlas_layout_handle,
    index,
};
You can perform the lookup from the sources instead:

let atlas_layout = texture_atlases.add(atlas_layout);
let index = atlas_sources.get_texture_index(&my_handle);
let handle = TextureAtlas {
    layout: atlas_layout,
    index,
};
Additionally, TextureAtlasSources also has a convenience method, handle, which directly combines the index and an existing TextureAtlasLayout handle into a new TextureAtlas:

let atlas_layout = texture_atlases.add(atlas_layout);
let handle = atlas_sources.handle(atlas_layout, &my_handle);
Export glTF skins as a Gltf struct #
PR #14343
Assets
Scenes
Change GltfAssetLabel::Skin(..) to GltfAssetLabel::InverseBindMatrices(..).
Replace bevy_utils::CowArc with atomicow #
PR #14977
Assets
Utils
bevy_utils::CowArc has moved to a new crate called atomicow.

Audio #
Migrate audio to required components #
PR #15573
Audio
ECS
Replace all insertions of AudioSourceBundle, AudioBundle, and PitchBundle with the AudioPlayer component. The other components required by it will now be inserted automatically.

In cases where the generics cannot be inferred, you may need to specify them explicitly. For example:

commands.spawn(AudioPlayer::<AudioSource>(asset_server.load("sounds/sick_beats.ogg")));
Build-System #
Use en-us locale for typos #
PR #16037
Build-System
Cross-Cutting
The following methods or fields have been renamed from *dependants* to *dependents*.

ProcessorAssetInfo::dependants
ProcessorAssetInfos::add_dependant
ProcessorAssetInfos::non_existent_dependants
AssetInfo::dependants_waiting_on_load
AssetInfo::dependants_waiting_on_recursive_dep_load
AssetInfos::loader_dependants
AssetInfos::remove_dependants_and_labels
Color #
Adds back in way to convert color to u8 array, implemented for the two RGB color types, also renames Color::linear to Color::to_linear. #
PR #13759
Color
Color::linear has been renamed to Color::to_linear for consistency.

Update Grid Gizmo to use Color #
PR #14886
Color
Gizmos
This shouldn’t be adding anything that isn’t already in a migration guide? I assume as it uses impl Into<...> in the public interfaces that any users of these APIs shouldn’t have to make any code changes.

Core #
Rename bevy_core::name::DebugName to bevy_core::name::NameOrEntity #
PR #14211
Core
Editor
Rename usages of bevy_core::name::DebugName to bevy_core::name::NameOrEntity
Cross-Cutting #
Remove the Component trait implementation from Handle #
PR #15796
Cross-Cutting
Handle can no longer be used as a Component. All existing Bevy types using this pattern have been wrapped in their own semantically meaningful type. You should do the same for any custom Handle components your project needs.

The Handle<MeshletMesh> component is now MeshletMesh3d.

The WithMeshletMesh type alias has been removed. Use With<MeshletMesh3d> instead.

Fix floating point math #
PR #15239
Cross-Cutting
Math
Not a breaking change
Projects should use bevy math where applicable
Don't reëxport bevy_image from bevy_render #
PR #16163
Cross-Cutting
Rendering
Use bevy_image instead of bevy_render::texture items.

Add custom cursors #
PR #14284
Cross-Cutting
UI
Windowing
CursorIcon is no longer a field in Window, but a separate component can be inserted to a window entity. It has been changed to an enum that can hold custom images in addition to system icons.
Cursor is renamed to CursorOptions and cursor field of Window is renamed to cursor_options
CursorIcon is renamed to SystemCursorIcon
Diagnostics #
Don't ignore draw errors #
PR #13240
Diagnostics
Rendering
If you were using RenderCommandResult::Failure to just ignore an error and retry later, use RenderCommandResult::Skip instead.

This wasn’t intentional, but this PR should also help with https://github.com/bevyengine/bevy/issues/12660 since we can turn a few unwraps into error messages now.

ECS #
Make World::flush_commands private #
PR #15540
PR #15553
ECS
World::flush_commands is now private. Use World::flush instead.

Add FilteredAccess::empty and simplify the implementation of update_component_access for AnyOf/Or #
PR #14352
ECS
The behaviour of AnyOf<()> and Or<()> has been changed to match no archetypes rather than all archetypes to naturally match the corresponding logical operation. Consider replacing them with () instead.
Add mappings to EntityMapper #
PR #13727
ECS
If you are implementing EntityMapper yourself, you can use the below as a stub implementation:
fn mappings(&self) -> impl Iterator<Item = (Entity, Entity)> {
    unimplemented!()
}
If you were using EntityMapper as a trait object (dyn EntityMapper), instead use dyn DynEntityMapper and its associated methods.
Add query reborrowing #
PR #14690
ECS
WorldQuery now has an additional shrink_fetch method you have to implement if you were implementing WorldQuery manually.
Allow World::entity family of functions to take multiple entities and get multiple references back #
PR #15614
ECS
World::get_entity now returns Result<_, Entity> instead of Option<_>.

Use world.get_entity(..).ok() to return to the previous behavior.
World::get_entity_mut and DeferredWorld::get_entity_mut now return Result<_, EntityFetchError> instead of Option<_>.

Use world.get_entity_mut(..).ok() to return to the previous behavior.
Type inference for World::entity, World::entity_mut, World::get_entity, World::get_entity_mut, DeferredWorld::entity_mut, and DeferredWorld::get_entity_mut has changed, and might now require the input argument’s type to be explicitly written when inside closures.

The following functions have been deprecated, and should be replaced as such:

World::many_entities -> World::entity::<[Entity; N]>

World::many_entities_mut -> World::entity_mut::<[Entity; N]>

World::get_many_entities -> World::get_entity::<[Entity; N]>

World::get_many_entities_dynamic -> World::get_entity::<&[Entity]>

World::get_many_entities_mut -> World::get_entity_mut::<[Entity; N]>

The equivalent return type has changed from Result<_, QueryEntityError> to Result<_, EntityFetchError>
World::get_many_entities_dynamic_mut -> World::get_entity_mut::<&[Entity]>

The equivalent return type has changed from Result<_, QueryEntityError> to Result<_, EntityFetchError>
World::get_many_entities_from_set_mut -> World::get_entity_mut::<&EntityHashSet>

The equivalent return type has changed from Result<Vec<EntityMut>, QueryEntityError> to Result<EntityHashMap<EntityMut>, EntityFetchError>. If necessary, you can still convert the EntityHashMap into a Vec.
Change World::inspect_entity to return an Iterator instead of Vec #
PR #13934
ECS
World::inspect_entity now returns an Iterator instead of a Vec. If you need a Vec, immediately collect the iterator: world.inspect_entity(entity).collect<Vec<_>>()
Created an EventMutator for when you want to mutate an event before reading #
PR #13818
ECS
Users currently using ManualEventReader should use EventCursor instead. ManualEventReader will be removed in Bevy 0.16. Additionally, Events::get_reader has been replaced by Events::get_cursor.

Users currently directly accessing the Events resource for mutation should move to EventMutator if possible.

Deprecate Events::oldest_id #
PR #15658
ECS
Change usages of Events::oldest_id to Events::oldest_event_count
If Events::oldest_id was used to get the actual oldest EventId::id, note that the deprecated method never reliably did that in the first place as the buffers may contain no id currently.
Deprecate get_or_spawn #
PR #15652
ECS
If you are given an Entity and you want to do something with it, use Commands.entity(...) or World.entity(...). If instead you want to spawn something use Commands.spawn(...) or World.spawn(...). If you are not sure if an entity exists, you can always use get_entity and match on the Option<...> that is returned.

Enable EntityRef::get_by_id and friends to take multiple ids and get multiple pointers back #
PR #15593
ECS
The following functions now return an Result<_, EntityComponentError> instead of a Option<_>: EntityRef::get_by_id, EntityMut::get_by_id, EntityMut::into_borrow_by_id, EntityMut::get_mut_by_id, EntityMut::into_mut_by_id, EntityWorldMut::get_by_id, EntityWorldMut::into_borrow_by_id, EntityWorldMut::get_mut_by_id, EntityWorldMut::into_mut_by_id
EntityRef/Mut get_components (immutable variants only) #
PR #15089
ECS
Renamed FilteredEntityRef::components to FilteredEntityRef::accessed_components and FilteredEntityMut::components to FilteredEntityMut::accessed_components.
Fix soudness issue with Conflicts involving read_all and write_all #
PR #14579
ECS
The get_conflicts method of Access now returns an AccessConflict enum instead of simply a Vec of ComponentIds that are causing the access conflict. This can be useful in cases where there are no particular ComponentIds conflicting, but instead all of them are; for example fn system(q1: Query<EntityMut>, q2: Query<EntityRef>)

Follow up to cached run_system #
PR #15410
ECS
IntoSystem::pipe and IntoSystem::map now return IntoPipeSystem and IntoAdapterSystem instead of PipeSystem and AdapterSystem. Most notably these types don’t implement System but rather only IntoSystem.
List components for QueryEntityError::QueryDoesNotMatch #
PR #15435
ECS
QueryEntityError now has a lifetime. Convert it to a custom error if you need to store it.
Make QueryFilter an unsafe trait #
PR #14790
ECS
QueryFilter is now an unsafe trait. If you were manually implementing it, you will need to verify that the WorldQuery implementation is read-only and then add the unsafe keyword to the impl.

Make QueryState::transmute&co validate the world of the &Components used #
PR #14631
ECS
QueryState::transmute, QueryState::transmute_filtered, QueryState::join and QueryState::join_filtered now take a impl Into<UnsafeWorldCell> instead of a &Components
Re-name and Extend Run Conditions API #
PR #13784
ECS
The and_then run condition method has been replaced with the and run condition method.
The or_else run condition method has been replaced with the or run condition method.
Remove redundant information and optimize dynamic allocations in Table #
PR #12929
ECS
Table now uses ThinColumn instead of Column. That means that methods that previously returned Column, will now return ThinColumn instead.

ThinColumn has a much more limited and low-level API, but you can still achieve the same things in ThinColumn as you did in Column. For example, instead of calling Column::get_added_tick, you’d call ThinColumn::get_added_ticks_slice and index it to get the specific added tick.

Removed Type Parameters from Observer #
PR #15151
ECS
If you filtered for observers using Observer<A, B>, instead filter for an Observer.

Rename Add to Queue for methods with deferred semantics #
PR #15234
ECS
Commands::add and Commands::push have been replaced with Commands::queue.
ChildBuilder::add_command has been renamed to ChildBuilder::queue_command.
Rename App/World::observe to add_observer, EntityWorldMut::observe_entity to observe. #
PR #15754
ECS
Various observer methods have been renamed for clarity.

App::observe -> App::add_observer
World::observe -> World::add_observer
Commands::observe -> Commands::add_observer
EntityWorldMut::observe_entity -> EntityWorldMut::observe
Rename Commands::register_one_shot_system -> register_system #
PR #14910
ECS
Commands::register_one_shot_system has been renamed to register_system.

Rename init_component & friends #
PR #15454
ECS
World::init_component has been renamed to register_component.
World::init_component_with_descriptor has been renamed to register_component_with_descriptor.
World::init_bundle has been renamed to register_bundle.
Components::init_component has been renamed to register_component.
Components::init_component_with_descriptor has been renamed to register_component_with_descriptor.
Components::init_resource has been renamed to register_resource.
Components::init_non_send had been renamed to register_non_send.
Rename observe to observe_entity on EntityWorldMut #
PR #15616
ECS
The observe() method on entities has been renamed to observe_entity() to prevent confusion about what is being observed in some cases.

Rename push children to add children #
PR #15196
ECS
Some commands and methods for adding children to an entity were renamed for consistency.

0.14	0.15
EntityCommands::push_children	add_children
PushChild	AddChild
PushChildren	AddChildren
Require &mut self for World::increment_change_tick #
PR #14459
ECS
The method World::increment_change_tick now requires &mut self instead of &self. If you need to call this method but do not have mutable access to the world, consider using world.as_unsafe_world_cell_readonly().increment_change_tick(), which does the same thing, but is less efficient than the method on World due to requiring atomic synchronization.

fn my_system(world: &World) {
    // Before
    world.increment_change_tick();

    // After
    world.as_unsafe_world_cell_readonly().increment_change_tick();
}
Simplify run conditions #
PR #14441
ECS
Some run conditions have been simplified.

// Before:
app.add_systems(Update, (
    system_0.run_if(run_once()),
    system_1.run_if(resource_changed_or_removed::<T>()),
    system_2.run_if(resource_removed::<T>()),
    system_3.run_if(on_event::<T>()),
    system_4.run_if(any_component_removed::<T>()),
));

// After:
app.add_systems(Update, (
    system_0.run_if(run_once),
    system_1.run_if(resource_changed_or_removed::<T>),
    system_2.run_if(resource_removed::<T>),
    system_3.run_if(on_event::<T>),
    system_4.run_if(any_component_removed::<T>),
));
Support more kinds of system params in buildable systems. #
PR #14050
ECS
The API for SystemBuilder has changed. Instead of constructing a builder with a world and then adding params, you first create a tuple of param builders and then supply the world.

// Before
let system = SystemBuilder::<()>::new(&mut world)
    .local::<u64>()
    .builder::<Local<u64>>(|x| *x = 10)
    .builder::<Query<&A>>(|builder| { builder.with::<B>(); })
    .build(system);

// After
let system = (
    ParamBuilder,
    LocalBuilder(10),
    QueryParamBuilder::new(|builder| { builder.with::<B>(); }),
)
    .build_state(&mut world)
    .build_system(system);
Support systems that take references as input #
PR #15184
ECS
All current explicit usages of the following types must be changed in the way specified:

SystemId<I, O> to SystemId<In<I>, O>
System<In = T> to System<In = In<T>>
IntoSystem<I, O, M> to IntoSystem<In<I>, O, M>
Condition<M, T> to Condition<M, In<T>>
In<Trigger<E, B>> is no longer a valid input parameter type. Use Trigger<E, B> directly, instead.

System param validation for observers, system registry and run once #
PR #15526
ECS
RunSystemOnce::run_system_once and RunSystemOnce::run_system_once_with now return a Result<Out> instead of just Out
Track source location in change detection #
PR #14034
ECS
Added changed_by field to many internal ECS functions used with change detection when the track_change_detection feature flag is enabled. Use Location::caller() to provide the source of the function call.
Update trigger_observers to operate over slices of data #
PR #14354
ECS
The trigger_observers method now operates on &[ComponentId] rather than impl Iterator<Item=ComponentId>.

Try replacing bundle_info.iter_components() with bundle_info.components() or collect the iterator of component ids into a Vec.

IntoSystemConfigs::chain_ignore_deferred's return type fix #
PR #13919
ECS
IntoSystemConfigs::chain_ignore_deferred now correctly returns a SystemSetConfig.

bevy_ecs: Special-case Entity::PLACEHOLDER formatting #
PR #15839
ECS
The Debug and Display impls for Entity now return PLACEHOLDER for the Entity::PLACEHOLDER constant. If you had any code relying on these values, you may need to account for this change.

change return type of World::resource_ref to Ref #
PR #15263
ECS
Previously World::get_resource_ref::<T> and World::resource_ref::<T> would return a Res<T> which was inconsistent with the rest of the World API (notably resource_scope). This has been fixed and the methods now return Ref<T>.

This means it is no longer possible to get Res<T> from World. If you were relying on this, you should try using Ref<T> instead since it has the same functionality.

Before

let my_resource: Res<MyResource> = world.resource_ref();
function_taking_resource(my_resource);

fn function_taking_resource(resource: Res<MyResource>) { /* ... */ }
After

let my_resource: Ref<MyResource> = world.resource_ref();
function_taking_resource(my_resource);

fn function_taking_resource(resource: Ref<MyResource>) { /* ... */ }
Minimal Bubbling Observers #
PR #13991
ECS
Hierarchy
Picking
Manual implementations of Event should add associated type Traverse = TraverseNone and associated constant AUTO_PROPAGATE = false;
Trigger::new has new field propagation: &mut Propagation which provides the bubbling state.
ObserverRunner now takes the same &mut Propagation as a final parameter.
Make ComponentTicks field public #
PR #16269
ECS
Networking
Instead of using ComponentTicks::last_changed_tick and ComponentTicks::added_tick methods, access fields directly.
Change ReflectMapEntities to operate on components before insertion #
PR #15422
ECS
Networking
Scenes
Consumers of ReflectMapEntities will need to call map_entities on values prior to inserting them into the world.
Implementors of MapEntities will need to remove the mappings method, which is no longer needed for ReflectMapEntities and has been removed from the trait.
Bubbling observers traversal should use query data #
PR #15385
ECS
Picking
Update implementations of Traversal.

Migrate bevy picking #
PR #15690
ECS
Picking
This API hasn’t shipped yet, so I didn’t bother with a deprecation. However, for any crates tracking main the changes are as follows:

Previous api:

commands.insert(PointerBundle::new(PointerId::Mouse));
commands.insert(PointerBundle::new(PointerId::Mouse).with_location(location));
New api:

commands.insert(PointerId::Mouse);
commands.insert((PointerId::Mouse, PointerLocation::new(location)));
ReflectBundle::remove improvement #
PR #16139
ECS
Reflection
If you don’t need the returned value from remove, discard it.

Use crate: disqualified #
PR #15372
ECS
Reflection
Utils
Replace references to bevy_utils::ShortName with disqualified::ShortName.

Migrate cameras to required components #
PR #15641
ECS
Rendering
Camera2dBundle and Camera3dBundle have been deprecated in favor of Camera2d and Camera3d. Inserting them will now also insert the other components required by them automatically.

Migrate fog volumes to required components #
PR #15568
ECS
Rendering
Replace all insertions of FogVolumeBundle with the Visibility component. The other components required by it will now be inserted automatically.

Migrate meshes and materials to required components #
PR #15524
ECS
Rendering
Asset handles for meshes and mesh materials must now be wrapped in the Mesh2d and MeshMaterial2d or Mesh3d and MeshMaterial3d components for 2D and 3D respectively. Raw handles as components no longer render meshes.

Additionally, MaterialMesh2dBundle, MaterialMeshBundle, and PbrBundle have been deprecated. Instead, use the mesh and material components directly.

Previously:

commands.spawn(MaterialMesh2dBundle {
    mesh: meshes.add(Circle::new(100.0)).into(),
    material: materials.add(Color::srgb(7.5, 0.0, 7.5)),
    transform: Transform::from_translation(Vec3::new(-200., 0., 0.)),
    ..default()
});
Now:

commands.spawn((
    Mesh2d(meshes.add(Circle::new(100.0))),
    MeshMaterial2d(materials.add(Color::srgb(7.5, 0.0, 7.5))),
    Transform::from_translation(Vec3::new(-200., 0., 0.)),
));
If the mesh material is missing, a white default material is now used. Previously, nothing was rendered if the material was missing.

The WithMesh2d and WithMesh3d query filter type aliases have also been removed. Simply use With<Mesh2d> or With<Mesh3d>.

Migrate motion blur, TAA, SSAO, and SSR to required components #
PR #15572
ECS
Rendering
MotionBlurBundle, TemporalAntiAliasBundle, ScreenSpaceAmbientOcclusionBundle, and ScreenSpaceReflectionsBundle have been deprecated in favor of the MotionBlur, TemporalAntiAliasing, ScreenSpaceAmbientOcclusion, and ScreenSpaceReflections components instead. Inserting them will now also insert the other components required by them automatically.

Migrate reflection probes to required components #
PR #15737
ECS
Rendering
ReflectionProbeBundle has been deprecated in favor of inserting the LightProbe and EnvironmentMapLight components directly. Inserting them will now automatically insert Transform and Visibility components.

Migrate visibility to required components #
PR #15474
ECS
Rendering
Replace all insertions of VisibilityBundle with the Visibility component. The other components required by it will now be inserted automatically.

Synchronize removed components with the render world #
PR #15582
ECS
Rendering
The retained render world notes should be updated to explain this edge case and SyncComponentPlugin

Deprecate SpatialBundle #
PR #15830
ECS
Transform
SpatialBundle is now deprecated, insert Transform and Visibility instead which will automatically insert all other components that were in the bundle. If you do not specify these values and any other components in your spawn/insert call already requires either of these components you can leave that one out.

before:

commands.spawn(SpatialBundle::default());
after:

commands.spawn((Transform::default(), Visibility::default());
Migrate bevy_transform to required components #
PR #14964
ECS
Transform
Replace all insertions of GlobalTransform and/or TransformBundle with Transform alone.

Gizmos #
Consistency between Wireframe2d and Wireframe #
PR #14720
Gizmos
Wireframe2dConfig.default_color type is now Color instead of Srgba. Use .into() to convert between them.
Wireframe2dColor.color type is now Color instead of Srgba. Use .into() to convert between them.
Fix Gizmos warnings and doc errors when a subset of features are selected #
PR #14887
Gizmos
There shouldn’t be any reason to migrate, although if for some reason you use GizmoMeshConfig and bevy_render but not bevy_pbr or bevy_sprite (such that it does nothing), then you will get an error that it no longer exists.

Fix arc_2d Gizmos #
PR #14731
Gizmos
users have to adjust their usages of arc_2d:
before:
arc_2d(
  pos,
  angle,
  arc_angle,
  radius,
  color
)
after:
arc_2d(
  // this `+ arc_angle * 0.5` quirk is only if you want to preserve the previous behavior 
  // with the new API.
  // feel free to try to fix this though since your current calls to this function most likely
  // involve some computations to counter-act that quirk in the first place
  Isometry2d::new(pos, Rot2::radians(angle + arc_angle * 0.5),
  arc_angle,
  radius,
  color
)
Improve the gizmo for Plane3d, reusing grid #
PR #14650
Gizmos
The optional builder methods on


gizmos.primitive_3d(&Plane3d { }, ...);

changed from

segment_length
segment_count
axis_count
to

cell_count
spacing
Making bevy_render an optional dependency for bevy_gizmos #
PR #14448
Gizmos
No user-visible changes needed from the users.

Use Isometry in bevy_gizmos wherever we can #
PR #14676
Gizmos
The gizmos methods function signature changes as follows:

2D

if it took position & rotation_angle before -> Isometry2d::new(position, Rot2::radians(rotation_angle))
if it just took position before -> Isometry2d::from_translation(position)
3D

if it took position & rotation before -> Isometry3d::new(position, rotation)
if it just took position before -> Isometry3d::from_translation(position)
Use u32 for all resolution/subdivision fields in bevy_gizmos #
PR #13927
Gizmos
All gizmos now take u32 instead of usize for their resolution/subdivision/segment counts
Switch rotation & translation in grid gizmos #
PR #14656
Gizmos
Math
Users might have to double check their already existing calls to all the grid methods. It should be more intuitive now though.
Make TrackedRenderPass::set_vertex_buffer aware of slice size #
PR #14916
Gizmos
Rendering
TrackedRenderPass::set_vertex_buffer function has been modified to update vertex buffers when the same buffer with the same offset is provided, but its size has changed. Some existing code may rely on the previous behavior, which did not update the vertex buffer in this scenario.
Hierarchy #
Only propagate transforms entities with GlobalTransforms. #
PR #14384
Hierarchy
Transform
To avoid surprising performance pitfalls, Transform / GlobalTransform propagation is no longer performed down through hierarchies where intermediate parent are missing a GlobalTransform. To restore the previous behavior, add GlobalTransform::default to intermediate entities.
Input #
Gamepad improvements #
PR #16222
Input
Gamepad fields are now public.
Instead of using Gamepad delegates like Gamepad::just_pressed, call these methods directly on the fields.
Implement gamepads as entities #
PR #12770
Input
Gamepad input is no longer accessed using resources, instead they are entities and are accessible using the Gamepad component as long as the gamepad is connected.

Gamepads resource has been deleted, instead of using an internal id to identify gamepads you can use its Entity. Disconnected gamepads will NOT be despawned. Gamepad components that don’t need to preserve their state will be removed i.e. Gamepad component is removed, but GamepadSettings is kept. Reconnected gamepads will try to preserve their Entity id and necessary components will be re-inserted.

GamepadSettings is no longer a resource, instead it is a component attached to the Gamepad entity.

Axis, Axis and ButtonInput methods are accessible via Gamepad component.

fn gamepad_system(
-   gamepads: Res<Gamepads>,
-   button_inputs: Res<ButtonInput<GamepadButton>>,
-   button_axes: Res<Axis<GamepadButton>>,
-   axes: Res<Axis<GamepadAxis>>,
+   gamepads: Query<&Gamepad>
) {
    for gamepad in gamepads.iter() {
-      if button_inputs.just_pressed(GamepadButton::new(gamepad, GamepadButtonType::South)) {
+      if gamepad.just_pressed(GamepadButton::South) {
            println!("just pressed South");
        } 
         
-      let right_trigger = button_axes
-           .get(GamepadButton::new(
-               gamepad,
-               GamepadButtonType::RightTrigger2,
-           ))
-           .unwrap();
+      let right_trigger = gamepad.get(GamepadButton::RightTrigger2).unwrap();
        if right_trigger.abs() > 0.01 {
            info!("RightTrigger2 value is {}", right_trigger);      
        }

-        let left_stick_x = axes
-           .get(GamepadAxis::new(gamepad, GamepadAxisType::LeftStickX))
-           .unwrap();
+       let left_stick_x = gamepad.get(GamepadAxis::LeftStickX).unwrap();
        if left_stick_x.abs() > 0.01 {
            info!("LeftStickX value is {}", left_stick_x);        
        }
    }
}
Remove ReceivedCharacter #
PR #15126
Input
ReceivedCharacter was deprecated in 0.14 due to winit reworking their keyboard system. It has now been fully removed. Switch to using KeyboardInput instead.

// 0.14
fn listen_characters(events: EventReader<ReceivedCharacter>) {
    for event in events.read() {
        info!("{}", event.char);
    }
}

// 0.15
fn listen_characters(events: EventReader<KeyboardInput>) {
    for event in events.read() {
        // Only check for characters when the key is pressed.
        if !event.state.is_pressed() {
            continue;
        }

        // Note that some keys such as `Space` and `Tab` won't be detected as a character.
        // Instead, check for them as separate enum variants.
        match &event.logical_key {
            Key::Character(character) => {
                info!("{} pressed.", character);
            },
            Key::Space => {
                info!("Space pressed.");
            },
            _ => {},
        }
    }
}
Use Name component for gamepad #
PR #16233
Input
GamepadInfo no longer exists:
Name now accessible via Name component.
Other information available on Gamepad component directly.
GamepadConnection::Connected now stores all info fields directly.
Picking event ordering #
PR #14862
Input
Picking
Windowing
For users switching from bevy_mod_picking to bevy_picking:

Instead of adding an On<T> component, use .observe(|trigger: Trigger<T>|). You may now apply multiple handlers to the same entity using this command.
Note that you need to add the non-default MeshPickingPlugin if you're using picking on meshes.
Pointer interaction events now have semi-deterministic ordering which (more or less) aligns with the order of the raw input stream. Consult the docs on bevy_picking::event::pointer_events for current information. You may need to adjust your event handling logic accordingly.
PointerCancel has been replaced with Pointer<Canceled>, which now has the semantics of an OS touch pointer cancel event.
InputMove and InputPress have been merged into PointerInput. The use remains exactly the same.
Picking interaction events are now only accessible through observers, and no EventReader. This functionality may be re-implemented later.
For users of bevy_winit:

The event bevy_winit::WinitEvent has moved to bevy_window::WindowEvent. If this was the only thing you depended on bevy_winit for, you should switch your dependency to bevy_window.
bevy_window now depends on bevy_input. The dependencies of bevy_input are a subset of the existing dependencies for bevy_window so this should be non-breaking.
Math #
Added new method to Cone 3D primitive #
PR #14325
Math
Addition of new method to the 3D primitive Cone struct.
Basic integration of cubic spline curves with the Curve API #
PR #15469
Math
The RationalCurve::domain method has been renamed to RationalCurve::length. Calling .domain() on a RationalCurve now returns its entire domain as an Interval.

Disallow empty cubic and rational curves #
PR #14382
Math
The to_curve method on Bevy’s cubic splines is now fallible (returning a Result), meaning that any existing calls will need to be updated by handling the possibility of an error variant.

Similarly, any custom implementation of CubicGenerator or RationalGenerator will need to be amended to include an Error type and be made fallible itself.

Finally, the fields of CubicCurve and RationalCurve are now private, so any direct constructions of these structs from segments will need to be replaced with the new CubicCurve::from_segments and RationalCurve::from_segments methods.

Refactor Bounded2d/Bounded3d to use isometries #
PR #14485
Math
The Bounded2d and Bounded3d traits now take Isometry2d and Isometry3d parameters (respectively) instead of separate translation and rotation arguments. Existing calls to aabb_2d, bounding_circle, aabb_3d, and bounding_sphere will have to be changed to use isometries instead. A straightforward conversion is to refactor just by calling Isometry2d/3d::new, as follows:

// Old:
let aabb = my_shape.aabb_2d(my_translation, my_rotation);

// New:
let aabb = my_shape.aabb_2d(Isometry2d::new(my_translation, my_rotation));
However, if the old translation and rotation are 3d translation/rotations originating from a Transform or GlobalTransform, then to_isometry may be used instead. For example:

// Old:
let bounding_sphere = my_shape.bounding_sphere(shape_transform.translation, shape_transform.rotation);

// New:
let bounding_sphere = my_shape.bounding_sphere(shape_transform.to_isometry());
This discussion also applies to the from_point_cloud construction method of Aabb2d/BoundingCircle/Aabb3d/BoundingSphere, which has similarly been altered to use isometries.

Rename Rot2::angle_between to Rot2::angle_to #
PR #16327
Math
Rot2::angle_between has been deprecated, use Rot2::angle_to instead, the semantics of Rot2::angle_between will change in the future.

Use Dir2/Dir3 instead of Vec2/Vec3 for Ray2d::new/Ray3d::new #
PR #15735
Math
Ray2d::new and Ray3d::new now take a Dir2 and Dir3 instead of Vec2 and Vec3 respectively for the ray direction.

Use a well defined type for sides in RegularPolygon #
PR #13837
Math
RegularPolygon now uses u32 instead of usize for the number of sides
bevy_reflect: Update EulerRot to match glam 0.29 #
PR #15402
Math
Reflection
The reflection implementation for EulerRot has been updated to align with glam 0.29. Please update any reflection-based usages accordingly.

Use u32 for resolution/subdivision in primitive meshing #
PR #13930
Math
Rendering
All primitive mesh builders now take u32 instead of usize for their resolution/subdivision/segment counts
Picking #
Add flags to SpritePlugin and UiPlugin to allow disabling their picking backend (without needing to disable features). #
PR #16473
Picking
UiPlugin now contains an extra add_picking field if bevy_ui_picking_backend is enabled.
SpritePlugin is no longer a unit struct, and has one field if bevy_sprite_picking_backend is enabled (otherwise no fields).
rename Drop to bevy::picking::events::DragDrop to unclash std::ops:Drop #
PR #14926
Picking
Rename Drop to DragDrop
bevy::picking::events::Drop is now bevy::picking::events::DragDrop
Reflection #
Dedicated Reflect implementation for Set-like things #
PR #13014
Reflection
The new Set variants on the enums listed in the change section should probably be considered by people working with this level of the lib
Help wanted!

I’m not sure if this change is able to break code. From my understanding it shouldn’t since we just add functionality but I’m not sure yet if theres anything missing from my impl that would be normally provided by impl_reflect_value!

Implement FromIterator/IntoIterator for dynamic types #
PR #14250
Reflection
Change DynamicArray::from_vec to DynamicArray::from_iter
Make drain take a mutable borrow instead of Box<Self> for reflected Map, List, and Set. #
PR #15406
Reflection
reflect::Map, reflect::List, and reflect::Set all now take a &mut self instead of a Box<Self>. Callers of these traits should add &mut before their boxes, and implementers of these traits should update to match.
Remove Return::Unit variant #
PR #15484
Reflection
Removed the Return::Unit variant; use Return::unit() instead.
Serialize and deserialize tuple struct with one field as newtype struct #
PR #15628
Reflection
Reflection now will serialize and deserialize tuple struct with single field as newtype struct. Consider this code.
#[derive(Reflect, Serialize)]
struct Test(usize);
let reflect = Test(3);
let serializer = TypedReflectSerializer::new(reflect.as_partial_reflect(), &registry);
return serde_json::to_string(&serializer)
Old behavior will return ["3"]. New behavior will return "3". If you were relying on old behavior you need to update your logic. Especially with serde_json. ron doesn’t affect from this.

bevy_reflect: Add DynamicTyped trait #
PR #15108
Reflection
Reflect now has a supertrait of DynamicTyped. If you were manually implementing Reflect and did not implement Typed, you will now need to do so.

bevy_reflect: Add ReflectDeserializerProcessor #
PR #15482
Reflection
(Since I added P = (), I don’t think this is actually a breaking change anymore, but I’ll leave this in)

bevy_reflect’s ReflectDeserializer and TypedReflectDeserializer now take a ReflectDeserializerProcessor as the type parameter P, which allows you to customize deserialization for specific types when they are found. However, the rest of the API surface (new) remains the same.

Original implementation
bevy_reflect: Add Type type #
PR #14838
Reflection
Certain type info structs now only return their item types as Type instead of exposing direct methods on them.

The following methods have been removed:

ArrayInfo::item_type_path_table
ArrayInfo::item_type_id
ArrayInfo::item_is
ListInfo::item_type_path_table
ListInfo::item_type_id
ListInfo::item_is
SetInfo::value_type_path_table
SetInfo::value_type_id
SetInfo::value_is
MapInfo::key_type_path_table
MapInfo::key_type_id
MapInfo::key_is
MapInfo::value_type_path_table
MapInfo::value_type_id
MapInfo::value_is
Instead, access the Type directly using one of the new methods:

ArrayInfo::item_ty
ListInfo::item_ty
SetInfo::value_ty
MapInfo::key_ty
MapInfo::value_ty
For example:

// BEFORE
let type_id = array_info.item_type_id();

// AFTER
let type_id = array_info.item_ty().id();
bevy_reflect: Nested TypeInfo getters #
PR #13321
Reflection
All active fields for reflected types (including lists, maps, tuples, etc.), must implement Typed. For the majority of users this won’t have any visible impact.

However, users implementing Reflect manually may need to update their types to implement Typed if they weren’t already.

Additionally, custom dynamic types will need to implement the new hidden MaybeTyped trait.

bevy_reflect: Refactor serde module #
PR #15107
Reflection
The fields on ReflectSerializer and TypedReflectSerializer are now private. To instantiate, the corresponding constructor must be used:

// BEFORE
let serializer = ReflectSerializer {
    value: &my_value,
    registry: &type_registry,
};

// AFTER
let serializer = ReflectSerializer::new(&my_value, &type_registry);
Additionally, the following types are no longer public:

ArraySerializer
EnumSerializer
ListSerializer
MapSerializer
ReflectValueSerializer (fully removed)
StructSerializer
TupleSerializer
TupleStructSerializer
As well as the following traits:

DeserializeValue (fully removed)
bevy_reflect: Replace "value" terminology with "opaque" #
PR #15240
Reflection
The reflection concept of “value type” has been replaced with a clearer “opaque type”. The following renames have been made to account for this:

ReflectKind::Value → ReflectKind::Opaque
ReflectRef::Value → ReflectRef::Opaque
ReflectMut::Value → ReflectMut::Opaque
ReflectOwned::Value → ReflectOwned::Opaque
TypeInfo::Value → TypeInfo::Opaque
ValueInfo → OpaqueInfo
impl_reflect_value! → impl_reflect_opaque!
impl_from_reflect_value! → impl_from_reflect_opaque!
Additionally, declaring your own opaque types no longer uses #[reflect_value]. This attribute has been replaced by #[reflect(opaque)]:

// BEFORE
#[derive(Reflect)]
#[reflect_value(Default)]
struct MyOpaqueType(u32);

// AFTER
#[derive(Reflect)]
#[reflect(opaque)]
#[reflect(Default)]
struct MyOpaqueType(u32);
Note that the order in which #[reflect(opaque)] appears does not matter.

reflect: implement the unique reflect rfc #
PR #7207
Reflection
Most instances of dyn Reflect should be changed to dyn PartialReflect which is less restrictive, however trait bounds should generally stay as T: Reflect.
The new PartialReflect::{as_partial_reflect, as_partial_reflect_mut, into_partial_reflect, try_as_reflect, try_as_reflect_mut, try_into_reflect} methods as well as Reflect::{as_reflect, as_reflect_mut, into_reflect} will need to be implemented for manual implementors of Reflect.
Use FromReflect when extracting entities in dynamic scenes #
PR #15174
Reflection
Scenes
The DynamicScene format is changed to use custom serialize impls so old scene files will need updating:

Old:

(
  resources: {},
  entities: {
    4294967299: (
      components: {
        "bevy_render::camera::projection::OrthographicProjection": (
          near: 0.0,
          far: 1000.0,
          viewport_origin: (
            x: 0.5,
            y: 0.5,
          ),
          scaling_mode: WindowSize(1.0),
          scale: 1.0,
          area: (
            min: (
              x: -1.0,
              y: -1.0,
            ),
            max: (
              x: 1.0,
              y: 1.0,
            ),
          ),
        ),
      },
    ),
  },
)
New:

(
  resources: {},
  entities: {
    4294967299: (
      components: {
        "bevy_render::camera::projection::OrthographicProjection": (
          near: 0.0,
          far: 1000.0,
          viewport_origin: (0.5, 0.5),
          scaling_mode: WindowSize(1.0),
          scale: 1.0,
          area: (
            min: (-1.0, -1.0),
            max: (1.0, 1.0),
          ),
        ),
      },
    ),
  },
)
move ShortName to bevy_reflect #
PR #15340
Reflection
Utils
References to bevy_utils::ShortName should instead now be bevy_reflect::ShortName.
Rendering #
Retained Rendering #
PR #15320
Rendering
With the advent of the retained render world, entities are no longer despawned at the end of every frame in the render world. Extracted entities with the TemporaryRenderEntity component will be despawned at the end of every frame like before.

In order to make this possible, the Entity identifiers in the main and the extracted version in render world are no longer guaranteed to line up. As a result:

all tools to spawn entities with a precise Entity id are in the process of being deprecated and will be removed
collections that contain references to Entity that are extracted into the render world have been changed to contain MainEntity in order to prevent errors where a render world entity id is used to look up an item by accident. Custom rendering code may need to be changed to query for &MainEntity in order to look up the correct item from such a collection
users who implement their own extraction logic for collections of main world entity should strongly consider extracting into a different collection that uses MainEntity as a key.
render phases now require specifying both the Entity and MainEntity for a given PhaseItem. Custom render phases should ensure MainEntity is available when queuing a phase item
Renderers can now check RenderVisibleEntities to avoid rendering items that are not visible from a view. RenderVisibleMeshEntities, RenderCubemapVisibleEntities, and RenderCascadeVisibleEntities are also available for more fine-grained control.

To guide you further, let's take a look at a few common patterns. For every example, we specify in which world the code is run.

Spawning entities in the render world #

Previously, if you spawned an entity with world.spawn(...), commands.spawn(...) or some other method in the rendering world, it would be despawned at the end of each frame. In 0.15, this is no longer the case and so your old code could leak entities. This can be mitigated by either re-architecting your code to no longer continuously spawn entities (like you're used to in the main world), or by adding the bevy_render::world_sync::TemporaryRenderEntity component to the entity you're spawning. Entities tagged with TemporaryRenderEntity will be removed at the end of each frame (like before).

Extract components with ExtractComponentPlugin #

// main world
app.add_plugins(ExtractComponentPlugin::<ComponentToExtract>::default());
ExtractComponentPlugin has been changed to automatically sync entities with ComponentToExtract. This is done via the new WorldSyncPlugin. Any code using ExtractComponentPlugin will not require any changes.

Manual extraction using Extract<Query<(Entity, ...)>> #

// in render world, inspired by bevy_pbr/src/cluster/mod.rs
pub fn extract_clusters(
    mut commands: Commands,
    views: Extract<Query<(Entity, &Clusters, &Camera)>>,
) {
    for (entity, clusters, camera) in &views {
        // some code
        commands.get_or_spawn(entity).insert(...);
    }
}
An extract query in the render world queries for entities and components in the main world. Here entity is a main world entity and get_or_spawn(main_world_entity).insert(...) potentially inserts components on the wrong entity. Remember, there is no longer a one-to-one correspondence between the main and render world entities. Moreover get_or_spawn has been deprecated.

In 0.15, you should use RenderEntity in place of Entity to get the correct entity in the render world. For entities to have a RenderEntity they need to be synced first. This can be done either via WorldSyncPlugin or adding the SyncToRenderWorld to the main world entity.

This results in the following code:

// in render world, inspired by bevy_pbr/src/cluster/mod.rs
pub fn extract_clusters(
    mut commands: Commands,
    views: Extract<Query<(RenderEntity, &Clusters, &Camera)>>,
) {
    for (render_entity, clusters, camera) in &views {
        // some code
        // After the sync step, all main world entities with a &RenderEntity have a corresponding (empty) render world entity. This should never panic.
        commands.entity(render_entity).insert(...);
    }
}

// in main world, when spawning
world.spawn((Clusters::default(), Camera::default(), SyncToRenderWorld))
Looking up main world entities in the render world #

In order to get the main world entity from a render world entity. It works much the same. Every synced render world entity has a MainEntity component you can query for that returns the correct main world entity.

// in the render world
pub fn inspect_clusters(
    views: Query<(MainEntity, &Clusters, &Camera)>
) {
    for (main_entity, clusters, camera in &views) {
        // do something
    }
}
General advice for working with main and render world entities #

When working with entities from both worlds it can be confusing. If you are every in a scenario where this isn't entirely clear (for example, when working on custom extraction code in the render world), we advise that you use RenderEntity and MainEntity as simple wrappers around Entity. Mixing these up can become a real headache and lead to some non-obvious errors.

// render world 0.14
pub instances: Vec<(Entity, RenderLayers, bool)>,

// render world 0.15
pub instances: Vec<(MainEntity, RenderLayers, bool)>,
There are also other ways to disambiguate between the two worlds.

// render world 0.14
pub(crate) render_lightmaps: EntityHashMap<RenderLightmap>,

// render world 0.15
pub(crate) render_lightmaps: MainEntityHashMap<RenderLightmap>,
Add 2d opaque phase with depth buffer #
PR #13069
Rendering
ColorMaterial now contains AlphaMode2d. To keep previous behaviour, use AlphaMode::BLEND. If you know your sprite is opaque, use AlphaMode::OPAQUE
Add RenderSet::FinalCleanup for World::clear_entities #
PR #14764
Rendering
World::clear_entities is now part of RenderSet::PostCleanup rather than RenderSet::Cleanup. Your cleanup systems should likely stay in RenderSet::Cleanup.

Add feature requirement info to image loading docs #
PR #13712
Rendering
Image format related entities are feature gated, if there are compilation errors about unknown names there are some of features in list (exr, hdr, basis-universal, png, dds, tga, jpeg, bmp, ktx2, webp and pnm) should be added.

Add support for environment map transformation #
PR #14290
Rendering
Since we have added a new filed to the EnvironmentMapLight struct, users will need to include ..default() or some rotation value in their initialization code.
Add support for skybox transformation #
PR #14267
Rendering
Since we have added a new filed to the Skybox struct, users will need to include ..Default::default() or some rotation value in their initialization code.
Added feature switch to default Standard Material's new anisotropy texture to off #
PR #14048
Rendering
Add feature pbr_anisotropy_texture if you are using that texture in any standard materials.
Added visibility bitmask as an alternative SSAO method #
PR #13454
Rendering
SSAO algorithm was changed from GTAO to VBAO (visibility bitmasks). A new field, constant_object_thickness, was added to ScreenSpaceAmbientOcclusion. ScreenSpaceAmbientOcclusion also lost its Eq and Hash implementations.

Adding alpha_threshold to OrderIndependentTransparencySettings for user-level optimization #
PR #16090
Rendering
If you previously explicitly initialized OrderIndependentTransparencySettings with your own layer_count, you will now have to add either a ..default() statement or an explicit alpha_threshold value:

fn setup(mut commands: Commands) {
    commands.spawn((
        Camera3d::default(),
        OrderIndependentTransparencySettings {
            layer_count: 16,
            ..default()
        },
    ));
}
Adds ShaderStorageBuffer asset #
PR #14663
Rendering
The AsBindGroup storage attribute has been modified to reference the new Handle<Storage> asset instead. Usages of Vec` should be converted into assets instead.

Allow mix of hdr and non-hdr cameras to same render target #
PR #13419
Rendering
Change CameraOutputMode to use ClearColorConfig instead of LoadOp.

Allow volumetric fog to be localized to specific, optionally voxelized, regions. #
PR #14099
Rendering
A FogVolume is now necessary in order to enable volumetric fog, in addition to VolumetricFogSettings on the camera. Existing uses of volumetric fog can be migrated by placing a large FogVolume surrounding the scene.
Attempt to remove component from render world if not extracted. #
PR #15904
Rendering
Components that implement ExtractComponent and return None will cause the extracted component to be removed from the render world.

Bind only the written parts of storage buffers. #
PR #16405
Rendering
Fixed a bug with StorageBuffer and DynamicStorageBuffer binding data from the previous frame(s) due to caching GPU buffers between frames.
Changed Mesh::attributes* functions to return MeshVertexAttribute #
PR #14394
Rendering
When using the iterator returned by Mesh::attributes or Mesh::attributes_mut the first value of the tuple is not the MeshVertexAttribute instead of MeshVertexAttributeId. To access the MeshVertexAttributeId use the MeshVertexAttribute.id field.
Expose Pipeline Compilation Zero Initialize Workgroup Memory Option #
PR #16301
Rendering
add zero_initialize_workgroup_memory: false, to ComputePipelineDescriptor or RenderPipelineDescriptor structs to preserve 0.14 functionality, add zero_initialize_workgroup_memory: true, to restore bevy 0.13 functionality.
Feature-gate all image formats #
PR #15586
Rendering
Image formats that previously weren’t feature-gated are now feature-gated, meaning they will have to be enabled if you use them:

avif
ff (Farbfeld)
gif
ico
tiff
Additionally, the qoi feature has been added to support loading QOI format images.

Previously, these formats appeared in the enum by default, but weren’t actually enabled via the image crate, potentially resulting in weird bugs. Now, you should be able to add these features to your projects to support them properly.

If you were individually configuring the bevy_render crate, the feature flags for the general image formats were moved to bevy_image instead. For example, bevy_render/png no longer exists, and bevy_image/png is the new location for this. The texture formats are still available on bevy_render, e.g. bevy_render/ktx2 is needed to fully enable ktx2 support, and this will automatically enable bevy_image/ktx2 for loading the textures.

Fix Mesh allocator bug and reduce Mesh data copies by two #
PR #15566
Rendering
Mesh::get_vertex_buffer_data has been renamed Mesh::create_packed_vertex_buffer_data to reflect the fact that it copies data and allocates.
Improve API for scaling orthographic cameras #
PR #15969
Rendering
ScalingMode has been refactored for clarity, especially on how to zoom orthographic cameras and their projections:

ScalingMode::WindowSize no longer stores a float, and acts as if its value was 1. Divide your camera’s scale by any previous value to achieve identical results.
ScalingMode::FixedVertical and FixedHorizontal now use named fields.
Lighting Should Only hold Vec<Entity> instead of TypeId<Vec<Entity>> #
PR #14073
Rendering
SpotLight, CascadesVisibleEntities and CubemapVisibleEntities now use VisibleMeshEntities instead of VisibleEntities

Migrate bevy_sprite to required components #
PR #15489
Rendering
Replace all uses of SpriteBundle with Sprite. There are several new convenience constructors: Sprite::from_image, Sprite::from_atlas_image, Sprite::from_color.

WARNING: use of Handle<Image> and TextureAtlas as components on sprite entities will NO LONGER WORK. Use the fields on Sprite instead. I would have removed the Component impls from TextureAtlas and Handle<Image> except it is still used within ui. We should fix this moving forward with the migration.

Migrate lights to required components #
PR #15554
Rendering
PointLightBundle, SpotLightBundle, and DirectionalLightBundle have been deprecated. Use the PointLight, SpotLight, and DirectionalLight components instead. Adding them will now insert the other components required by them automatically.

Move ImageLoader and CompressedImageSaver to bevy_image. #
PR #15812
Rendering
ImageLoader can no longer be initialized directly through init_asset_loader. Now you must use app.register_asset_loader(ImageLoader::new(supported_compressed_formats)) (check out the implementation of bevy_render::ImagePlugin). This only affects you if you are initializing the loader manually and does not affect users of bevy_render::ImagePlugin.
The asset loader name must be updated in .meta files for images. Change: loader: "bevy_render::texture::image_loader::ImageLoader", to: loader: "bevy_image::image_loader::ImageLoader",
This will fix the following error:

no AssetLoader found with the name 'bevy_render::texture::image_loader::ImageLoader
Move Msaa to component #
PR #14273
Rendering
Msaa is no longer configured as a global resource, and should be specified on each spawned camera if a non-default setting is desired.

Only use the AABB center for mesh visibility range testing if specified. #
PR #16468
Rendering
The VisibilityRange component now has an extra field, use_aabb. Generally, you can safely set it to false.
Pack multiple vertex and index arrays together into growable buffers. #
PR #14257
Rendering
Vertex and index buffers for meshes may now be packed alongside other buffers, for performance.
GpuMesh has been renamed to RenderMesh, to reflect the fact that it no longer directly stores handles to GPU objects.
Because meshes no longer have their own vertex and index buffers, the responsibility for the buffers has moved from GpuMesh (now called RenderMesh) to the MeshAllocator resource. To access the vertex data for a mesh, use MeshAllocator::mesh_vertex_slice. To access the index data for a mesh, use MeshAllocator::mesh_index_slice.
Reduce the clusterable object UBO size below 16384 for WebGL 2. #
PR #16069
Rendering
The maximum number of clusterable objects on WebGL2 is now 204, to keep us within our 16 kB memory budget. Modify your scenes or use WebGPU if you are running into this.

Refactor AsBindGroup to use a associated SystemParam. #
PR #14909
Rendering
AsBindGroup now allows the user to specify a SystemParam to be used for creating bind groups.

Remove AVIF feature #
PR #15973
Rendering
AVIF images are no longer supported. They never really worked, and require system dependencies (libdav1d) to work correctly, so, it’s better to simply offer this support via an unofficial plugin instead as needed. The corresponding types have been removed from Bevy to account for this.

Remove OrthographicProjection.scale (adopted) #
PR #15075
Rendering
Replace all uses of scale with scaling_mode, keeping in mind that scale is (was) a multiplier. For example, replace

    scale: 2.0,
    scaling_mode: ScalingMode::FixedHorizontal(4.0),

with

    scaling_mode: ScalingMode::FixedHorizontal(8.0),
Rename rendering components for improved consistency and clarity #
PR #15035
Rendering
Many rendering components have been renamed for improved consistency and clarity.

AutoExposureSettings → AutoExposure
BloomSettings → Bloom
BloomPrefilterSettings → BloomPrefilter
ContrastAdaptiveSharpeningSettings → ContrastAdaptiveSharpening
DepthOfFieldSettings → DepthOfField
FogSettings → DistanceFog
SmaaSettings → Smaa
TemporalAntiAliasSettings → TemporalAntiAliasing
ScreenSpaceAmbientOcclusionSettings → ScreenSpaceAmbientOcclusion
ScreenSpaceReflectionsSettings → ScreenSpaceReflections
VolumetricFogSettings → VolumetricFog
Replace the wgpu_trace feature with a field in bevy_render::settings::WgpuSettings #
PR #14842
Rendering
The bevy/wgpu_trace and bevy_render/wgpu_trace features have been removed, as WGPU tracing is now enabled during the creation of bevy_render::RenderPlugin.

Note: At the time of writing, WGPU has not reimplemented tracing support, so WGPU tracing will not currently work. However, once WGPU has reimplemented tracing support, the steps below should be sufficient to continue generating WGPU traces.

You can track the progress of WGPU tracing being reimplemented at gfx-rs/wgpu#5974.

To continue generating WGPU traces:

Remove any instance of the bevy/wgpu_trace or bevy_render/wgpu_trace features you may have in any of your Cargo.toml files.
Follow the instructions in docs/debugging.md, under the WGPU Tracing section.
Replaced implicit emissive weight with default. #
PR #13871
Rendering
The behaviour of emissive materials when using deferred rendering has been changed to match forward rendering. Tweak the emissive values of your materials to achieve the desired efffect.

Return Results from Camera's world/viewport conversion methods #
PR #14989
Rendering
The following methods on Camera now return a Result instead of an Option so that they can provide more information about failures:

world_to_viewport
world_to_viewport_with_depth
viewport_to_world
viewport_to_world_2d
Call .ok() on the Result to turn it back into an Option, or handle the Result directly.

Rewrite screenshots. #
PR #14833
Rendering
ScreenshotManager has been removed. To take a screenshot, spawn a Screenshot entity with the specified render target and provide an observer targeting the ScreenshotCaptured event. See the window/screenshot example to see an example.

Split OrthographicProjection::default into 2d & 3d (Adopted) #
PR #15073
Rendering
In initialization of OrthographicProjection, change ..default() to ..OrthographicProjection::default_2d() or ..OrthographicProjection::default_3d()
Example:

--- a/examples/3d/orthographic.rs
+++ b/examples/3d/orthographic.rs
@@ -20,7 +20,7 @@ fn setup(
         projection: OrthographicProjection {
             scale: 3.0,
             scaling_mode: ScalingMode::FixedVertical(2.0),
-            ..default()
+            ..OrthographicProjection::default_3d()
         }
         .into(),
         transform: Transform::from_xyz(5.0, 5.0, 5.0).looking_at(Vec3::ZERO, Vec3::Y),
Split out bevy_mesh from bevy_render #
PR #15666
Rendering
bevy_render::mesh::morph::inherit_weights has been moved to bevy_render::mesh::inherit_weights.

Mesh::compute_aabb has been moved to the new MeshAabb trait. You may need to import it.

use bevy::render::mesh::MeshAabb;
Using Cas instead of CAS #14341 #
PR #14357
Rendering
CASNode, DenoiseCAS CASPipeline, and CASUniform have been renamed to CasNode (and so on) to follow standard Rust naming conventions.

Virtual Geometry changes #
PR #14193
PR #14623
PR #15023
PR #15084
PR #15643
PR #15846
PR #15886
PR #15955
PR #16049
PR #16111
Rendering
Runtime
This feature now requires that your GPU supports WgpuFeatures::SHADER_INT64_ATOMIC_MIN_MAX.
MeshletPlugin now requires a cluster_buffer_slots field. Read the rustdoc for more details.
MaterialMeshletMeshBundle has been deprecated. Instead of using Handle<MeshletMesh> and Handle<M: Material> as components directly, use the MeshletMesh3d and MeshMaterial3d components.
Asset Conversion
Regenerate your MeshletMesh assets, as the asset format has changed, and MESHLET_MESH_ASSET_VERSION has been bumped. Old assets are not compatible.
When using MeshletMesh::from_mesh(), the provided mesh must no longer have tangents as a vertex attribute.
When using MeshletMesh::from_mesh(), you must now supply a vertex_position_quantization_factor argument. Use MESHLET_DEFAULT_VERTEX_POSITION_QUANTIZATION_FACTOR, and adjust as needed. See the docs for more info.
Misc
MeshletMeshSaverLoad has been split into MeshletMeshSaver and MeshletMeshLoader.
Renamed MeshletMeshSaveOrLoadError to MeshToMeshletMeshConversionError.
The MeshletMeshSaveOrLoadError::SerializationOrDeserialization enum variant has been removed.
Added MeshToMeshletMeshConversionError::WrongFileType, match on this variant if you match on MeshToMeshletMeshConversionError
MeshletMesh fields are now private.
The Meshlet, MeshletBoundingSpheres, and MeshletBoundingSphere types are now private.
Wgpu 0.20 #
PR #13186
Rendering
Updated to wgpu 0.20, naga 0.20, and naga_oil 0.14
All of Naga’s Capabilities should now be properly detected and supported.
Timestamps inside encoders are now disallowed on WebGPU to follow the spec (they still work on native). Use the TIMESTAMP_QUERY_INSIDE_ENCODERS wgpu feature to check for support.
You can now use many numeric built-ins in const contexts (eg. abs, cos, floor, max, etc, see https://github.com/gfx-rs/wgpu/blob/v0.20/CHANGELOG.md#wgsl-const-evaluation-for-many-more-built-ins for the whole list)
You can now use Subgroup operations in shaders on supported hardware (see https://github.com/gfx-rs/wgpu/blob/v0.20/CHANGELOG.md#subgroup-operations for limitations and which features to check)
u64 and i64 are now supported in shaders on supported hardware (requires the SHADER_INT64 feature, supported on desktop Vulkan, DX12 with DXC, and Metal with MSL 2.3+)
check sampler type in as_bind_group derives #
PR #12637
Rendering
Instead of panicking, the AsBindGroup derive can now fail. To accommodate this, PrepareAssetError now has another arm: PrepareAssetError::AsBindGroupError. If you were exhaustively matching, you now need to handle this failure mode.

cleanup bevy_render/lib.rs #
PR #16481
Rendering
RenderCreation::Manual variant fields are now wrapped in a struct called RenderResources

Fix UI texture atlas with offset #
PR #13620
Rendering
UI
let ui_node = ExtractedUiNode {
                    stack_index,
                    transform,
                    color,
                    rect,
                    image,
-                   atlas_size: Some(atlas_size * scale_factor),      
+                   atlas_scaling: Some(Vec2::splat(scale_factor)),
                    clip,
                    flip_x,
                    flip_y,
                    camera_entity,
                    border,
                    border_radius,
                    node_type,
                },
let computed_slices = ComputedTextureSlices {
    slices,
-    image_size,
}
Make default behavior for BackgroundColor and BorderColor more intuitive #
PR #14017
Rendering
UI
BackgroundColor no longer tints the color of images in ImageBundle or ButtonBundle. Set UiImage::color to tint images instead.
The default texture for UiImage is now a transparent white square. Use UiImage::solid_color to quickly draw debug images.
The default value for BackgroundColor and BorderColor is now transparent. Set the color to white manually to return to previous behavior.
Optional UI rendering #
PR #8997
Rendering
UI
UiPlugin has a new field enable_rendering. If set to false, the UI’s rendering systems won’t be added to the RenderApp and no UI elements will be drawn. The layout and interaction components will still be updated as normal.

use precomputed border values #
PR #15163
Rendering
UI
The logical_rect and physical_rect methods have been removed from Node. Use Rect::from_center_size with the translation and node size instead.

The types of the fields border and border_radius of ExtractedUiNode have been changed to BorderRect and ResolvedBorderRadius respectively.

Inverse bevy_render bevy_winit dependency and move cursor to bevy_winit #
PR #15649
Rendering
Windowing
CursorIcon and CustomCursor previously provided by bevy::render::view::cursor is now available from bevy::winit. A new feature custom_cursor enables this functionality (default feature).

Scenes #
Align Scene::write_to_world_with to match DynamicScene::write_to_world_with #
PR #13855
Scenes
Scene::write_to_world_with no longer returns an InstanceInfo.

Before

scene.write_to_world_with(world, &registry)
After

let mut entity_map = EntityHashMap::default();
scene.write_to_world_with(world, &mut entity_map, &registry)
Align Scene::write_to_world_with to match DynamicScene::write_to_world_with #
PR #13855
Scenes
Scene::write_to_world_with no longer returns an InstanceInfo.

Before

scene.write_to_world_with(world, &registry)
After

let mut entity_map = EntityHashMap::default();
scene.write_to_world_with(world, &mut entity_map, &registry)
Change SceneInstanceReady to trigger an observer. #
PR #13859
Scenes
If you have a system which reads SceneInstanceReady events, it must be rewritten as an observer or entity observer.

// 0.14
fn ready_system(ready_events: EventReader<'_, '_, SceneInstanceReady>) {
    // ...
}

// 0.15
commands.observe(|trigger: Trigger<SceneInstanceReady>| {
    // ...
});
commands.entity(entity).observe(|trigger: Trigger<SceneInstanceReady>| {
    // ...
});
Migrate scenes to required components #
PR #15579
Scenes
Asset handles for scenes and dynamic scenes must now be wrapped in the SceneRoot and DynamicSceneRoot components. Raw handles as components no longer spawn scenes.

Additionally, SceneBundle and DynamicSceneBundle have been deprecated. Instead, use the scene components directly.

Previously:

let model_scene = asset_server.load(GltfAssetLabel::Scene(0).from_asset("model.gltf"));

commands.spawn(SceneBundle {
    scene: model_scene,
    transform: Transform::from_xyz(-4.0, 0.0, -3.0),
    ..default()
});
Now:

let model_scene = asset_server.load(GltfAssetLabel::Scene(0).from_asset("model.gltf"));

commands.spawn((
    SceneRoot(model_scene),
    Transform::from_xyz(-4.0, 0.0, -3.0),
));
Send SceneInstanceReady when spawning any kind of scene #
PR #11741
Scenes
SceneInstanceReady { parent: Entity } is now SceneInstanceReady { id: InstanceId, parent: Option<Entity> }.
explicitly mention component in methods on DynamicSceneBuilder #
PR #15210
Scenes
DynamicSceneBuilder::allow_all and deny_all now set resource accesses, not just components. To return to the previous behavior, use the new allow_all_components or deny_all_components methods.

The following methods for DynamicSceneBuilder have been renamed:

with_filter -> with_component_filter
allow -> allow_component
deny -> deny_component
Tasks #
Support on_thread_spawn and on_thread_destroy for TaskPoolPlugin #
PR #13045
Tasks
TaskPooolThreadAssignmentPolicy now has two additional fields: on_thread_spawn and on_thread_destroy. Please consider defaulting them to None.
Text #
Text Rework cleanup #
PR #15887
Text
Doubles as #15591 migration guide.

Text bundles (TextBundle and Text2dBundle) were removed in favor of Text and Text2d. Shared configuration fields were replaced with TextLayout, TextFont and TextColor components. Just TextBundle’s additional field turned into TextNodeFlags component, while Text2dBundle’s additional fields turned into TextBounds and Anchor components.

Text sections were removed in favor of hierarchy-based approach. For root text entities with Text or Text2d components, child entities with TextSpan will act as additional text sections. To still access text spans by index, use the new TextUiReader, Text2dReader and TextUiWriter, Text2dWriter system parameters.

Text rework #
PR #15591
PR #15887
Text
The Text API in Bevy has been overhauled in several ways as part of Bevy 0.15. There are several major changes to consider:

ab_glyph has been replaced with cosmic-text. These changes are mostly internal and the majority of users will not interact with either text backend directly.
each text section is now stored as a distinct entity within the standard hierarchy, rather than as a Vec<TextSection> on the Text component. Children of Text/Text2d entities with TextSpan components will act as additional text sections.
like other aspects of Bevy's API, required components have replaced bundles
TextBundle and text styling #

TextBundle has been removed. Add the Text component to set the string displayed.

TextLayout, TextFont and TextColor are required components for Text, and are automatically added whenever Text is. Set those values to change the text section's style.

Like elsewhere in Bevy, there is no style inheritance. Consider writing your own abstraction for this if this is something you'd like to use.

To control the layout of a Text section, modify the properties of its Node.

Accessing text spans by index #

Previously, text sections were elements of a vector stored within Text. Now, they are stored as distinct entities under the same Parent. You can use the new TextUiReader and TextUiWriter system parameters to conveniently access text spans by index.

Before:

fn refresh_text(mut query: Query<&mut Text, With<TimeText>>, time: Res<Time>) {
    let text = query.single_mut();
    text.sections[1].value = format_time(time.elapsed());
}
After:

fn refresh_text(
    query: Query<Entity, With<TimeText>>,
    mut writer: TextUiWriter,
    time: Res<Time>
) {
    let entity = query.single();
    *writer.text(entity, 1) = format_time(time.elapsed());
}
2D equivalents (Text2dReader and Text2dWriter) also exist.

Internal layout information #

TextBundle additional fields have been moved into the TextNodeFlags component, while Text2dBundle's additional fields turned into the TextBounds and Anchor components.

Uncouple DynamicTextureAtlasBuilder from assets #
PR #13717
Text
Replace the glyph_id and subpixel_offset of a few text atlas APIs by a single place_glyph: PlacedGlyph parameter trivially combining the two.
DynamicTextureAtlasBuilder::add_texture now takes a &mut Image, rather than a Handle<Image>. To access this, fetch the underlying image using Assets<Image>::get_mut.
split up TextStyle #
PR #15857
Text
TextStyle has been renamed to TextFont and its color field has been moved to a separate component named TextColor which newtypes Color.

Add the ability to control font smoothing #
PR #15368
Text
UI
Text now contains a font_smoothing: FontSmoothing property, make sure to include it or add ..default() when using the struct directly;
FontSizeKey has been renamed to FontAtlasKey, and now also contains the FontSmoothing setting;
The following methods now take an extra font_smoothing: FontSmoothing argument:
FontAtlas::new()
FontAtlasSet::add_glyph_to_atlas()
FontAtlasSet::get_glyph_atlas_info()
FontAtlasSet::get_outlined_glyph_texture()
Cosmic text #
PR #10193
Text
UI
Text2dBounds has been replaced with TextBounds, and it now accepts Options to the bounds, instead of using f32::INFINITY to indicate lack of bounds
Textsizes should be changed, dividing the current size with 1.2 will result in the same size as before.
TextSettings struct is removed
Feature subpixel_glyph_atlas has been removed since cosmic-text already does this automatically
TextBundles and things rendering texts requires the CosmicBuffer Component on them as well
Time #
aligning public apis of Time,Timer and Stopwatch #
PR #15962
Time
The APIs of Time, Timer and Stopwatch have been cleaned up for consistency with each other and the standard library’s Duration type. The following methods have been renamed:

Stowatch::paused -> Stopwatch::is_paused
Time::elapsed_seconds -> Time::elapsed_secs (including _f64 and _wrapped variants)
UI #
Add UI GhostNode #
PR #15341
UI
Any code that previously relied on Parent/Children to iterate UI children may now want to use bevy_ui::UiChildren to ensure ghost nodes are skipped, and their first descendant Nodes included.

UI root nodes may now be children of ghost nodes, which means Without<Parent> might not query all root nodes. Use bevy_ui::UiRootNodes where needed to iterate root nodes instead.

Clean up UiSystem system sets #
PR #14228
UI
UiSystem system set adjustments.

The UiSystem::Outline system set is now strictly ordered after UiSystem::Layout, rather than overlapping it.
Migrate UI bundles to required components #
PR #15898
PR #15975
UI
NodeBundle has been replaced with Node (and its associated required components). Simultaneously, the fields and behavior of Style have been moved to Node, and the largely internal values previously stored there are now found on ComputedNode.

It will be easiest to migrate if you replace Node with ComputedNode first, then Style with Node, and finally NodeBundle with Node.

Node -> ComputedNode #

For any usage of the “computed node properties” that used to live on Node, use ComputedNode instead. This is a trivial find-and-replace rename.

If you were ever explicitly adding Node (now ComputedNode) to your UI bundles, you can remove this, as it is now required by Node (previously Style).

Before:

fn system(nodes: Query<&Node>) {
    for node in &nodes {
        let computed_size = node.size();
    }
}
After:

fn system(computed_nodes: Query<&ComputedNode>) {
    for computed_node in &computed_nodes {
        let computed_size = computed_node.size();
    }
}
Style -> Node #

All of the values of Style now live on Node. This is a find-and-replace rename.

Before:

Style {
    width: Val::Px(100.),
    ..default()
}
After:

Node {
    width: Val::Px(100.),
    ..default()
}
NodeBundle -> Node #

Finally, replace all uses of NodeBundle with Node. All other components in NodeBundle are now added implicitly via required components. Adding them to your bundles manually will overwrite the default values.

Before:

     commands
        .spawn(NodeBundle {
            style: Style {
                 width: Val::Percent(100.),
                 align_items: AlignItems::Center,
                 justify_content: JustifyContent::Center,
                 ..default()
             },
            ..default()
        });
After:

     commands
        .spawn(Node {
            width: Val::Percent(100.),
            align_items: AlignItems::Center,
            justify_content: JustifyContent::Center,
            ..default()
        });
Move TextureAtlas into UiImage and remove impl Component for TextureAtlas #
PR #16072
UI
Before:

commands.spawn((
  UiImage::new(image),
  TextureAtlas { index, layout },
));
After:

commands.spawn(UiImage::from_atlas_image(image, TextureAtlas { index, layout }));
Before:

commands.spawn(UiImage {
    texture: some_image,
    ..default()
})
After:

commands.spawn(UiImage {
    image: some_image,
    ..default()
})
Only use physical coords internally in bevy_ui #
PR #16375
UI
ComputedNode’s fields and methods now use physical coordinates. ComputedNode has a new field inverse_scale_factor. Multiplying the physical coordinates by the inverse_scale_factor will give the logical values.

Overflow clip margin #
PR #15442
PR #15561
UI
Style has a new field OverflowClipMargin. It allows users to set the visible area for clipped content when using overflow-clip, -hidden, or -scroll and expand it with a margin.

There are three associated constructor functions content_box, padding_box and border_box:

content_box: elements painted outside of the content box area (the innermost part of the node excluding the padding and border) of the node are clipped. This is the new default behaviour.
padding_box: elements painted outside outside of the padding area of the node are clipped.
border_box: elements painted outside of the bounds of the node are clipped. This matches the behaviour from Bevy 0.14.
There is also a with_margin method that increases the size of the visible area by the given number in logical pixels, negative margin values are clamped to zero.

OverflowClipMargin is ignored unless overflow-clip, -hidden or -scroll is also set on at least one axis of the UI node.

Remove custom rounding #
PR #16097
UI
UiSurface::get_layout now also returns the final sizes before rounding. Call .0 on the Ok result to get the previously returned taffy::Layout value.

Remove useless Direction field #
PR #14793
UI
Style no longer has a direction field, and Direction has been deleted. They didn’t do anything, so you can delete any references to them as well.

Rename BreakLineOn to LineBreak #
PR #15583
UI
BreakLineOn was renamed to LineBreak, and parameters named linebreak_behavior were renamed to linebreak.

Replace Handle<M: UiMaterial> component with UiMaterialHandle wrapper #
PR #15740
UI
Let’s defer the migration guide to the required component port. I just want to yeet the Component impl on Handle in the meantime :)

Simplified ui_stack_system #
PR #9889
UI
The ZIndex enum has been split into two separate components ZIndex (which replaces ZIndex::Local) and GlobalZIndex (which replaces ZIndex::Global). An entity can have both a ZIndex and GlobalZIndex, in comparisons ZIndex breaks ties if two GlobalZindex values are equal.

UiImage -> ImageNode, UiImageSize -> ImageNodeSize #
PR #16271
UI
Before:

commands.spawn(UiImage::new(image));
After:

commands.spawn(ImageNode::new(image));
Explicitly order CameraUpdateSystem before UiSystem::Prepare #
PR #14609
UI
Windowing
CameraUpdateSystem is now explicitly ordered before UiSystem::Prepare instead of being ambiguous with it.

Utils #
Allow bevy_utils in no_std Contexts #
PR #15279
Utils
If you were importing bevy_utils and setting default_features to false, but relying on elements which are now gated behind the std or alloc features, include the relevant feature in your Cargo.toml.

Remove allocation in get_short_name #
PR #15294
Utils
For format!, dbg!, panic!, etc.

// Before
panic!("{} is too short!", get_short_name(name));

// After
panic!("{} is too short!", ShortName(name));
Need a String Value

// Before
let short: String = get_short_name(name);

// After
let short: String = ShortName(name).to_string();
Remove remnant EntityHash and related types from bevy_utils #
PR #15039
Utils
Uses of bevy::utils::{EntityHash, EntityHasher, EntityHashMap, EntityHashSet} now have to be imported from bevy::ecs::entity.
Remove unused type parameter in Parallel::drain() #
PR #14178
Utils
The type parameter of Parallel::drain() was unused, so it is now removed. If you were manually specifying it, you can remove the bounds.

// 0.14
// Create a `Parallel` and give it a value.
let mut parallel: Parallel<Vec<u8>> = Parallel::default();
*parallel.borrow_local_mut() = vec![1, 2, 3];

for v in parallel.drain::<u8>() {
    // ...
}

// 0.15
let mut parallel: Parallel<Vec<u8>> = Parallel::default();
*parallel.borrow_local_mut() = vec![1, 2, 3];

// Remove the type parameter.
for v in parallel.drain() {
    // ...
}
Windowing #
Add bevy_window::Window options for MacOS #
PR #15820
Windowing
bevy_window::Window now has extra fields for configuring MacOS window settings:

    pub movable_by_window_background: bool,
    pub fullsize_content_view: bool,
    pub has_shadow: bool,
    pub titlebar_shown: bool,
    pub titlebar_transparent: bool,
    pub titlebar_show_title: bool,
    pub titlebar_show_buttons: bool,
Using Window::default keeps the same behaviour as before.

Expose winit's MonitorHandle #
PR #13669
Windowing
WindowMode variants now take a MonitorSelection, which can be set to MonitorSelection::Primary to mirror the old behavior.
Remove unused default feature from bevy_window #
PR #14313
Windowing
bevy_window had an empty default feature flag that did not do anything, so it was removed. You may have to remove any references to it if you specified it manually.

# 0.14
[dependencies]
bevy_window = { version = "0.14", default-features = false, features = ["default"] }

# 0.15
[dependencies]
bevy_window = { version = "0.15", default-features = false }
move ANDROID_APP to bevy_window #
PR #15585
Windowing
If you use the android_activity reexport from bevy::winit::android_activity, it is now in bevy::window::android_activity. Same for the ANDROID_APP static

Without area #
Add Display implementation to DebugName. #
PR #13760
In code which uses DebugName you should now use the Display implementation rather than the Debug implementation (ie {} instead of {:?} if you were printing it out).
NEXT
0.13 to 0.14

I understand your frustration! Bevy's rapid development and frequent API changes can make it challenging to keep up, especially since error messages don't always clearly indicate what needs to be changed. Let me help break down the issues and fix them step by step:

1. The `shape` module error:
   - Bevy 0.15 moved geometric primitives to a new location. We need to use `bevy::prelude::primitives::*`
   - This is part of Bevy's effort to make geometric primitives more consistent

2. The `MouseMotion` error:
   - We need to import it explicitly from `bevy::input::mouse::MouseMotion`
   - This is actually good for clarity, but the error message could be more helpful

3. The `CursorOptions` error:
   - Need to import `bevy::window::CursorOptions`
   - The window system was reorganized in 0.15 for better modularity

4. The system configuration error:
   - This is a lifetime issue with the systems. The error message is particularly cryptic
   - We need to make the systems `fn`s without lifetimes

5. The `delta_seconds()` error:
   - Method was renamed to `delta_secs()` for consistency
   - At least this error has a helpful suggestion!

Let me provide an updated version that should work:

The key takeaways for working with Bevy:

1. Always check the migration guide when upgrading versions - it contains important information about API changes
2. Use the prelude imports, but be ready to add specific imports for certain features
3. Pay attention to deprecation warnings - they usually point to the new preferred way of doing things
4. When in doubt, check Bevy's examples directory - they're kept up to date with the latest APIs

Would you like me to explain any of these changes in more detail? I can also suggest some strategies for making future upgrades easier.

Below is a distilled set of logic, heuristics, and best practices that guide development when using Bevy, focusing on its ECS and plugin-based architecture. This set is derived from common patterns and principles found in well-structured Bevy applications:

### General Architectural Heuristics

1. **Use Plugins to Modularize Functionality:**  
   - Bundle logically related systems, resources, components, and configuration into `Plugin` implementations.
   - Add these plugins to your main `App` using `app.add_plugins(MyPlugin)`.
   - Keep each plugin focused on a specific domain (e.g., player logic, world generation, rendering configuration).

2. **Rely on Required Components Instead of Bundles Where Appropriate:**  
   - Current Bevy versions encourage directly inserting required components like `Transform` and `Visibility` instead of relying on a large number of pre-made bundles.
   - When spawning entities, insert only the necessary components. Components that are "required" will cause others to be automatically inserted.

3. **Use Resources for Global State, Components for Entity-Specific Data:**
   - Store configuration or global, system-wide information in resources.  
   - Store per-entity data as components attached to entities.
   - Access resources and components through systems that declare them as function parameters (via system params like `Res<Time>`, `Query<(&mut Transform, &Player)>`, etc.).

4. **Scheduling and System Sets:**
   - Place systems into relevant schedules and stages using `.add_systems(Startup, ...)` for initialization and `.add_systems(Update, ...)` for main frame updates.
   - If needed, configure execution order via `.in_set(...)`, `.before(...)`, `.after(...)`, and `.chain(...)` modifiers.
   - Keep system ordering predictable to manage dependencies and avoid race conditions. For example, run input systems before movement systems, which run before rendering systems.

5. **Prefer Queries and System Parameters Over Direct World Access:**
   - Write systems that take `Query`, `Res`, `ResMut`, and other standard params instead of manually fetching from the `World`.
   - This approach keeps systems more testable, modular, and parallelizable.
   - Only use direct world mutation (e.g., `World::spawn()`, `World::get_resource_mut()`) in setup or special cases.

6. **Incremental and Orthogonal Systems:**
   - Build small, focused systems that each handle one aspect of the game’s logic (e.g., one for player movement, another for camera control, another for collision checks).
   - Systems become easier to reason about, test, and reuse.
   - Systems that only read from queries/resources can run in parallel, increasing performance.

7. **Avoid Deprecated APIs:**
   - Follow the Bevy migration guides with each version update. If something like `Time::delta_seconds()` is renamed to `Time::delta_secs()`, update it promptly.
   - Use current stable patterns for cameras, transforms, and input handling. For example, `Camera3d` and `Transform` are standard for camera entities. Use `Res<Input<KeyCode>>` for keyboard checks.

8. **Use Clear Naming and Separate Modules:**
   - Separate your logic into modules like `player.rs`, `world.rs`, `ui.rs` and bring them together in `main.rs`.
   - Keep components, resources, and systems that belong together in the same module or plugin.
   - Ensuring a coherent directory structure with a main entry point (e.g., `main.rs`) that only initializes plugins and their systems helps maintain clarity.

9. **Prefer ECS Patterns Over OOP Inheritance:**
   - Think in terms of data (components) and behavior (systems) rather than classes.
   - New behavior: add a system that queries for entities with specific components.
   - New data: define a new component and attach it to entities that need it.

10. **Iterate and Test Regularly:**
    - Regularly run the game and test that all systems are working as expected.
    - Use `cargo run` and watch for compile errors or warnings as a form of continuous feedback.

---

**In short:**

- Break down logic into small systems, each handling distinct concerns.
- Organize code into plugins and modules, and avoid monolithic files.
- Use components for entity-specific data, resources for global state, and queries for iteration.
- Keep systems simple, data-driven, and follow Bevy’s scheduling idioms.
- Stay current with Bevy’s evolving APIs and patterns, and follow the official documentation and migration guides.
- Embrace ECS’s composition-over-inheritance ethos for flexibility and scalability.