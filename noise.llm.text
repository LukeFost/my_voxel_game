noise.llm.text

 DOCS.RS
 noise-0.9.0 
 Platform 
 Feature flags
Rust
  
noise
0.9.0
Structs
Enums
Traits
Functions
Type Aliases

?
Change settings
List of all items

Structs

Abs
Add
BasicMulti
Billow
Blend
Cache
Checkerboard
Clamp
Constant
Curve
Cylinders
Displace
Exponent
Fbm
HybridMulti
Max
Min
Multiply
Negate
OpenSimplex
Perlin
PerlinSurflet
Power
RidgedMulti
RotatePoint
ScaleBias
ScalePoint
Select
Simplex
SuperSimplex
Terrace
TranslatePoint
Turbulence
Value
Worley
math::vectors::Vector2
math::vectors::Vector3
math::vectors::Vector4
permutationtable::PermutationTable
utils::ColorGradient
utils::CylinderMapBuilder
utils::NoiseFnWrapper
utils::NoiseImage
utils::NoiseMap
utils::PlaneMapBuilder
utils::SphereMapBuilder
Enums

core::worley::ReturnType
Traits

MultiFractal
NoiseFn
Seedable
permutationtable::NoiseHasher
utils::NoiseMapBuilder
Functions

core::checkerboard::checkerboard_2d
core::checkerboard::checkerboard_3d
core::checkerboard::checkerboard_4d
core::open_simplex::open_simplex_2d
core::open_simplex::open_simplex_3d
core::open_simplex::open_simplex_4d
core::perlin::perlin_1d
core::perlin::perlin_2d
core::perlin::perlin_3d
core::perlin::perlin_4d
core::perlin_surflet::perlin_surflet_2d
core::perlin_surflet::perlin_surflet_3d
core::perlin_surflet::perlin_surflet_4d
core::simplex::simplex_2d
core::simplex::simplex_3d
core::simplex::simplex_4d
core::spheres::spheres_2d
core::spheres::spheres_3d
core::spheres::spheres_4d
core::super_simplex::super_simplex_2d
core::super_simplex::super_simplex_3d
core::value::value_2d
core::value::value_3d
core::value::value_4d
core::worley::distance_functions::chebyshev
core::worley::distance_functions::euclidean
core::worley::distance_functions::euclidean_squared
core::worley::distance_functions::manhattan
core::worley::worley_2d
core::worley::worley_3d
core::worley::worley_4d
Type Aliases

utils::Color

 DOCS.RS
 noise-0.9.0 
 Platform 
 Feature flags
Rust
  
noise
0.9.0
All Items
Modules
Structs
Traits
Crates
noise

?
Change settings
Crate noiseCopy item path
source · [−]
A procedural noise generation library for Rust.

Example

use noise::{NoiseFn, Perlin, Seedable};

let perlin = Perlin::new(1);
let val = perlin.get([42.4, 37.7, 2.8]);
Re-exports

pub use crate::math::vectors::*;
Modules§

core
math	An ultra-light private math library to make our short lives easier as we implement super-complex noise stuff.
permutationtable
utils
Structs

Abs	Noise function that outputs the absolute value of the output value from the source function.
Add	Noise function that outputs the sum of the two output values from two source functions.
BasicMulti	Noise function that outputs heterogenous Multifractal noise.
Billow	Noise function that outputs “billowy” noise.
Blend	Noise function that outputs a weighted blend of the output values from two source functions given the output value supplied by a control function.
Cache	Noise function that caches the last output value generated by the source function.
Checkerboard	Noise function that outputs a checkerboard pattern.
Clamp	Noise function that clamps the output value from the source function to a range of values.
Constant	Noise function that outputs a constant value.
Curve	Noise function that maps the output value from the source function onto an arbitrary function curve.
Cylinders	Noise function that outputs concentric cylinders.
Displace	Noise function that uses multiple source functions to displace each coordinate of the input value before returning the output value from the source function.
Exponent	Noise function that maps the output value from the source function onto an exponential curve.
Fbm	Noise function that outputs fBm (fractal Brownian motion) noise.
HybridMulti	Noise function that outputs hybrid Multifractal noise.
Max	Noise function that outputs the larger of the two output values from two source functions.
Min	Noise function that outputs the smaller of the two output values from two source functions.
Multiply	Noise function that outputs the product of the two output values from two source functions.
Negate	Noise function that negates the output value from the source function.
OpenSimplex	Noise function that outputs 2/3/4-dimensional Open Simplex noise.
Perlin	Noise function that outputs 1/2/3/4-dimensional Perlin noise.
PerlinSurflet	Noise function that outputs 2/3/4-dimensional Perlin noise.
Power	Noise function that raises the output value from the first source function to the power of the output value of the second source function.
RidgedMulti	Noise function that outputs ridged-multifractal noise.
RotatePoint	Noise function that rotates the input value around the origin before returning the output value from the source function.
ScaleBias	Noise function that applies a scaling factor and a bias to the output value from the source function.
ScalePoint	Noise function that scales the coordinates of the input value before returning the output value from the source function.
Select	Noise function that outputs the value selected from one of two source functions chosen by the output value from a control function.
Simplex	Noise function that outputs N-dimensional Simplex noise.
SuperSimplex	Noise function that outputs 2/3-dimensional Super Simplex noise.
Terrace	Noise function that maps the output value from the source function onto a terrace-forming curve.
TranslatePoint	Noise function that moves the coordinates of the input value before returning the output value from the source function.
Turbulence	Noise function that randomly displaces the input value before returning the output value from the source function.
Value	Noise function that outputs 2/3/4-dimensional Value noise.
Worley	Noise function that outputs Worley noise.
Traits

MultiFractal	Trait for MultiFractal functions
NoiseFn	Base trait for noise functions.
Seedable	Trait for functions that require a seed before generating their values

 DOCS.RS
 noise-0.9.0 
 Platform 
 Feature flags
Rust
  
noise
0.9.0
ScalePoint

Fields
source
u_scale
x_scale
y_scale
z_scale
Methods
new
set_all_scales
set_scale
set_u_scale
set_x_scale
set_y_scale
set_z_scale
Trait Implementations
Clone
NoiseFn<f64, 2>
NoiseFn<f64, 3>
NoiseFn<f64, 4>
Auto Trait Implementations
Freeze
RefUnwindSafe
Send
Sync
Unpin
UnwindSafe
Blanket Implementations
Any
Borrow<T>
BorrowMut<T>
From<T>
Into<U>
ToOwned
TryFrom<U>
TryInto<U>
In crate noise

Modules
core
math
permutationtable
utils
Structs
Abs
Add
BasicMulti
Billow
Blend
Cache
Checkerboard
Clamp
Constant
Curve
Cylinders
Displace
Exponent
Fbm
HybridMulti
Max
Min
Multiply
Negate
OpenSimplex
Perlin
PerlinSurflet
Power
RidgedMulti
RotatePoint
ScaleBias
ScalePoint
Select
Simplex
SuperSimplex
Terrace
TranslatePoint
Turbulence
Value
Worley
Traits
MultiFractal
NoiseFn
Seedable

?
Change settings
Struct noise::ScalePointCopy item path
source · [−]
pub struct ScalePoint<Source> {
    pub source: Source,
    pub x_scale: f64,
    pub y_scale: f64,
    pub z_scale: f64,
    pub u_scale: f64,
}
Noise function that scales the coordinates of the input value before returning the output value from the source function.

The get() method multiplies the coordinates of the input value with a scaling factor before returning the output value from the source function.
Fields

source: Source
Source function that outputs a value
x_scale: f64
Scaling factor applied to the x coordinate of the input value. The default scaling factor is set to 1.0.
y_scale: f64
Scaling factor applied to the y coordinate of the input value. The default scaling factor is set to 1.0.
z_scale: f64
Scaling factor applied to the z coordinate of the input value. The default scaling factor is set to 1.0.
u_scale: f64
Scaling factor applied to the u coordinate of the input value. The default scaling factor is set to 1.0.
Implementations

source
impl<Source> ScalePoint<Source>
source
pub fn new(source: Source) -> Self
source
pub fn set_x_scale(self, x_scale: f64) -> Self
Sets the scaling factor to apply to the x coordinate of the input value.
source
pub fn set_y_scale(self, y_scale: f64) -> Self
Sets the scaling factor to apply to the x coordinate of the input value.
source
pub fn set_z_scale(self, z_scale: f64) -> Self
Sets the scaling factor to apply to the x coordinate of the input value.
source
pub fn set_u_scale(self, u_scale: f64) -> Self
Sets the scaling factor to apply to the x coordinate of the input value.
source
pub fn set_scale(self, scale: f64) -> Self
Sets the scaling factor to apply to all coordinates of the input value.
source
pub fn set_all_scales(
    self,
    x_scale: f64,
    y_scale: f64,
    z_scale: f64,
    u_scale: f64
) -> Self
Sets the individual scaling factors to apply to each coordinate of the input value.
Trait Implementations

source
impl<Source: Clone> Clone for ScalePoint<Source>
source
fn clone(&self) -> ScalePoint<Source>
Returns a copy of the value. Read more
1.0.0 · source
fn clone_from(&mut self, source: &Self)
Performs copy-assignment from source. Read more
source
impl<Source> NoiseFn<f64, 2> for ScalePoint<Source>
where
    Source: NoiseFn<f64, 2>,
source
fn get(&self, point: [f64; 2]) -> f64
source
impl<Source> NoiseFn<f64, 3> for ScalePoint<Source>
where
    Source: NoiseFn<f64, 3>,
source
fn get(&self, point: [f64; 3]) -> f64
source
impl<Source> NoiseFn<f64, 4> for ScalePoint<Source>
where
    Source: NoiseFn<f64, 4>,
source
fn get(&self, point: [f64; 4]) -> f64
Auto Trait Implementations

impl<Source> Freeze for ScalePoint<Source>
where
    Source: Freeze,
impl<Source> RefUnwindSafe for ScalePoint<Source>
where
    Source: RefUnwindSafe,
impl<Source> Send for ScalePoint<Source>
where
    Source: Send,
impl<Source> Sync for ScalePoint<Source>
where
    Source: Sync,
impl<Source> Unpin for ScalePoint<Source>
where
    Source: Unpin,
impl<Source> UnwindSafe for ScalePoint<Source>
where
    Source: UnwindSafe,
Blanket Implementations

source
impl<T> Any for T
where
    T: 'static + ?Sized,
source
impl<T> Borrow<T> for T
where
    T: ?Sized,
source
impl<T> BorrowMut<T> for T
where
    T: ?Sized,
source
impl<T> From<T> for T
source
impl<T, U> Into<U> for T
where
    U: From<T>,
source
impl<T> ToOwned for T
where
    T: Clone,
source
impl<T, U> TryFrom<U> for T
where
    U: Into<T>,
source
impl<T, U> TryInto<U> for T
where
    U: TryFrom<T>,

 DOCS.RS
 noise-0.9.0 
 Platform 
 Feature flags
Rust
  
noise
0.9.0
Abs

Fields
source
Methods
new
Trait Implementations
Clone
NoiseFn<T, DIM>
Auto Trait Implementations
Freeze
RefUnwindSafe
Send
Sync
Unpin
UnwindSafe
Blanket Implementations
Any
Borrow<T>
BorrowMut<T>
From<T>
Into<U>
ToOwned
TryFrom<U>
TryInto<U>
In crate noise

Modules
core
math
permutationtable
utils
Structs
Abs
Add
BasicMulti
Billow
Blend
Cache
Checkerboard
Clamp
Constant
Curve
Cylinders
Displace
Exponent
Fbm
HybridMulti
Max
Min
Multiply
Negate
OpenSimplex
Perlin
PerlinSurflet
Power
RidgedMulti
RotatePoint
ScaleBias
ScalePoint
Select
Simplex
SuperSimplex
Terrace
TranslatePoint
Turbulence
Value
Worley
Traits
MultiFractal
NoiseFn
Seedable

?
Change settings
Struct noise::AbsCopy item path
source · [−]
pub struct Abs<T, Source, const DIM: usize>
where
    Source: NoiseFn<T, DIM>,
{
    pub source: Source,
    /* private fields */
}
Noise function that outputs the absolute value of the output value from the source function.
Fields

source: Source
Outputs a value.
Implementations

source
impl<T, Source, const DIM: usize> Abs<T, Source, DIM>
where
    Source: NoiseFn<T, DIM>,
source
pub fn new(source: Source) -> Self
Trait Implementations

source
impl<T: Clone, Source, const DIM: usize> Clone for Abs<T, Source, DIM>
where
    Source: NoiseFn<T, DIM> + Clone,
source
fn clone(&self) -> Abs<T, Source, DIM>
Returns a copy of the value. Read more
1.0.0 · source
fn clone_from(&mut self, source: &Self)
Performs copy-assignment from source. Read more
source
impl<T, Source, const DIM: usize> NoiseFn<T, DIM> for Abs<T, Source, DIM>
where
    Source: NoiseFn<T, DIM>,
source
fn get(&self, point: [T; DIM]) -> f64
Auto Trait Implementations

impl<T, Source, const DIM: usize> Freeze for Abs<T, Source, DIM>
where
    Source: Freeze,
impl<T, Source, const DIM: usize> RefUnwindSafe for Abs<T, Source, DIM>
where
    Source: RefUnwindSafe,
    T: RefUnwindSafe,
impl<T, Source, const DIM: usize> Send for Abs<T, Source, DIM>
where
    Source: Send,
    T: Send,
impl<T, Source, const DIM: usize> Sync for Abs<T, Source, DIM>
where
    Source: Sync,
    T: Sync,
impl<T, Source, const DIM: usize> Unpin for Abs<T, Source, DIM>
where
    Source: Unpin,
    T: Unpin,
impl<T, Source, const DIM: usize> UnwindSafe for Abs<T, Source, DIM>
where
    Source: UnwindSafe,
    T: UnwindSafe,
Blanket Implementations

source
impl<T> Any for T
where
    T: 'static + ?Sized,
source
impl<T> Borrow<T> for T
where
    T: ?Sized,
source
impl<T> BorrowMut<T> for T
where
    T: ?Sized,
source
impl<T> From<T> for T
source
impl<T, U> Into<U> for T
where
    U: From<T>,
source
impl<T> ToOwned for T
where
    T: Clone,
source
impl<T, U> TryFrom<U> for T
where
    U: Into<T>,
source
impl<T, U> TryInto<U> for T
where
    U: TryFrom<T>,

    pub fn perlin_1d<NH>(point: f64, hasher: &NH) -> f64
where
    NH: NoiseHasher + ?Sized,

    pub fn perlin_4d<NH>(point: Vector4<f64>, hasher: &NH) -> f64
where
    NH: NoiseHasher + ?Sized,

    pub fn worley_2d<F, NH>(
    hasher: &NH,
    distance_function: F,
    return_type: ReturnType,
    point: Vector2<f64>
) -> f64
where
    F: Fn(&[f64], &[f64]) -> f64,
    NH: NoiseHasher + ?Sized,